<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>DefconQ Blog</title>
        <link>https://DefconQ.github.io/blog</link>
        <description>DefconQ Blog</description>
        <lastBuildDate>Mon, 01 Jul 2024 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[DefconQ meets Fancy Quant - Alexander Unterrainer and Dimitri Bianco discuss KDB/Q]]></title>
            <link>https://DefconQ.github.io/blog/DefconQ meets Fancy Quant - Alexander Unterrainer and Dimitri Bianco discuss KDB/Q</link>
            <guid>https://DefconQ.github.io/blog/DefconQ meets Fancy Quant - Alexander Unterrainer and Dimitri Bianco discuss KDB/Q</guid>
            <pubDate>Mon, 01 Jul 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[In this blog post, I have a special treat for you. I sat down with Dimitri Bianco a seasoned quant who runs his own podcast and YouTube channel  dedicated to all things quant finance.]]></description>
            <content:encoded><![CDATA[<p>In this blog post, I have a special treat for you. I sat down with <a href="https://www.linkedin.com/in/dimitri-bianco/" target="_blank" rel="noopener noreferrer">Dimitri Bianco</a> a seasoned quant who runs his own podcast and <a href="https://www.youtube.com/@DimitriBianco" target="_blank" rel="noopener noreferrer">YouTube channel</a>  dedicated to all things quant finance.
I have been following Dimitri for a while and always found his podcasts incredibly informative and helpful. During my bachelor’s degree, I often felt lost and overwhelmed by the many career choices and paths available. Dimitri’s engagement provides graduates and students at the start of their careers with valuable insights to help them choose the right path. While I had to figure most things out on my own, Dimitri's podcast offers a valuable industry perspective into the field of quantitative finance.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="dimitri-bianco"><a href="https://www.linkedin.com/in/dimitri-bianco/" target="_blank" rel="noopener noreferrer">Dimitri Bianco</a><a href="https://defconq.github.io/blog/DefconQ%20meets%20Fancy%20Quant%20-%20Alexander%20Unterrainer%20and%20Dimitri%20Bianco%20discuss%20KDB/Q#dimitri-bianco" class="hash-link" aria-label="Direct link to dimitri-bianco" title="Direct link to dimitri-bianco">​</a></h2>
<iframe width="1120" height="630" src="https://www.youtube.com/embed/cQmKQaJFZFg?si=3veMWaEx21Np_-xi" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin"></iframe>]]></content:encoded>
            <category>kdb/q</category>
            <category>kdb/q community</category>
            <category>podcast</category>
            <category>blogger</category>
            <category>quant</category>
            <category>quantitative finance</category>
            <category>career</category>
            <category>Dimitri Bianco</category>
            <category>Alexander Unterrainer</category>
        </item>
        <item>
            <title><![CDATA[Advanced KDB/Q Learning Material]]></title>
            <link>https://DefconQ.github.io/blog/Advanced KDB/Q Learning Material</link>
            <guid>https://DefconQ.github.io/blog/Advanced KDB/Q Learning Material</guid>
            <pubDate>Wed, 22 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome back, fellow KDB/Q enthusiasts! If you've been following my blog journey, you've likely come across one of my earlier posts where I shared my favorite Go To KDB/Q Learning Resources aimed at beginners for diving into the world of KDB/Q. Congratulations on your progress thus far! Now, as seasoned learners in this domain, it's time to elevate our understanding further. In this latest post, we're shifting gears to focus on more advanced learning material. Whether you're looking to deepen your expertise or explore new horizons, join me as we explore advanced resources to expand your KDB/Q knowledge.]]></description>
            <content:encoded><![CDATA[<p>Welcome back, fellow KDB/Q enthusiasts! If you've been following my blog journey, you've likely come across one of my earlier posts where I shared my favorite <a href="https://www.defconq.tech/blog/Go-To%20KDB/Q%20Learning%20Resources" target="_blank" rel="noopener noreferrer">Go To KDB/Q Learning Resources</a> aimed at beginners for diving into the world of KDB/Q. Congratulations on your progress thus far! Now, as seasoned learners in this domain, it's time to elevate our understanding further. In this latest post, we're shifting gears to focus on more advanced learning material. Whether you're looking to deepen your expertise or explore new horizons, join me as we explore advanced resources to expand your KDB/Q knowledge.</p>
<p>As in my earlier post, I'll organize the resources into two sections. The first section will spotlight books covering advanced KDB/Q topics. The first two books will explore machine learning techniques in KDB/Q, while the third book is targeted more at financial market practitioners and quants, discussing price impact modeling, supplemented by KDB/Q code examples. In the second section of this post, I'll unveil a collection of valuable online resources offering advanced KDB/Q insights.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="books">Books<a href="https://defconq.github.io/blog/Advanced%20KDB/Q%20Learning%20Material#books" class="hash-link" aria-label="Direct link to Books" title="Direct link to Books">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="fun-q---a-functional-introduction-to-machine-learning-in-q-by-nick-psaris"><a href="https://www.google.com/url?sa=t&amp;source=web&amp;rct=j&amp;opi=89978449&amp;url=https://www.amazon.co.uk/Fun-Functional-Introduction-Machine-Learning/dp/1734467509&amp;ved=2ahUKEwiv4biv_ZKGAxX0gP0HHbyHCx4QFnoECBAQAQ&amp;usg=AOvVaw0r3dosQluajwEz_HraaqHR" target="_blank" rel="noopener noreferrer">Fun Q - A Functional Introduction to Machine Learning in Q by Nick Psaris</a><a href="https://defconq.github.io/blog/Advanced%20KDB/Q%20Learning%20Material#fun-q---a-functional-introduction-to-machine-learning-in-q-by-nick-psaris" class="hash-link" aria-label="Direct link to fun-q---a-functional-introduction-to-machine-learning-in-q-by-nick-psaris" title="Direct link to fun-q---a-functional-introduction-to-machine-learning-in-q-by-nick-psaris">​</a></h3>
<p><a href="https://www.google.com/url?sa=t&amp;source=web&amp;rct=j&amp;opi=89978449&amp;url=https://www.amazon.co.uk/Fun-Functional-Introduction-Machine-Learning/dp/1734467509&amp;ved=2ahUKEwiv4biv_ZKGAxX0gP0HHbyHCx4QFnoECBAQAQ&amp;usg=AOvVaw0r3dosQluajwEz_HraaqHR" target="_blank" rel="noopener noreferrer">Fun Q - A Functional Introduction to Machine Learning in Q</a> is authored by none other than <a href="https://www.linkedin.com/in/nickpsaris/" target="_blank" rel="noopener noreferrer">Nick Psaris</a>, the KDB/Q developer behind my personal favorite KDB/Q book, Q Tips (which I've previously mentioned <a href="https://www.defconq.tech/blog/Go-To%20KDB/Q%20Learning%20Resources#q-tips-by-nick-psaris" target="_blank" rel="noopener noreferrer">here</a>). Inspired by Andrew Ng, a pioneer in machine learning and co-founder of Coursera, and his online machine learning course, Nick embarked on re-implementing the entire curriculum in Q. Pushing Q to its limits, Nick meticulously translated all machine learning algorithms into Q, fine-tuning them multiple times to optimize code performance and reusability. While the table of contents may seem intimidating at first glance, Nick assured me that extensive mathematical knowledge isn't necessary. As he puts it, "once you see the three lines of code required to implement it (k-nearest neighbors and k-means) and play with the code, you'll be amazed by its simplicity (though the magic remains)!" It's no surprise that Nick's book has received stellar reviews from esteemed Q experts, quants, KDB/Q developers, and financial market participants alike.</p>
<p><strong>Accompanying GitHub</strong>: <a href="https://github.com/psaris/funq" target="_blank" rel="noopener noreferrer">Fun Q</a></p>
<p><img decoding="async" loading="lazy" alt="Fun Q" src="https://defconq.github.io/assets/images/funQ-9b2bddaa72f886a3557262f02a79dad1.png" width="750" height="900" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="machine-learning-and-big-data-with-kdbq-by-jan-novotny-paul-a-bilokon-aris-galiotos-federic-deleze"><a href="https://www.amazon.co.uk/Machine-Learning-Data-Wiley-Finance-ebook/dp/B081LNTSDV/ref=pd_sbs_d_sccl_1_2/257-8564627-3518516?pd_rd_w=Nvkbt&amp;content-id=amzn1.sym.f5d177b3-9290-4c61-8b0e-06b08cdd933f&amp;pf_rd_p=f5d177b3-9290-4c61-8b0e-06b08cdd933f&amp;pf_rd_r=11E4DZMFHPR0JY2Q9D71&amp;pd_rd_wg=2aQRF&amp;pd_rd_r=76a40471-4589-4304-95cd-816826532247&amp;pd_rd_i=B081LNTSDV&amp;psc=1" target="_blank" rel="noopener noreferrer">Machine Learning and Big Data with KDB+/Q by Jan Novotny, Paul A. Bilokon, Aris Galiotos, Federic Deleze</a><a href="https://defconq.github.io/blog/Advanced%20KDB/Q%20Learning%20Material#machine-learning-and-big-data-with-kdbq-by-jan-novotny-paul-a-bilokon-aris-galiotos-federic-deleze" class="hash-link" aria-label="Direct link to machine-learning-and-big-data-with-kdbq-by-jan-novotny-paul-a-bilokon-aris-galiotos-federic-deleze" title="Direct link to machine-learning-and-big-data-with-kdbq-by-jan-novotny-paul-a-bilokon-aris-galiotos-federic-deleze">​</a></h3>
<p><a href="https://www.amazon.co.uk/Machine-Learning-Data-Wiley-Finance-ebook/dp/B081LNTSDV/ref=pd_sbs_d_sccl_1_2/257-8564627-3518516?pd_rd_w=Nvkbt&amp;content-id=amzn1.sym.f5d177b3-9290-4c61-8b0e-06b08cdd933f&amp;pf_rd_p=f5d177b3-9290-4c61-8b0e-06b08cdd933f&amp;pf_rd_r=11E4DZMFHPR0JY2Q9D71&amp;pd_rd_wg=2aQRF&amp;pd_rd_r=76a40471-4589-4304-95cd-816826532247&amp;pd_rd_i=B081LNTSDV&amp;psc=1" target="_blank" rel="noopener noreferrer">Machine Learning and Big Data with KDB+/q</a> marked a milestone as the first book covering machine learning with KBD/Q. This collaborative effort brings together leading figures from two worlds: quantitative finance and KDB/Q. <a href="https://www.linkedin.com/in/bilokon/" target="_blank" rel="noopener noreferrer">Paul Billion</a>, renowned quant and founder of <a href="https://thalesians.com/" target="_blank" rel="noopener noreferrer">Thalesians</a>, joined forces with fellow quantitative finance experts <a href="https://www.linkedin.com/in/jan-novotny-44865510/" target="_blank" rel="noopener noreferrer">Jan Novotny</a> and <a href="https://www.linkedin.com/in/fr%C3%A9d%C3%A9ric-d%C3%A9l%C3%A8ze-9324652/" target="_blank" rel="noopener noreferrer">Frederic Deleze</a>, along with <a href="https://www.linkedin.com/in/ftiok/" target="_blank" rel="noopener noreferrer">Aris Galiotos</a>, one of the most experienced KDB/Q developers in the industry, to bundle their wealth of experience and knowledge into this comprehensive guide. The book is structured into four parts, with the initial two sections dedicated to mastering KDB/Q fundamentals and core concepts—a prerequisite for leveraging the data science and machine learning techniques covered in parts three and four.</p>
<p>Following a gentle introduction to KDB/Q, which covers foundational topics such as dictionaries, tables, iterators, and progresses to more advanced concepts like joins, parallelization, parse trees, and functional selects, the book dives nto an extensive array of machine learning and data science concepts. These encompass Linear Regression, Time Series Econometrics, Fourier Transformation, Eigensystems, and Simulating Asset Prices, among numerous others—too many to list within this brief paragraph. With Aris' extensive experience in designing, building, and engineering multiple large-scale enterprise systems, real-time analytics, and machine learning algorithms using kdb+, combined with the quantitative finance expertise brought by the other three authors, this book is a valuable resource for both KDB/Q developers with an interest in data science and machine learning, and financial market practitioners such as quants, researchers, or quant traders.</p>
<p><strong>Accompanying Github</strong>: <a href="https://github.com/hanssmail/quantQ" target="_blank" rel="noopener noreferrer">Machine Learning and Big Data with KDB+/Q</a></p>
<p><img decoding="async" loading="lazy" alt="Machine Learning and Big Data with KDB+/Q" src="https://defconq.github.io/assets/images/MLQ-b5c79442cf24d5c81053e73b6e9e891a.png" width="648" height="912" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="handbook-of-price-impact-modeling-by-kevin-t-webster"><a href="https://www.amazon.co.uk/Handbook-Modeling-Chapman-Financial-Mathematics-ebook/dp/B0C1JRJXQD/ref=sr_1_1?crid=32Q54VRWWIEX1&amp;dib=eyJ2IjoiMSJ9.IXbICVzITiLXKi21nipo3A.wQpvnqpuY8cE8_fq1TBkZ7ADxcIT9eLjarjZ6Ixpcgo&amp;dib_tag=se&amp;keywords=Handbook+of+Price+Impact+Modeling&amp;qid=1716026313&amp;s=digital-text&amp;sprefix=handbook+of+price+impact+modeling%2Cdigital-text%2C160&amp;sr=1-1" target="_blank" rel="noopener noreferrer">Handbook of Price Impact Modeling by Kevin T. Webster</a><a href="https://defconq.github.io/blog/Advanced%20KDB/Q%20Learning%20Material#handbook-of-price-impact-modeling-by-kevin-t-webster" class="hash-link" aria-label="Direct link to handbook-of-price-impact-modeling-by-kevin-t-webster" title="Direct link to handbook-of-price-impact-modeling-by-kevin-t-webster">​</a></h3>
<p>The third book in this series leans more toward finance rather than KDB/Q specifics. In <a href="https://www.amazon.co.uk/Handbook-Modeling-Chapman-Financial-Mathematics-ebook/dp/B0C1JRJXQD/ref=sr_1_1?crid=32Q54VRWWIEX1&amp;dib=eyJ2IjoiMSJ9.IXbICVzITiLXKi21nipo3A.wQpvnqpuY8cE8_fq1TBkZ7ADxcIT9eLjarjZ6Ixpcgo&amp;dib_tag=se&amp;keywords=Handbook+of+Price+Impact+Modeling&amp;qid=1716026313&amp;s=digital-text&amp;sprefix=handbook+of+price+impact+modeling%2Cdigital-text%2C160&amp;sr=1-1" target="_blank" rel="noopener noreferrer">Handbook of Price Impact Modeling</a>, <a href="https://www.linkedin.com/in/kevin-t-webster/" target="_blank" rel="noopener noreferrer">Kevin Webster</a>  offers practitioners and students a mathematical framework rooted in academic references to effectively apply price impact models to quantitative trading and portfolio management. Although the book primarily focuses on practical applications and essential skills for joining a quantitative trading desk, it provides only a brief introduction to KDB/Q in the appendix, spanning just over 20 pages. Nonetheless, for quantitative researchers or traders, this book offers valuable insights and guidance on how to:</p>
<ul>
<li>Build a market simulator to back test trading algorithms</li>
<li>Implement closed-form strategies that optimize trading signals</li>
<li>Measure liquidity risk and stress test portfolios for fire sales</li>
<li>Analyze algorithm performance controlling for common trading biases</li>
<li>Estimate price impact models using public trading tape</li>
</ul>
<p><strong>Kevin Webster, The Science of Price Impact Modeling at KXCon23</strong>: <a href="https://www.youtube.com/watch?v=kZij5uX_Tm0" target="_blank" rel="noopener noreferrer">Youtube</a></p>
<p><img decoding="async" loading="lazy" alt="Handbook of Price Impact Modeling" src="https://defconq.github.io/assets/images/PIM-726fdb455ffcd5674544c43419f6b542.png" width="620" height="911" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="online-resources">Online resources<a href="https://defconq.github.io/blog/Advanced%20KDB/Q%20Learning%20Material#online-resources" class="hash-link" aria-label="Direct link to Online resources" title="Direct link to Online resources">​</a></h2>
<p>In the latter part of this blog post, I'll be sharing some valuable online resources. While I've previously mentioned a few of them in my initial blog post <a href="https://www.defconq.tech/blog/Go-To%20KDB/Q%20Learning%20Resources" target="_blank" rel="noopener noreferrer">here</a> , it's worth highlighting that these resources offer an abundance of advanced topics and serve as a valuable asset for KDB/Q developers at any proficiency level. Furthermore, I've included additional resources that have been particularly beneficial in my journey as a KDB/Q developer, along with a newcomer that will to elevate your understanding of KDB/Q to new heights. If this has piqued your interest, keep reading. However, if you're new to KDB/Q and just embarking on your learning journey, feel free to check out my blog post on my recommended starting resources for KDB/Q <a href="https://www.defconq.tech/blog/Go-To%20KDB/Q%20Learning%20Resources" target="_blank" rel="noopener noreferrer">here</a>. I've enhanced my list of recommended beginner learning resources to incorporate the valuable content shared by my peers and friends at <a href="https://hablapps.com/" target="_blank" rel="noopener noreferrer">Habla Computing</a> in Madrid. Their contributions serve as a valuable asset for both novice and experienced KDB/Q developers.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="kx"><a href="https://kx.com/" target="_blank" rel="noopener noreferrer">KX</a><a href="https://defconq.github.io/blog/Advanced%20KDB/Q%20Learning%20Material#kx" class="hash-link" aria-label="Direct link to kx" title="Direct link to kx">​</a></h3>
<p>Without <a href="https://kx.com/" target="_blank" rel="noopener noreferrer">KX</a>, the company behind KDB/Q and its forefront development, there wouldn't be much to discuss in the first place. Although KDB/Q was initially created by <a href="https://en.wikipedia.org/wiki/Arthur_Whitney_(computer_scientist)" target="_blank" rel="noopener noreferrer">Arthur Whitney</a> (you can read about the history of KDB/Q <a href="https://www.defconq.tech/docs/language/history" target="_blank" rel="noopener noreferrer">here</a>), it's currently owned and maintained by KX. Naturally, KX provides an extensive array of learning resources, including a free online version of <a href="https://code.kx.com/q4m3/" target="_blank" rel="noopener noreferrer">"Q for Mortals"</a> by Jeffry Borror, <a href="https://kx.com/blog/" target="_blank" rel="noopener noreferrer">blog posts</a>, an extensive <a href="https://code.kx.com/q/ref/" target="_blank" rel="noopener noreferrer">reference</a> page, <a href="https://code.kx.com/q/wp/" target="_blank" rel="noopener noreferrer">whitepapers</a>, and an <a href="https://learninghub.kx.com/academy/" target="_blank" rel="noopener noreferrer">online academy</a> hat they've recently revamped. KX also actively fosters the <a href="https://learninghub.kx.com/forums/" target="_blank" rel="noopener noreferrer">KDB/Q community</a> with <a href="https://www.linkedin.com/in/michaela-woods-50502b60/" target="_blank" rel="noopener noreferrer">Michaela Woods</a> serving as just one of their evangelists. For seasoned developers, I highly recommend exploring the KX whitepapers, as they offer a wealth of valuable insights.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="data-intellect-blog"><a href="https://dataintellect.com/thoughts/?_sft_category=blog" target="_blank" rel="noopener noreferrer">Data Intellect Blog</a><a href="https://defconq.github.io/blog/Advanced%20KDB/Q%20Learning%20Material#data-intellect-blog" class="hash-link" aria-label="Direct link to data-intellect-blog" title="Direct link to data-intellect-blog">​</a></h3>
<p><a href="https://dataintellect.com/" target="_blank" rel="noopener noreferrer">Data Intellect</a> not only stands as a powerhouse in KDB/Q consultancy but also generously shares their wealth of knowledge and experience through their insightful <a href="https://dataintellect.com/thoughts/?_sft_category=blog" target="_blank" rel="noopener noreferrer">blog posts</a>. Under the leadership of <a href="https://www.linkedin.com/in/jonny-press-7005602/" target="_blank" rel="noopener noreferrer">Jonny Press</a>, a legendary figure in the KDB/Q Community, alongside <a href="https://www.linkedin.com/in/drgarydavies-kdb/" target="_blank" rel="noopener noreferrer">Gary Davies</a>, another prominent and indispensable name in the KDB/Q world, the Data Intellect blog serves as an invaluable resource of knowledge. Some of their posts have even inspired my own blog entries, educating me on critical topics like understanding <a href="https://dataintellect.com/blog/adventure-in-retrieving-memory-size-of-kdb-object/" target="_blank" rel="noopener noreferrer">memory size of KDB/Q objects</a>, <a href="https://dataintellect.com/blog/garbage-collection-kdb/" target="_blank" rel="noopener noreferrer">garbage collection</a>, and <a href="https://dataintellect.com/blog/level-2-storage-formats/" target="_blank" rel="noopener noreferrer">order book storage</a>. Additionally, their blog covers a wide range of subjects including <a href="https://dataintellect.com/blog/ark-0-introducing-ark/" target="_blank" rel="noopener noreferrer">architecture design and reviews</a>, <a href="https://dataintellect.com/blog/kdb-is-memory-hungry-right/" target="_blank" rel="noopener noreferrer">memory properties of KDB/Q</a>, <a href="https://dataintellect.com/blog/unlimited-connections-a-kdb-4-1-story/" target="_blank" rel="noopener noreferrer">version updates</a> and their implications, <a href="https://dataintellect.com/blog/ark-1-kdb-framework/" target="_blank" rel="noopener noreferrer">framewokrs</a> as well as technologies that interface with KDB/Q. I vividly recall Jonny's KDB/Q Architecture presentation at a London KDB Meetup nearly a decade ago—it was a crucial moment where I learned invaluable insights into KDB/Q architecture design, best practices, and pitfalls to avoid. If you're seeking to enhance your KDB/Q expertise, I highly recommend diving into their blog.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="timestored-blog-by-ryan-hamilton"><a href="https://www.timestored.com/b/" target="_blank" rel="noopener noreferrer">Timestored Blog by Ryan Hamilton</a><a href="https://defconq.github.io/blog/Advanced%20KDB/Q%20Learning%20Material#timestored-blog-by-ryan-hamilton" class="hash-link" aria-label="Direct link to timestored-blog-by-ryan-hamilton" title="Direct link to timestored-blog-by-ryan-hamilton">​</a></h3>
<p>An often overlooked but invaluable source of KDB/Q wisdom is <a href="https://www.linkedin.com/in/justryanhamilton/" target="_blank" rel="noopener noreferrer">Ryan Hamilton's</a> blog on <a href="https://www.timestored.com/" target="_blank" rel="noopener noreferrer">Timestored</a>. Ryan, a seasoned KDB/Q developer with an esteemed reputation, has build numerous large-scale enterprise systems for various investment banks. Although Ryan's primary focus is now on <a href="https://www.timestored.com/pulse/" target="_blank" rel="noopener noreferrer">Pulse</a> (I have blogged about Pulse <a href="https://www.defconq.tech/docs/productivity/pulse" target="_blank" rel="noopener noreferrer">here</a>), a developer platform for internal data UIs, his blog remains a treasure trove of insights derived from decades of hands-on experience. It was through his blog that I gained a deep understanding of KDB/Q's <a href="https://www.timestored.com/kdb-guides/memory-management" target="_blank" rel="noopener noreferrer">memory management</a>, knowledge I haven't found anywhere else (for a comprehensive blog about memory management, read my post <a href="https://www.defconq.tech/docs/concepts/memoryManagement" target="_blank" rel="noopener noreferrer">here</a>. In addition to the wealth of KDB/Q insights available on Ryan's blog, you also have the opportunity to download <a href="https://www.timestored.com/qstudio/" target="_blank" rel="noopener noreferrer">qstudio</a> — an IDE originally tailored for KDB/Q but now accommodating various other databases as well.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="ferenc-bodons-blog"><a href="https://bodonferenc.github.io/" target="_blank" rel="noopener noreferrer">Ferenc Bodon's Blog</a><a href="https://defconq.github.io/blog/Advanced%20KDB/Q%20Learning%20Material#ferenc-bodons-blog" class="hash-link" aria-label="Direct link to ferenc-bodons-blog" title="Direct link to ferenc-bodons-blog">​</a></h3>
<p><a href="https://www.linkedin.com/in/ferencbodon/" target="_blank" rel="noopener noreferrer">Ferenc</a> currently as the Head of Benchmarking and Engineering at KX Hungary, has a rich background as an experienced data engineer, software developer, and multilingual programmer. Before joining KX, Ferenc worked for more than a decade at Morgan Stanley, building out and extending their KDB/Q data warehouse. With expertise spanning software architecture and an academic foundation in data mining and statistics, Ferenc occasionally shares his wisdom on KDB/Q or conducts insightful comparisons between KDB/Q and other mainstream programming languages via his <a href="https://bodonferenc.github.io/" target="_blank" rel="noopener noreferrer">blog</a>. Whenever he shares his insights, it's certainly worthwhile to take note.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="q201-by-stephen-taylor"><a href="https://q201.org/" target="_blank" rel="noopener noreferrer">Q201 by Stephen Taylor</a><a href="https://defconq.github.io/blog/Advanced%20KDB/Q%20Learning%20Material#q201-by-stephen-taylor" class="hash-link" aria-label="Direct link to q201-by-stephen-taylor" title="Direct link to q201-by-stephen-taylor">​</a></h3>
<p>Finally, I'm thrilled to introduce <a href="https://www.linkedin.com/in/stephen-taylor-b5ba78/" target="_blank" rel="noopener noreferrer">Stephen Taylor's</a> initiative, <a href="https://q201.org/" target="_blank" rel="noopener noreferrer">Q201</a> - a novel learning platform tailored for KDB/Q programmers, with a keen focus on understanding the syntax and semantics of this unique language, along with vector-programming techniques. Stephen has decades of software development experience, with a particularly strong background in APL—an influence that resonates strongly in Arthur's creation of KDB/Q. Notably, Stephen also served as the librarian for the official KDB/Q documentation at KX. Personally, I consider Stephen one of the rare KDB/Q developers who not only comprehends the language's complexity but also possesses the ability and patience to educate them to us mere mortals. Initially drafted as a textbook titled "Post Atomic: Vector programming in q," Stephen opted to release the content freely as a website, aspiring to establish a communal learning hub for KDB/Q enthusiasts. The website is complemented by q201.chat on StackExchange and a Study Buddy pinboard for connecting with fellow learners. This project is particularly close to my heart, as Stephen offered me the opportunity to collaborate with him, enabling me to deepen my involvement in the community to which he's been such a pivotal contributor and advocate. For those seeking a deeper grasp of KDB/Q, I highly recommend exploring Q201.</p>
<p><strong>That's all folks. Happy Learning</strong></p>]]></content:encoded>
            <category>kdb/q</category>
            <category>learning</category>
            <category>books</category>
            <category>blogs</category>
            <category>software development</category>
            <category>programming</category>
        </item>
        <item>
            <title><![CDATA[Code Organistation - Your own KDB/Q Library]]></title>
            <link>https://DefconQ.github.io/blog/Code Organistation - Your own KDB/Q library</link>
            <guid>https://DefconQ.github.io/blog/Code Organistation - Your own KDB/Q library</guid>
            <pubDate>Wed, 15 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[When I first started working as a software developer in an investment bank, I was initially placed in a C# team. After completing all the onboarding, installing Microsoft Visual Studio and gaining access to my team's codebase, I was finally able to have a look at the project I was going to work on. Little did I know, what nightmare I was about to face. Upon opening the project, I discovered that the average length of each class exceeded 15 thousand lines. Yes, you read that correctly; it's not a typo, but the shocking reality I was faced with. Navigating the code base was hard enough, but making a change without breaking anything seemed to be impossible. Luckily, I eventually transitioned to a team that embraced the concept of code organization.]]></description>
            <content:encoded><![CDATA[<p>When I first started working as a software developer in an investment bank, I was initially placed in a C# team. After completing all the onboarding, installing Microsoft Visual Studio and gaining access to my team's codebase, I was finally able to have a look at the project I was going to work on. Little did I know, what nightmare I was about to face. Upon opening the project, I discovered that the average length of each class exceeded 15 thousand lines. Yes, you read that correctly; it's not a typo, but the shocking reality I was faced with. Navigating the code base was hard enough, but making a change without breaking anything seemed to be impossible. Luckily, I eventually transitioned to a team that embraced the concept of code organization.</p>
<p>As your codebase expands and evolves, incorporating increasingly sophisticated functionality, it naturally becomes more complex and therefore more challenging to navigate, comprehend, and maintain. Hence, it's crucial to adopt a systematic approach to code organization. Doing so not only ensures extensibility and scalability but also simplifies development in the long run. Modularizing your code, as well as other various strategies exist for organizing code. In traditional object-oriented programming languages like Java or C#, organization typically revolves around classes, packages, or, on a broader scale, projects. However, there's no reason why a similar concept can't be applied in KDB/Q. In this blog post, I'll introduce a simple yet effective method of organizing your code. Additionally, I'll share some valuable tips and tricks gleaned from years of experience.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="kdbq-code-organisation-an-example">KDB/Q Code organisation: an example<a href="https://defconq.github.io/blog/Code%20Organistation%20-%20Your%20own%20KDB/Q%20library#kdbq-code-organisation-an-example" class="hash-link" aria-label="Direct link to KDB/Q Code organisation: an example" title="Direct link to KDB/Q Code organisation: an example">​</a></h2>
<p>One easy way to organise your code involves splitting the code into a <strong>library file</strong> containing all Application Programming Interfaces (APIs) and an <strong>execute file</strong> containing initialization logic along with global variable definitions, loaded by a KDB/Q process upon start-up. You can then package your code into various modules or packages based on dataset, asset class, or any other classification of your preference, applying the library and execute file pattern consistently across them.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="power-packed-libraries-bundled-functionality">Power Packed Libraries: Bundled Functionality<a href="https://defconq.github.io/blog/Code%20Organistation%20-%20Your%20own%20KDB/Q%20library#power-packed-libraries-bundled-functionality" class="hash-link" aria-label="Direct link to Power Packed Libraries: Bundled Functionality" title="Direct link to Power Packed Libraries: Bundled Functionality">​</a></h3>
<p>To enhance the extensibility and scalability of your application, it's recommended to make your code as modular as possible. This can be accomplished by exposing the business logic of your code through an API and consolidating functions related to specific functionalities or features into individual packages. Let's consider the scenario where we aim to construct a library containing fundamental mathematical functions. The following code snippet demonstrates the contents of our library file:</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>Below code is a very basic, simplified example for illustrative purposes</p></div></div>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// math.library.q</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// This is a library to compute basic mathematical operations</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// add: 	Function to perform addition</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// @param: 	x - first parameter</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// @param: 	y - second parameter</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// @return: 	sum of x and y</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">add:{[x;y]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        :x+y;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// sub: 	Function to perform subtraction</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// @param:	x - first parameter</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// @param:	y - second parameter</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// @return:	subtracts y from x</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sub:{[x;y]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        :x-y;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// mult:	Function to perform multiplication</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// @param:	x - first parameter</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// @param:	y - second parameter</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// @result:	product of x and y</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mult:{[x;y]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        :x*y;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        };</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Now, we've developed our very own, simple math library featuring essential functions that can be reused as required. We can effortlessly load this library into any process to leverage its functionality without having to duplicate any code. In the following section, we'll demonstrate how to utilize this library.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="seamless-integration-the-execute-file-solution">Seamless Integration: The Execute File Solution<a href="https://defconq.github.io/blog/Code%20Organistation%20-%20Your%20own%20KDB/Q%20library#seamless-integration-the-execute-file-solution" class="hash-link" aria-label="Direct link to Seamless Integration: The Execute File Solution" title="Direct link to Seamless Integration: The Execute File Solution">​</a></h3>
<p>While you can load your library into nearly any KDB/Q process allows for reusing the exposed APIs, another approach involves creating a file to be passed to a KDB/Q process during startup. Within this file, you can initialize global variables utilized within the process and establish an initialization function to be called upon the process's start. But examples speak louder than words, so let's check one out.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// math.exe.q</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// This is our execution file, the file we load when we start our KDB/Q process</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// Loading the math library we created, exposing all the functions in it</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">system "l math.library.q";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// Setting global variables</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">num1:4;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">num3:8;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// init:	Initialisation function</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">init:{[]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	// Within our initialisation function we define another number</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	num2:5;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	// We can now use the APIs defined in our libray</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	-1 "Adding number ",string[num1], " to number ", string[num2], " --&gt; result: ",string add[num1;num2];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        -1 "Subtracting number ",string[a], " from number ", string[b], " --&gt; result: ",string add[b:9;a:3];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        -1 "Multiplying number ",string[num2], " with number ", string[num3], " --&gt; result: ",string add[num2;num3];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	};</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// At then end of our execute file we call the init function</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">init[];</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Now, we can initiate a KDB/Q process and load our execute file upon startup. This action handles the loading of our library, initializes any global variables, and then executes the init function to complete the remaining initialization tasks.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Alexander@Alexanders-MacBook-Pro:~/repos/testCode|</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">⇒  qq math.exe.q</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">KDB+ 4.0 2023.01.20 Copyright (C) 1993-2023 Kx Systems</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">m64/ 4(24)core 8192MB Alexander alexanders-macbook-pro.local 127.0.0.1 EXPIRE 2025.02.21 XXXX@gmail.com KDB PLUS TRIAL #5018719</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Adding number 4 to number 5 --&gt; result: 9</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Subtracting number 3 from number 9 --&gt; result: 12</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Multiplying number 5 with number 8 --&gt; result: 13</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">q)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Above pattern is a powerful yet simple  technique for structuring your code and enhancing its modularity. By grouping similar functionalities into a library, you can conveniently reuse them as required, thereby eliminating redundant code duplication. Additionally, the execution file provides an easy method to configure your KDB/Q process and import all necessary libraries.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="leveraging-namespaces">Leveraging Namespaces<a href="https://defconq.github.io/blog/Code%20Organistation%20-%20Your%20own%20KDB/Q%20library#leveraging-namespaces" class="hash-link" aria-label="Direct link to Leveraging Namespaces" title="Direct link to Leveraging Namespaces">​</a></h2>
<p>In the upcoming section, I'll share two additional tips and tricks that I've found to be especially useful when organizing your code. These strategies not only contribute to cleaner code but also enhance its comprehensibility and ease of navigation.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="same-yet-different">Same Yet Different<a href="https://defconq.github.io/blog/Code%20Organistation%20-%20Your%20own%20KDB/Q%20library#same-yet-different" class="hash-link" aria-label="Direct link to Same Yet Different" title="Direct link to Same Yet Different">​</a></h3>
<p>At times, we find ourselves repeatedly implementing similar or identical functionalities, with only minor variations, such as asset class, instrument, or data source. This practice not only complicates the code and reduces readability but it can also be very confusing for users. They may wonder which function to use, what parameters to pass, and how the result appears. In the following section, I'll demonstrate how namespaces can simplify everyone's workflow.</p>
<p>Let's have a look at some code. First, we create a helper function, to verify whether a certain function exists or not. We can do so by using the <a href="https://code.kx.com/q/ref/key/" target="_blank" rel="noopener noreferrer"><code>key</code></a> operator. While the <code>key</code> operator is commonly used for retrieving the keys of a dictionary or table, it can also be used to verify whether a folder or file exists, or in our case, if a name is defined or not.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">q)exists:{not ()~key x}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">q)exists `a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0b</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">q)a:1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">q)exists `a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1b</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Next, we'll develop a set of functions that exhibit similar behavior but with slight variations. Specifically, in our scenario, he behaviour of the function differ based on the data source we want to retrieve. Additionally, we include a default function for cases where the user specifies a data source for which we haven't implemented a function yet. In such instances, we'll return the result using a default data source.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">q).equities.bloomberg.getData:{: ([] sym:`AAPL`MSFT`GOOG; source:3#`BBG;price:3?10)}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">q).equities.refinitive.getData:{: ([] sym:`AAPL`MSFT`GOOG; source:3#`REF;price:3?10)}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">q).equities.default.getData:{: ([] sym:`AAPL`MSFT`GOOG; source:3#`INHOUSE;price:3?10)}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Finally, all we have to do, is to create a function that we are going to expose to our users. The user will specify the data source they desire, and the function will handle the appropriate call to the corresponding function. Should the specified data source be unavailable, we'll return data obtained from a default source.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">.equities.getData:{[datasource] </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	// Create the namespace for the datasource and verify if it exists</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	// If it exists, invoke the function and return result</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	// If it doesn't, invoke default function and return result</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	if[exists f:` sv (`.equities;datasource;`getData);:f[]]; :.equities.default.getData[] </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	};</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Below code should illustrate this behaviour</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// Verify if function exists. Note: typo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">q)exists `.equities.bloomber.getData</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0b</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// Existing function</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">q)exists `.equities.bloomberg.getData</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1b</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// Creating the namespace</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">q)` sv `.equities`bloomberg`getData</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">`.equities.bloomberg.getData</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// Combining above</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">q)exists ` sv `.equities`bloomberg`getData</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1b</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// individual functions</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">q).equities.refinitive.getData[]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sym  source price</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-----------------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">AAPL REF    8</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">MSFT REF    1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">GOOG REF    9</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">q).equities.bloomberg.getData[]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sym  source price</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-----------------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">AAPL BBG    5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">MSFT BBG    4</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">GOOG BBG    6</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// the .equities namespace</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">q).equities</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          | ::</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bloomberg | ``getData!(::;{: ([] sym:`AAPL`MSFT`GOOG; source:3#`BBG;price:3?1..</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">refinitive| ``getData!(::;{: ([] sym:`AAPL`MSFT`GOOG; source:3#`REF;price:3?1..</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">default   | ``getData!(::;{: ([] sym:`AAPL`MSFT`GOOG; source:3#`INHOUSE;price..</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">getData   | {[datasource] if[exists f:` sv (`.equities;datasource;`getData);:..</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// Function exposed to and used by clients</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">q).equities.getData[`bloomberg]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sym  source price</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-----------------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">AAPL BBG    5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">MSFT BBG    4</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">GOOG BBG    9</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">q).equities.getData[`refinitive]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sym  source price</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-----------------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">AAPL REF    2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">MSFT REF    7</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">GOOG REF    0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// Function call with data source that doesn't exists</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// Defaults to INHOUSE data</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">q).equities.getData[`ICE]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sym  source  price</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">------------------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">AAPL INHOUSE 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">MSFT INHOUSE 9</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">GOOG INHOUSE 2</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>As you can see, we've developed a feature that exposes just one simple API to our clients, ensuring ease and simplicity in their usage. Furthermore, we're now capable of effortlessly expanding our function's behavior and incorporating more functionalities for new data sources, requiring minimal code refactoring.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="namespaces-revealed-your-handy-dictionary">Namespaces Revealed: Your Handy Dictionary<a href="https://defconq.github.io/blog/Code%20Organistation%20-%20Your%20own%20KDB/Q%20library#namespaces-revealed-your-handy-dictionary" class="hash-link" aria-label="Direct link to Namespaces Revealed: Your Handy Dictionary" title="Direct link to Namespaces Revealed: Your Handy Dictionary">​</a></h3>
<p>In KDB/Q, namespaces essentially function as dictionaries. This feature allows us to create diverse behaviors without resorting to complex and confusing <code>if-else</code> statements. You can read more about namespaces <a href="https://code.kx.com/q4m3/12_Workspace_Organization/#121-namespaces" target="_blank" rel="noopener noreferrer">here</a>. Let's have a look at a simple example:</p>
<p>First we create the <code>.upd</code> namespace and define functions for (a table) trade and order</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">q).upd.trade:{[x] `trade set x}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">q).upd.order:{[x] `order set x}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// We can inspect the .upd namespace</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">q).upd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     | ::</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">trade| {[x] `trade set x}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">order| {[x] `order set x}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Since a namespace operates like a dictionary, we can leverage indexing to access the appropriate function for various tables. By providing the table name as the first parameter, we effectively index into our namespace, triggering the function and utilizing the second parameter as its input.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">q).upd[`trade;([] time:enlist .z.p; sym:`AAP; side:`buy; price:10; qty: 100)]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">`trade</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">q)trade</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">time                          sym side price qty</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">------------------------------------------------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2024.05.15D07:40:13.902355000 AAP buy  10    100</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">q).upd[`order;([] time:enlist .z.p; sym:`AAP; side:`buy; qty: 100)]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">`order</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">q)order</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">time                          sym side qty</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">------------------------------------------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2024.05.15D07:40:31.927281000 AAP buy  100</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="gotchas">Gotchas<a href="https://defconq.github.io/blog/Code%20Organistation%20-%20Your%20own%20KDB/Q%20library#gotchas" class="hash-link" aria-label="Direct link to Gotchas" title="Direct link to Gotchas">​</a></h2>
<p>While an in-depth discussion of API design best practices exceeds the scope of this blog post, I'd like to offer two crucial suggestions for creating your APIs. Firstly, simplicity is key. An API should focus on accomplishing one single task, and one single task only. You should avoid the temptation to create a "solve every problem in the world API". Secondly, if your API extends beyond 10 lines of code (and indeed, in KDB/Q, 10 lines is quite substantial), consider refactoring and breaking it into smaller, more manageable functions. Additionally, it's advisable to avoid reliance on global variables within your functions. From my experience, this often leads to bugs or, worse, production outages. Instead, if a function requires a variable, pass it as a parameter. Depending on a globally defined variable not only introduces the risk of it being undefined but also renders your API less versatile, as it cannot be reused without redefining the global variable in another process.</p>
<p><strong>That's all folks. Happy Coding</strong></p>]]></content:encoded>
            <category>kdb/q</category>
            <category>good practice</category>
            <category>software development</category>
            <category>programming</category>
            <category>code organisation</category>
            <category>libraries</category>
        </item>
        <item>
            <title><![CDATA[DefconQ at 'Everything, Everywhere, All with KDB/Q' by Habla Computing]]></title>
            <link>https://DefconQ.github.io/blog/DefconQ at Everything, Everywhere, All with KDB/Q by Habla Computing</link>
            <guid>https://DefconQ.github.io/blog/DefconQ at Everything, Everywhere, All with KDB/Q by Habla Computing</guid>
            <pubDate>Sun, 07 Apr 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Mid January, I stumbled upon a KDB/Q meetup hosted by Habla Computing in Madrid, boasting an interesting lineup of talks and speakers. Spontaneously, I opted to seize the opportunity and booked a trip to the sunny capital of Spain to attend the event. Following the meetup, during the networking session, I had the pleasure of meeting Juan, a founding partner of Habla Computing, and Jesus, the VP of Research at Habla Computing, who warmly welcomed me into the small, but growing, Spanish KDB/Q community. Engaged in a stimulating conversation about our mutual enthusiasm for KDB/Q, Juan and Jesus extended a kind invitation for me to speak at their upcoming conference, an offer I eagerly embraced. Not only did I feel honoured to have the opportunity to share my expertise on KDB/Q, but I also take every chance to escape the rainy weather of the UK and spend some time in Spain.]]></description>
            <content:encoded><![CDATA[<p>Mid January, I stumbled upon a KDB/Q meetup hosted by <a href="https://hablapps.com/" target="_blank" rel="noopener noreferrer">Habla Computing</a> in Madrid, boasting an interesting lineup of talks and speakers. Spontaneously, I opted to seize the opportunity and booked a trip to the sunny capital of Spain to attend the event. Following the meetup, during the networking session, I had the pleasure of meeting <a href="https://www.linkedin.com/in/jserranohidalgo/" target="_blank" rel="noopener noreferrer">Juan</a>, a founding partner of Habla Computing, and <a href="https://www.linkedin.com/in/jes%C3%BAs-l%C3%B3pez-gonz%C3%A1lez-98237248/" target="_blank" rel="noopener noreferrer">Jesus</a>, the VP of Research at Habla Computing, who warmly welcomed me into the small, but growing, Spanish KDB/Q community. Engaged in a stimulating conversation about our mutual enthusiasm for KDB/Q, Juan and Jesus extended a kind invitation for me to speak at their upcoming conference, an offer I eagerly embraced. Not only did I feel honoured to have the opportunity to share my expertise on KDB/Q, but I also take every chance to escape the rainy weather of the UK and spend some time in Spain.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="everything-everywhere-all-with-kdbq---the-event">Everything, Everywhere, All with KDB/Q - The Event<a href="https://defconq.github.io/blog/DefconQ%20at%20Everything,%20Everywhere,%20All%20with%20KDB/Q%20by%20Habla%20Computing#everything-everywhere-all-with-kdbq---the-event" class="hash-link" aria-label="Direct link to Everything, Everywhere, All with KDB/Q - The Event" title="Direct link to Everything, Everywhere, All with KDB/Q - The Event">​</a></h2>
<p>The long-awaited premiere of "Everything, Everywhere, All with KDB/Q" occurred on April 3rd, drawing a significant crowd of over one hundred online participants and 30 individuals who joined in person, making it a great success. During my presentation I shared some tips and trick for how to get started with KDB/Q as well as some insights into how to read, understand and learn KDB/Q, a topic I discussed in more details in one of my blog post available <a href="https://www.defconq.tech/blog/How%20to%20Read,%20Understand%20and%20Learn%20KDB/Q%20code" target="_blank" rel="noopener noreferrer">here</a>. I was joined on stage by amazing colleagues and peers of the KDB/Q industry, including <a href="https://www.linkedin.com/in/zan-buchanan-33b5a8148/" target="_blank" rel="noopener noreferrer">Zan Buchanan</a> from <a href="https://dataintellect.com/" target="_blank" rel="noopener noreferrer">Data Intellect</a>, along with <a href="https://www.linkedin.com/in/aoife-clarke-638188136/" target="_blank" rel="noopener noreferrer">Aoife Clark</a> and <a href="https://www.linkedin.com/in/kellyr13/" target="_blank" rel="noopener noreferrer">Rebecca Kelly</a> from <a href="https://www.inqdata.ai/" target="_blank" rel="noopener noreferrer">INQDATA</a>. For those who missed it, you can access the event agenda and the recording of the live stream here:</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="agenda">Agenda<a href="https://defconq.github.io/blog/DefconQ%20at%20Everything,%20Everywhere,%20All%20with%20KDB/Q%20by%20Habla%20Computing#agenda" class="hash-link" aria-label="Direct link to Agenda" title="Direct link to Agenda">​</a></h2>
<ul>
<li>Welcome - <a href="https://hablapps.com/" target="_blank" rel="noopener noreferrer">Habla Computing</a></li>
<li><a href="https://www.linkedin.com/in/alexanderunterrainer" target="_blank" rel="noopener noreferrer">Alexander Unterrainer</a> (<a href="https://defconq.tech/" target="_blank" rel="noopener noreferrer">DefconQ</a> &amp; <a href="https://dataintellect.com/" target="_blank" rel="noopener noreferrer">Data Intellect</a>): How to Read, Understand, and Learn KDB/Q.</li>
<li><a href="https://www.linkedin.com/in/zan-buchanan-33b5a8148/" target="_blank" rel="noopener noreferrer">Zan Buchanan</a> (<a href="https://dataintellect.com/" target="_blank" rel="noopener noreferrer">Data Intellect</a>): Migrating kdb+ applications to the Cloud using Amazon FinSpace with Managed kdb Insights.</li>
<li><a href="https://www.linkedin.com/in/aoife-clarke-638188136/" target="_blank" rel="noopener noreferrer">Aoife Clarke</a> &amp; <a href="https://www.linkedin.com/in/kellyr13/" target="_blank" rel="noopener noreferrer">Rebecca Kelly</a> (<a href="https://www.inqdata.ai/" target="_blank" rel="noopener noreferrer">INQDATA</a>): INQDATA - Quant Data, Made Easy.</li>
</ul>
<iframe width="1120" height="630" src="https://www.youtube.com/embed/3MTDH5zjDJ0?si=H8CBNdJcsEIksHFv" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin"></iframe>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-speakers">The Speakers<a href="https://defconq.github.io/blog/DefconQ%20at%20Everything,%20Everywhere,%20All%20with%20KDB/Q%20by%20Habla%20Computing#the-speakers" class="hash-link" aria-label="Direct link to The Speakers" title="Direct link to The Speakers">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="zan-buchanan"><a href="https://www.linkedin.com/in/zan-buchanan-33b5a8148/" target="_blank" rel="noopener noreferrer">Zan Buchanan</a><a href="https://defconq.github.io/blog/DefconQ%20at%20Everything,%20Everywhere,%20All%20with%20KDB/Q%20by%20Habla%20Computing#zan-buchanan" class="hash-link" aria-label="Direct link to zan-buchanan" title="Direct link to zan-buchanan">​</a></h3>
<p>Zan Buchanan is a seasoned KDB+ engineer with 6 years of hands-on experience in designing, creating, and maintaining KDB+ systems. Currently part of a dynamic team at Data Intellect, she thrives on solving complex challenges using KDB+. In her presentation "Migrating kdb+ applications to the Cloud using Amazon FinSpace with Managed kdb Insights", Zan explained how Data Intellect seamlessly integrated their open-source kdb framework, TorQ, with Amazon FinSpace with Managed kdb Insights. In her talk, Zan explored the essential considerations, challenges, and benefits of this integration. Additionally, Zan shared her and Data Intellect's experience with cloud-based solutions for financial data management using Managed kdb Insights.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="aoife-clarke--rebecca-kelly"><a href="https://www.linkedin.com/in/aoife-clarke-638188136/" target="_blank" rel="noopener noreferrer">Aoife Clarke</a> &amp; <a href="https://www.linkedin.com/in/kellyr13/" target="_blank" rel="noopener noreferrer">Rebecca Kelly</a><a href="https://defconq.github.io/blog/DefconQ%20at%20Everything,%20Everywhere,%20All%20with%20KDB/Q%20by%20Habla%20Computing#aoife-clarke--rebecca-kelly" class="hash-link" aria-label="Direct link to aoife-clarke--rebecca-kelly" title="Direct link to aoife-clarke--rebecca-kelly">​</a></h3>
<p>Aoife Clarke, Head of Business Development at INQDATA is responsible for cultivating enduring partnerships that fuel sustainable client success. Her extensive experience in sales and partnership management allows her to forge strategic alliances built on mutual trust and respect. Aoife champions a client-centric approach, fostering long-term relationships with both partners and clients, ensuring aligned goals and consistent value delivery. Her dedication to client advocacy ensures that INQDATA not only delivers exceptional results today, but lays the foundation for continued success in the future.</p>
<p>Rebecca Kelly, Head of AI and Analytics at INQDATA, is an expert in high-performance software development, specializing in financial tick data analysis. With a background in mathematics and a master's degree in AI, Rebecca's expertise lies at the intersection of data science and technology. She was honoured as the Women in Tech New York Evangelist of the Year in 2020, recognizing her commitment to diversity and innovation in the industry. As a speaker, Rebecca shares insights into AI, analytics, and finance, inspiring audiences with her knowledge and experience.</p>
<p>Aoife and Rebecca introduced <a href="https://www.inqdata.ai/" target="_blank" rel="noopener noreferrer">INQDATA</a>, the latest innovative startup leveraging KX technology to provide MDaaS on the Cloud, showcasing the services, use cases and solutions INQDATA has to offer. Rebecca also provided an introduction to the timeseries analysis capabilities of KX Technology for the KDB/Q learners in the audience as well as some notes on architecting KX Technology in Cloud environments for the more experienced KX users.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="alexander-unterrainer"><a href="https://www.linkedin.com/in/alexanderunterrainer" target="_blank" rel="noopener noreferrer">Alexander Unterrainer</a><a href="https://defconq.github.io/blog/DefconQ%20at%20Everything,%20Everywhere,%20All%20with%20KDB/Q%20by%20Habla%20Computing#alexander-unterrainer" class="hash-link" aria-label="Direct link to alexander-unterrainer" title="Direct link to alexander-unterrainer">​</a></h3>
<p>As the founder of <a href="https://defconq.tech/" target="_blank" rel="noopener noreferrer">DefconQ</a>, a KDB/Q tech blog, my presentation provided valuable insights and strategies to demystify the challenges that learners often encounter when starting out with KDB/Q. Drawing inspiration from the comprehensive guide found in the corresponding blog <a href="https://www.defconq.tech/blog/How%20to%20Read,%20Understand%20and%20Learn%20KDB/Q%20code" target="_blank" rel="noopener noreferrer">post</a> at <a href="http://www.defconq.tech/" target="_blank" rel="noopener noreferrer">www.defconq.tech</a>, my presentation aimed to equip attendees with the essential tools to accelerate their proficiency in KDB/Q.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-companies">The Companies<a href="https://defconq.github.io/blog/DefconQ%20at%20Everything,%20Everywhere,%20All%20with%20KDB/Q%20by%20Habla%20Computing#the-companies" class="hash-link" aria-label="Direct link to The Companies" title="Direct link to The Companies">​</a></h2>
<p>Each speaker represented a leading company within their respective domain, drawing upon years, if not decades, of invaluable experience. With backgrounds spanning various investment banks, global financial market practitioners, and financial market technology consultancies, the collective expertise of the panelists formed an ideal lineup for this event.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="data-intellect---big-data-problems---meet-smart-data-solutions"><a href="https://dataintellect.com/" target="_blank" rel="noopener noreferrer">Data Intellect</a> - Big Data Problems - Meet Smart Data Solutions<a href="https://defconq.github.io/blog/DefconQ%20at%20Everything,%20Everywhere,%20All%20with%20KDB/Q%20by%20Habla%20Computing#data-intellect---big-data-problems---meet-smart-data-solutions" class="hash-link" aria-label="Direct link to data-intellect---big-data-problems---meet-smart-data-solutions" title="Direct link to data-intellect---big-data-problems---meet-smart-data-solutions">​</a></h3>
<p>At core, <a href="https://dataintellect.com/" target="_blank" rel="noopener noreferrer">Data Intellect</a> is a data and technology consultancy firm. Their key key area of expertise is financial and capital markets technology solutions however, the utility of these solutions allows Data Intellect to apply fintech data expertise to other industries such as smart energy and healthcare. This proprietary offering is complemented by a wealth of experience in data engineering, electronic trading systems, data capture applications, regulatory and compliance systems and middle and back office enterprise web solutions.</p>
<p>Some of the services provided by Data Intellect include, but are not limited to:</p>
<ul>
<li><strong>Time Series Data and KDB+</strong>: Data Intellect understands the challenges and opportunities associated with managing and analysing time series data. By applying those same skills, Data Intellect can build and optimize solutions using other technology stacks and in other sectors.</li>
<li><strong>Performance-based Software Enginerring</strong>: Data Intellect's performance software-engineering team helps design, build and tune modern software solutions using a blend of performant technologies coupled with leading-edge innovations, all backed by a wealth of industry-based experience and knowledge.</li>
<li><strong>Data Analytics &amp; Engineering</strong>: The team around Data Intellect is experienced in all aspects of interpreting, representing and visualizing different types of data across market-leading platforms and environments. They help clients maximize the potential of their data to enhance their decision making.</li>
<li><strong>Solution Delivery</strong>: From the early stages of planning and scheduling to the nuances of managing delivery timelines and achieving business outcomes, Data Intellect team will guide your project from conception to completion.</li>
<li><strong>KDB+ Training</strong>: Data Intellect provides tailored training delivered by their dedicated training team in a classroom or virtual setting via our online training portal complete with videos, assessments, puzzles and progress monitoring. Their training curriculum covers all their services from KDB+, C++ to Data Analytics and can be customised to your set-up.</li>
</ul>
<p>If you would like to have more information about Data Intellect, please visit their website <a href="https://dataintellect.com/" target="_blank" rel="noopener noreferrer">https://dataintellect.com</a></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="inqdata"><a href="https://www.inqdata.ai/" target="_blank" rel="noopener noreferrer">INQDATA</a><a href="https://defconq.github.io/blog/DefconQ%20at%20Everything,%20Everywhere,%20All%20with%20KDB/Q%20by%20Habla%20Computing#inqdata" class="hash-link" aria-label="Direct link to inqdata" title="Direct link to inqdata">​</a></h3>
<p>INQDATA simplifies market data management with a cloud based solution that handles all aspects of data ingestion, storage, preparation, and quality control. Our high-performance environment, powered by the worlds fastest timeseries database kdb+, gives financial institutions faster access to cleansed, real-time, and historical datasets on-demand. With INQDATA, experience seamless data integration without the infrastructure, support or maintenance hassle.</p>
<p>INQDATA provides continuous intelligently curated data ready to be used without limitations:</p>
<ul>
<li>Programmatically ingests and hydrates data from data providers's.</li>
<li>Implements sophisticated data quality functionality including codified cleansing rules and a rich, configurable user driven data tagging infrastructure.</li>
<li>Utilises kdb+ to provide a highly performant data storage distribution framework, dynamically scaling with user demand.</li>
<li>Provides a seamless API for data access in customer familiar tooling (Python, kdb+, R, etc…).</li>
<li>Developed to fully leverage the benefits of cloud architecture.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="defconq"><a href="https://defconq.tech/" target="_blank" rel="noopener noreferrer">DefconQ</a><a href="https://defconq.github.io/blog/DefconQ%20at%20Everything,%20Everywhere,%20All%20with%20KDB/Q%20by%20Habla%20Computing#defconq" class="hash-link" aria-label="Direct link to defconq" title="Direct link to defconq">​</a></h3>
<p>If you've stumbled upon this blog post, chances are you're already familiar with DefconQ. However, if this happens to be your first visit, allow me to offer a brief introduction. DefconQ is a technology blog dedicated to all things KDB/Q. Initially conceived to aid individuals in grasping the fundamentals of KDB/Q, my aim is to simplify the complexities of the Q programming language, along with essential KDB/Q language and architecture concepts. Encountering challenges during my own journey with KDB/Q and grappling with its steep learning curve, I founded DefconQ—a KDB/Q tech blog that I wished had existed when I first embarked on this endeavor.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-hosts---habla-computing">The Hosts - <a href="https://hablapps.com/" target="_blank" rel="noopener noreferrer">Habla Computing</a><a href="https://defconq.github.io/blog/DefconQ%20at%20Everything,%20Everywhere,%20All%20with%20KDB/Q%20by%20Habla%20Computing#the-hosts---habla-computing" class="hash-link" aria-label="Direct link to the-hosts---habla-computing" title="Direct link to the-hosts---habla-computing">​</a></h2>
<p>Finally, I'm excited to introduce the host of this fantastic event: <a href="https://hablapps.com/" target="_blank" rel="noopener noreferrer">Habla Computing</a>, your trusted companion in software architecture. Led by Juan, the founding partner, and Jesus, the VP of Research, Habla Computing drives digital transformation through functional programming and language-driven architectures. Among their array (pun intended) of services, Habla Computing offers:</p>
<ul>
<li>Architecture: You can count on their knowledge and experience in designing well-founded libraries, frameworks and applications, to grow your codebase from a solid start or re-engineer major components from solid principles</li>
<li>Consulting: Habla Computing helps companies to ensure that technology issues are kept under control during the whole project life-cycle.</li>
<li>Training: Condensed training in Scala and KDB/Q as well as tailor-maded courses for you or your development team.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://defconq.github.io/blog/DefconQ%20at%20Everything,%20Everywhere,%20All%20with%20KDB/Q%20by%20Habla%20Computing#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>In summary, the event was a resounding success. Although the turnout in Madrid could have been higher, we were delighted to be joined by over a hundred attendees online from various corners of the globe. The lower attendance in Madrid can be attributed to competing events and the allure of enjoying the event from the comfort of one's home. Personally, I thoroughly enjoyed meeting colleagues and peers and had a great time presenting. It's inspiring to witness the expansion of the KDB/Q community beyond traditional financial hubs like London or New York. Additionally, I'm pleased to see the growing presence of female developers, highlighted by the fact that I was the only male speaker at the event. I am eagerly looking forward to many more events like this and I am committed to attending, whether as a speaker or as an attendee. .</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="pictures">Pictures<a href="https://defconq.github.io/blog/DefconQ%20at%20Everything,%20Everywhere,%20All%20with%20KDB/Q%20by%20Habla%20Computing#pictures" class="hash-link" aria-label="Direct link to Pictures" title="Direct link to Pictures">​</a></h2>
<p><img decoding="async" loading="lazy" alt="Alex" src="https://defconq.github.io/assets/images/alex-91c07c249b972493c495999a4945b36a.webp" width="2000" height="1500" class="img_ev3q">
(Alexander presenting: How to get started with KDB/Q)</p>
<p><img decoding="async" loading="lazy" alt="Group" src="https://defconq.github.io/assets/images/group-90747da5f5991e06b0319a02f656180c.webp" width="1600" height="1200" class="img_ev3q">
(The speakers and the hosts. From left to right: Juan, Alexander, Zan, Aoife, Rebecca, Jesus)</p>]]></content:encoded>
            <category>kdb/q</category>
            <category>meetup</category>
            <category>kdb/q community</category>
            <category>DefconQ</category>
            <category>Habla Computing</category>
            <category>Data Intellect</category>
            <category>INQDATA</category>
            <category>Madrid</category>
        </item>
        <item>
            <title><![CDATA[The importance of code review - Four eyes see more than two]]></title>
            <link>https://DefconQ.github.io/blog/The importance of code review - Four eyes see more than two</link>
            <guid>https://DefconQ.github.io/blog/The importance of code review - Four eyes see more than two</guid>
            <pubDate>Sun, 17 Mar 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Over the weekend, I performed an update on the version of Docusaurus, the documentation framework utilized for my blog. A major update had been released some time ago, and due to my limited enthusiasm for front-end development, I had been postponing this task as long as possible. However, I finally decided to tackle it this weekend. After reviewing the recommended upgrade instructions provided in the official documentation, I prepared all necessary steps and then started the upgrade. Incrementally I went through all steps, running my blog locally on my laptop, ensuring that I wouldn't break anything. After completing the upgrade, I conducted one final verification to confirm that everything was running as expected in my browser. Satisfied with the results, I committed my changes and pushed them to the repository of my blog.]]></description>
            <content:encoded><![CDATA[<p>Over the weekend, I performed an update on the version of <a href="https://docusaurus.io/" target="_blank" rel="noopener noreferrer">Docusaurus</a>, the documentation framework utilized for my blog. A major update had been released some time ago, and due to my limited enthusiasm for front-end development, I had been postponing this task as long as possible. However, I finally decided to tackle it this weekend. After reviewing the recommended upgrade instructions provided in the official documentation, I prepared all necessary steps and then started the upgrade. Incrementally I went through all steps, running my blog locally on my laptop, ensuring that I wouldn't break anything. After completing the upgrade, I conducted one final verification to confirm that everything was running as expected in my browser. Satisfied with the results, I committed my changes and pushed them to the repository of my blog.</p>
<p>Now, all that remained was deploying the new version to <a href="https://pages.github.com/" target="_blank" rel="noopener noreferrer">Github Pages</a>. I executed the command <code>USE_SSH=true yarn deploy</code> as I typically do, pressed enter, and awaited the customary <code>[INFO]</code> messages. However, instead of the expected outcome, I was confronted with a bright, red error message.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[ERROR] Deployment of the build output failed.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Error: Running "git push" command failed. </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Does the GitHub user account you are using have push access to the repository?</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Ugh, of course. Something went wrong. However, my blog ran smoothly locally. I meticulously reviewed all my steps again, compared the <code>docusaurus.config.js</code> file with the new <code>docusaurus.config.ts</code> script I had to generate as part of the transition from JavaScript to TypeScript. Everything appeared to be in order. So why wasn't it functioning properly? The error message resembled an <code>SSH</code> issue, prompting me to double-check all my GIT configurations, and even recreate <code>SSH</code> keys, but to nothing.</p>
<p>Then, I proceeded with the typical routine every developer follows when encountering an issue: I searched for help on the internet, StackOverflow, Google search, blogs, forums, but unfortunately, none of the resources I explored offered a solution to my dilemma. Eventually, I stumbled upon a post suggesting that I delete the gh-pages branch of my repository — the branch responsible for hosting my blog online - and recreating it might resolve the issue. This sounded like a plausible remedy, so I proceeded accordingly. Regrettably, the solution did not rectify my problem; in fact, it exacerbated it. Deleting the branch responsible for hosting my blog rendered it inaccessible. While I may not boast millions of readers, the embarrassment of visitors encountering an offline blog was real.</p>
<p>I began to feel a tinge of concern and proceeded to review everything one more time, attempting a few additional troubleshooting steps, but nothing worked. At this point, my last resort was seeking assistance from a more seasoned developer. Fortunately, one of my close friends from university happened to be one of those exceptional talents - often referred to as <strong>10X developers</strong> in the tech industry. Regardless of the topic at hand, he possessed the ability to grasp concepts within minutes. Most technical challenges that had stumped me in the past seemed trivial to him. While the only programming language he wasn't well-versed in happened to be KDB/Q, I was fortunate that this particular issue did not pertain to that domain. Armed with a few screenshots and a concise explanation detailing my efforts and attempted solutions, I composed a message and eagerly awaited his response.</p>
<p>Knowing that he had recently welcomed his second child and that my trivial web development issues were understandably not a priority compared to his new responsibilities, I decided to take a leisurely stroll with my girlfriend and some friends. Several hours later, I received a response from him—a few links to potential solutions, all of which I had already explored. Following that, he inquired about my GIT repository URL, username, and a few other details. After confirming these details, I received a smiley face emoji in response. It was then pointed out to me that I had a typo in my GIT username—I had mistakenly written De<strong>c</strong>fonQ rather than De<strong>f</strong>conQ. With this embarrassing oversight corrected, I was finally able to deploy my blog once again, and it was back up and running as usual.</p>
<p>This experience, reminded me once again, about the significance of code review and why it should be an integral part of every software development life cycle. Which brings me to the main topic of this blog post: <strong>code review</strong>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-code-review-and-why-you-should-practice-it">What is code review and why you should practice it<a href="https://defconq.github.io/blog/The%20importance%20of%20code%20review%20-%20Four%20eyes%20see%20more%20than%20two#what-is-code-review-and-why-you-should-practice-it" class="hash-link" aria-label="Direct link to What is code review and why you should practice it" title="Direct link to What is code review and why you should practice it">​</a></h2>
<p>In the software development industry, code review is a fundamental practice that involves systematically examining code changes made by developers. It serves as a crucial quality assurance measure, ensuring that code meets standards, is free of bugs, and aligns with project requirements. Code review is important for several reasons:</p>
<ul>
<li>Firstly, it provides an opportunity for developers to have their code reviewed by their peers ensuring certain <strong>quality standards and controls</strong>, receiving valuable feedback on potential improvements or adherence to best practices.</li>
<li><strong>Sharing and transferring knowledge</strong>: Code reviews are a great opportunity to share or gain expertise. The depth of this knowledge transfer varies widely, however, there will always be some level of information exchange.</li>
<li><strong>Spreading ownership</strong>: Code reviews  allow developers to review code written by others, facilitating learning and deeper understanding of the system being developed. This will foster mutual code ownership. It's common for a developer to become solely responsible for a specific part of the codebase due to their familiarity with it. While this might offer short-term advantages, it often leads to long-term drawbacks. When ownership of the code is shared among team members, it promotes motivation and autonomy within the team.</li>
<li>Moreover, code review encourages <strong>collaboration</strong> within teams, as developers can provide constructive feedback to one another and engage in discussions about software development practices.</li>
<li><strong>Unify development styles</strong>: Each developer has their unique approaches and preferences when it comes to implementing software. Code reviews play a crucial role in bridging the gap between individual development styles, thereby promoting a more unified codebase. This unification occurs through both high-level discussions concerning architecture and software design, as well as micro-level continuous integration checks like enforcing coding style consistency.</li>
<li>For junior developers, code review offers a unique chance to benefit from the experience and expertise of more seasoned developers.</li>
</ul>
<p>For a comprehensive guide on code reviews and best practices, make sure to read the excellent article <a href="https://www.swarmia.com/blog/a-complete-guide-to-code-reviews/" target="_blank" rel="noopener noreferrer">"A Complete Guide to Code Review"</a> by Kimmo Brunfeldt.</p>
<p>Ultimately, no code should be deployed to a production environment without undergoing a formal code review and obtaining the approval of at least two other developers, a best practice that development teams should adhere to. <strong>DefconQ</strong> on the other hand, will simply postpone future front end updates or outsource it to an experts. Volunteers are more than welcome.</p>
<p><strong>Resources</strong>:
<a href="https://www.swarmia.com/blog/a-complete-guide-to-code-reviews/" target="_blank" rel="noopener noreferrer">A complete guide to code reviews</a> by Kimmo Brunfeldt</p>]]></content:encoded>
            <category>kdb/q</category>
            <category>code review</category>
            <category>good practice</category>
            <category>software development</category>
            <category>programming</category>
        </item>
        <item>
            <title><![CDATA[Advent of Code -  Daily Coding Practice]]></title>
            <link>https://DefconQ.github.io/blog/Advent of Code -  Daily Coding Practice</link>
            <guid>https://DefconQ.github.io/blog/Advent of Code -  Daily Coding Practice</guid>
            <pubDate>Thu, 30 Nov 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[It's this time of the year again: it's getting cold and dark outside, the days are getting shorter, Chris Rea is driving home, Santa is coming coming to town and all Mariah Carey wants for Christmas is you. As business requests hopefully slow down, and we enter code freeze, it's a good time to reflect on the past year and spend some time on sharpening our brains and KDB/Q coding skills. And what could possibly be better for that than tackling the daily coding challenges presented by Advent of Code?]]></description>
            <content:encoded><![CDATA[<p>It's this time of the year again: it's getting cold and dark outside, the days are getting shorter, Chris Rea is driving home, Santa is coming coming to town and all Mariah Carey wants for Christmas is you. As business requests hopefully slow down, and we enter code freeze, it's a good time to reflect on the past year and spend some time on sharpening our brains and KDB/Q coding skills. And what could possibly be better for that than tackling the daily coding challenges presented by <a href="https://adventofcode.com/" target="_blank" rel="noopener noreferrer">Advent of Code</a>?</p>
<p>Advent of Code is a daily coding challenge presented in the form of an advent calendar, running from December 1st to Christmas Day, December 25th. Initially created in 2015 by <a href="https://twitter.com/ericwastl" target="_blank" rel="noopener noreferrer">Eric Wastl</a>, it has become widely popular among programmers across various programming languages.</p>
<p>The challenges are in form of small programming puzzles designed for diverse skill sets and levels that can be solved in any programming language you like. Participants use these puzzles for interview preparation, company training, university coursework, practice problems, engaging in speed contests, or challenging one another. You also don't need a computer science background in order to participate; a basic understanding of programming and some problem-solving skills are sufficient to make progress. Moreover, a high-end computer is not a requirement; each problem is designed to have a solution that runs within 15 seconds on ten-year-old hardware.</p>
<p>Each day at midnight EST, a new problem is revealed, comprising two small problems that increase in difficulty as you advance through December. Solving each part of the problem correctly earns you one star. For those of you who love a competition, there are leaderboards, where earning the first star is worth 100 points, the second is 99, and so forth, down to 1 point for 100th place.</p>
<p>While KDB/Q may not always be the optimal programming language for solving all puzzles, it serves as an excellent platform to sharpen your KDB/Q skills and cultivate creative problem-solving abilities. It provides an opportunity to tackle challenges that might not be encountered in your daily work routine. If you ever get stuck in one of the problems or don't feel experienced enough, don't lose hope. There are plenty of developers who share their solutions on LinkedIn or <a href="https://community.kx.com/" target="_blank" rel="noopener noreferrer">KX Community</a> and you can learn a lot by looking at their solutions.</p>
<p>Get your keyboards ready, Advent of Code starts tomorrow! Join the fun <a href="https://adventofcode.com/" target="_blank" rel="noopener noreferrer">here</a></p>
<p>Happy Coding!</p>]]></content:encoded>
            <category>kdb/q</category>
            <category>AOC</category>
            <category>Challenges</category>
            <category>Practice</category>
        </item>
        <item>
            <title><![CDATA[Where to find help]]></title>
            <link>https://DefconQ.github.io/blog/Where to find help</link>
            <guid>https://DefconQ.github.io/blog/Where to find help</guid>
            <pubDate>Mon, 18 Sep 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[So, you've delved into 'Q for Mortals' and a few other fundamental references I shared with you in my previous post, immersed yourself in code, tutorials, and successfully tackled your initial tasks. However, as you progress, you inevitably encounter that frustrating error. You try the different approaches you normally attempt when running into an error but you've exhausted every strategy, set breakpoints, meticulously stepped through the code, and yet, you can't figure out what's wrong with your code. Maybe you've encountered a challenge you are unsure how to tackle or perhaps you simply want to ensure your solution is optimal, whether in terms of execution time or memory usage. In any of these scenarios, the need for assistance arises, and in this blog post, we'll look at the different options for help with your KDB/Q challenges.]]></description>
            <content:encoded><![CDATA[<p>So, you've delved into 'Q for Mortals' and a few other fundamental references I shared with you in my previous <a href="https://defconq.tech/blog/Go-To%20KDB/Q%20Learning%20Resources" target="_blank" rel="noopener noreferrer">post</a>, immersed yourself in code, tutorials, and successfully tackled your initial tasks. However, as you progress, you inevitably encounter that frustrating error. You try the different approaches you normally attempt when running into an error but you've exhausted every strategy, set breakpoints, meticulously stepped through the code, and yet, you can't figure out what's wrong with your code. Maybe you've encountered a challenge you are unsure how to tackle or perhaps you simply want to ensure your solution is optimal, whether in terms of execution time or memory usage. In any of these scenarios, the need for assistance arises, and in this blog post, we'll look at the different options for help with your KDB/Q challenges.</p>
<p>In the early days of KDB/Q (technically it was K back then but lets keep the history of KDB/Q for another blog post), comprehensive documentation and online resources were scarce. For those utilizing KDB/Q in a professional capacity, one option was to register with your work email address on a listbox/topicbox email distribution list. Here, you could post your questions or inquiries, relying on the hope that experienced and knowledgeable developers within the community would offer responses. Nevertheless, if you weren't using KDB/Q in a professional context or attempted to learn it independently, there were limited documentation and resources at your disposal.</p>
<p>Over time, the KDB/Q community expanded, leading to more comprehensive documentation and increased resources for seeking assistance. While KDB/Q doesn't enjoy the same level of all-pervasive online information as Python, where a simple Google search for 'How to do XYZ in Python' yields countless results, you can still depend on the two sources mentioned below to access support."</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="kx-community">KX Community<a href="https://defconq.github.io/blog/Where%20to%20find%20help#kx-community" class="hash-link" aria-label="Direct link to KX Community" title="Direct link to KX Community">​</a></h2>
<p>In September 2021, KX launched the KX Community, an online forum designed to serve as a centralized hub for all your KDB/Q inquiries. Within this forum, queries and issues are categorized into various discussion topics, including KDB/Q, KX Solutions or Products, KX Academy (which I previously discussed <a href="https://defconq.tech/blog/Go-To%20KDB/Q%20Learning%20Resources#kx-academy" target="_blank" rel="noopener noreferrer">here</a>), KX Insight, or their latest offering, KDB.AI.</p>
<p>The forum is open to anyone seeking answers related to KDB/Q, offering a user-friendly interface. It enjoys active participation from KDB/Q developers within the industry, and, notably, it is closely monitored by seasoned developers from KX. These KX experts serve as forum administrators and actively engage by responding to inquiries and questions.</p>
<p>In my opinion, the KX Community serves as an excellent resource for assistance when you encounter challenges. Additionally, it provides a valuable platform for acquiring knowledge about prevalent issues and their corresponding resolutions. Whether you're striving to comprehend the intricacies of KDB/Q, grappling with an architectural design query, or seeking insights into any of the KX products, this forum proves highly beneficial.</p>
<p>If you haven't signed up yet, go and register yourself <a href="https://community.kx.com/" target="_blank" rel="noopener noreferrer">here</a></p>
<p><img decoding="async" loading="lazy" alt="KX Community" src="https://defconq.github.io/assets/images/KXCommunity1-6568cec424c81a7b71bdec9196332c30.png" width="1412" height="990" class="img_ev3q">
<img decoding="async" loading="lazy" alt="KX Community" src="https://defconq.github.io/assets/images/KXCommunity2-be3e7a89de0514ad917d76eac5ec4837.png" width="1371" height="1081" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="stackoverflow">Stackoverflow<a href="https://defconq.github.io/blog/Where%20to%20find%20help#stackoverflow" class="hash-link" aria-label="Direct link to Stackoverflow" title="Direct link to Stackoverflow">​</a></h2>
<p>If you're a developer, you're likely familiar with StackOverflow. However, for those who may not have encountered StackOverflow before, here's an analogy: StackOverflow is to programmers what Google is to non-programmers - an essential website for finding answers to all your questions.</p>
<p>As of the time of this writing, StackOverflow boasts a vast repository of 23,908,328 questions spanning the realms of programming, software development, and similar domains. Out of these 23 Million questions, a mere 2,269 questions are related to KDB/Q. Yes, you read that right, meaning that only <strong>0.0095%</strong> of all questions on Stackoverflow are related to KDB/Q. That's pretty low if you ask me. To provide a comparison, consider Python, one of the widely-used mainstream programming languages, which boasts a staggering 2.1 million questions, equivalent to approximately 9%.</p>
<p>The relatively limited number of KDB/Q questions on StackOverflow is combined with a lack of a robust categorization. While I consider StackOverflow a valuable platform for posting questions, I must also acknowledge that it may not offer the same level of structured organization as the KX Community.  However, it's worth mentioning that there is an active participation from experienced developers who consistently respond to KDB/Q queries, and I've personally come across valuable solutions and code snippets within the StackOverflow KDB/Q section as well.</p>
<p>I consider Stack Overflow to be a valuable supplement to your repertoire of resources for addressing KDB/Q-related queries.</p>
<p><img decoding="async" loading="lazy" alt="Stackoverflow" src="https://defconq.github.io/assets/images/Stackoverflow-ea88f4c118588bdb814af2c0b911414d.png" width="1446" height="1065" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="mentorship">Mentorship<a href="https://defconq.github.io/blog/Where%20to%20find%20help#mentorship" class="hash-link" aria-label="Direct link to Mentorship" title="Direct link to Mentorship">​</a></h2>
<p>Another approach to seek solutions for your KDB/Q queries is to explore the possibility of finding a mentor. Whether you discover a mentor within your current team or organization, or seek one externally, I recommend initiating a mentor-mentee connection with an experienced KDB/Q developer. While some highly skilled KDB/Q developers may appear intimidating at first, you may be pleasantly surprised by the willingness of most of them to offer assistance and guidance.</p>
<p>To summarize, the combination of KX Community and StackOverflow, along with the option of connecting with a mentor or a knowledgeable colleague, provides a comprehensive support system to address any KDB/Q-related challenges you may encounter.</p>
<p>Happy Coding!</p>]]></content:encoded>
            <category>kdb/q</category>
            <category>Help</category>
            <category>StackOverFlow</category>
            <category>KX Community</category>
            <category>Mentorship</category>
        </item>
        <item>
            <title><![CDATA[How to Read, Understand and Learn KDB/Q code]]></title>
            <link>https://DefconQ.github.io/blog/How to Read, Understand and Learn KDB/Q code</link>
            <guid>https://DefconQ.github.io/blog/How to Read, Understand and Learn KDB/Q code</guid>
            <pubDate>Mon, 11 Sep 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[In my previous blog post, I shared my favourite Go-To KDB/Q Learning Resources to help you to get started. However, as you dive deeper into the KDB/Q programming language and you begin to read and review other's code you might experience a slight sense of overwhelm. Two main characteristics of KDB/Q, namely its tersness and and its left-of-right evaluation order (KDB/Q expressions are evaluated left-of-right which equates to expressions are evaluated right-to-left), can pose initial challenges for new KDB/Q developers. It's important to overcome these hurdles and become familiar with these features as you progress.]]></description>
            <content:encoded><![CDATA[<p>In my previous blog post, I shared my favourite <a href="https://defconq.tech/blog/Go-To%20KDB/Q%20Learning%20Resources" target="_blank" rel="noopener noreferrer">Go-To KDB/Q Learning Resources</a> to help you to get started. However, as you dive deeper into the KDB/Q programming language and you begin to read and review other's code you might experience a slight sense of overwhelm. Two main characteristics of KDB/Q, namely its tersness and and its <a href="https://code.kx.com/q4m3/4_Operators/#412-left-of-right-evaluation" target="_blank" rel="noopener noreferrer">left-of-right</a> evaluation order (KDB/Q expressions are evaluated left-<strong>of</strong>-right which equates to expressions are evaluated right-<strong>to</strong>-left), can pose initial challenges for new KDB/Q developers. It's important to overcome these hurdles and become familiar with these features as you progress.</p>
<p>When you start looking at other's KDB/Q code for the first time, it can be akin to a five-year-old attempting to independently assemnle the gigantic Lego Millenium Falcon immediately after learning how to connect just two Lego pieces. The experience can be overwhelming, leaving you unsure where to start. THe image below serves as an illustration of the described sensation.</p>
<p><img decoding="async" loading="lazy" alt="Lego Millenium Falcon" src="https://defconq.github.io/assets/images/lego_millenium_falcon-cdf46798eb4ee41eb41b725b9e689e5f.webp" width="1200" height="900" class="img_ev3q"></p>
<p>When you assess your current knowledge in relation to the task at hand, you might perceive it as inadequate and insufficient.</p>
<p><img decoding="async" loading="lazy" alt="Lego scale" src="https://defconq.github.io/assets/images/lego_map-2d097343c2f8f40d5cc116631b0ed3af.png" width="1200" height="675" class="img_ev3q"></p>
<p>Nevertheless, if we deconstruct the code into smaller components and methodically examine it step by step, expression by expression, we often come to realize that the code we're grappling with may not always be as daunting as initially presumed.</p>
<p><img decoding="async" loading="lazy" alt="Lego Block" src="https://defconq.github.io/assets/images/lego_block-10f57693d0c0e81bb8b38c8eb14a34b7.jpg" width="1594" height="1133" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="dividing-code-into-smaller-components">Dividing code into smaller components<a href="https://defconq.github.io/blog/How%20to%20Read,%20Understand%20and%20Learn%20KDB/Q%20code#dividing-code-into-smaller-components" class="hash-link" aria-label="Direct link to Dividing code into smaller components" title="Direct link to Dividing code into smaller components">​</a></h2>
<p>That's precisely the method we'll employ in this blog post. We'll dissect a line of KDB/Q code that could appear complex initially - maybe we won't even grasp its purpose at first glance. However, by breaking it down into small, discrete expressions and evaluating them sequentially, we'll unravel its underlying logic and functionality.</p>
<p>We are accomplishing this by examining a fascinating pattern introduced by Stephen Taylor, the KX Librarian, as outlined in this <a href="https://community.kx.com/t5/Community-Blogs/Meet-the-Zen-monks/ba-p/11604" target="_blank" rel="noopener noreferrer">post</a>. Take a glance at the code provided below and take a moment to make an educated guess about its purpose.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">q){x{y _ x}/1 -1*(1 reverse\" "&lt;&gt;x)?'1b}"   Trim the spaces.  "</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Solution here </summary><div><div class="collapsibleContent_i85q"><p></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="did-you-guess-right-the-anonymous-function-or-lambda-trims-all-the-spaces-before-and-after-the-text-the-1-functioninput-pattern-applies-a-function-and-not-applies-it">Did you guess right? The anonymous function (or lambda) trims all the spaces before and after the text. The <code>1 function\input</code> pattern applies a function and not applies it<a href="https://defconq.github.io/blog/How%20to%20Read,%20Understand%20and%20Learn%20KDB/Q%20code#did-you-guess-right-the-anonymous-function-or-lambda-trims-all-the-spaces-before-and-after-the-text-the-1-functioninput-pattern-applies-a-function-and-not-applies-it" class="hash-link" aria-label="Direct link to did-you-guess-right-the-anonymous-function-or-lambda-trims-all-the-spaces-before-and-after-the-text-the-1-functioninput-pattern-applies-a-function-and-not-applies-it" title="Direct link to did-you-guess-right-the-anonymous-function-or-lambda-trims-all-the-spaces-before-and-after-the-text-the-1-functioninput-pattern-applies-a-function-and-not-applies-it">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">q){x{y _ x}/1 -1*(1 reverse\" "&lt;&gt;x)?'1b}"   Trim the spaces.  "</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">"Trim the spaces."</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p></p></div></div></details>
<p>It's quite surprising how much can be achieved with such little code,isn't it? Now, let's break it down methodically, taking each component into careful consideration.</p>
<div class="theme-admonition theme-admonition-caution admonition_xJq3 alert alert--warning"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>caution</div><div class="admonitionContent_BuS1"><p>Remeber, KDB/Q is evaluated left-<strong>of</strong>-right, meaning we have to read our code right-<strong>to</strong>-left.</p></div></div>
<p>The first code section we examine is the following.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">(expression)?'1b</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The '?' operator, along with the '!' operator, arguably possesses the greatest number of overloads among KDB/Q operators. In this specific context, the '?' operator functions as a <a href="https://code.kx.com/q/ref/find/" target="_blank" rel="noopener noreferrer"><strong>'find'</strong></a> operation.</p>
<p>Let's look at an example. Suppose we have a list of integers and we would like to find the index at which that element occurs. We can do this the following way:</p>
<div class="theme-admonition theme-admonition-caution admonition_xJq3 alert alert--warning"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>caution</div><div class="admonitionContent_BuS1"><p>Indexing starts at 0 in KDB/Q</p></div></div>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">q)10 5 4 3 2?3  // 3 occurs at the 4th position in the list</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">3</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="theme-admonition theme-admonition-danger admonition_xJq3 alert alert--danger"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"></path></svg></span>danger</div><div class="admonitionContent_BuS1"><p><code>?</code> find only returns the first index of the elemnt you are searching for</p></div></div>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">q)10 5 4 3 2 3?3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">q)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>It's strongly advised to have the <a href="https://code.kx.com/q/ref/" target="_blank" rel="noopener noreferrer">KX reference card</a> readily available, particularly when you're starting your KDB/Q journey and are still becoming acquainted with various operators, their overloads, and functionalities.</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-power-of-iterators-and-their-applications">The power of Iterators and their applications<a href="https://defconq.github.io/blog/How%20to%20Read,%20Understand%20and%20Learn%20KDB/Q%20code#the-power-of-iterators-and-their-applications" class="hash-link" aria-label="Direct link to The power of Iterators and their applications" title="Direct link to The power of Iterators and their applications">​</a></h2>
<p>The <code>'</code> operator exemplifies another unique concept within KDB/Q, which is the concept of <a href="https://code.kx.com/q/basics/iteration/" target="_blank" rel="noopener noreferrer">iterators</a>. Iterators can be described as functions that take values as arguments and generate new functions that apply those values repetitively. In this specific instance, the <code>'</code> operator signifies <a href="https://code.kx.com/q/ref/maps/#each" target="_blank" rel="noopener noreferrer">"each"</a> and applies a value item-by-item to a dictionary, list, or conforming combinations of lists and dictionaries.</p>
<p>Allow me to demonstrate this behavior with a straightforward example. Imagine we have a list of strings and aim to determine the length of each string:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">q)list:("Hello";"World";"lorem";"ipsum")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">q)count list</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">4</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>As you can see, <code>count list</code> returns the length of the list of strings rather than the length of each individual string itself. We therefore have to use the <code>each</code> operator to achieve the desired result.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">q)count each list</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">5 5 5 5</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In the above example we make use of the mnemonic keyword <strong>each</strong> which can be used to apply a unary value without having to use parentheses or brackets. We could have achieved the same result by doing the following</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p><code>count</code> is a unary value</p></div></div>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">q)(count')list</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">5 5 5 5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">q)count'[list]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">5 5 5 5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">q)count@'list</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">5 5 5 5</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>When examining the entire code snippet together, we can see that <code>(expression)?'1b</code> will search (and find) the index of the first occurence of 1b in <strong>each</strong> element of the list denoted by expression. Sounds complicated? Allow me to provide a demonstration for better clarity:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">q)(000101010111b;0101010101b)?'1b</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">3 1</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Our next task is to determine the actual result of the expression enclosed within parentheses.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">(1 reverse\" "&lt;&gt;x)?'1b</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>To do so, we solely focus on the expression within parentheses and ignore the second part. We can easily do this, we already know what it does</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">1 reverse\" "&lt;&gt;x</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This expression can be further divided into three components. The keyword <code>reverse</code>, the component <code>" "&lt;&gt;x</code> and the <code>\</code>, another KDB/Q <a href="https://code.kx.com/q/basics/iteration/" target="_blank" rel="noopener noreferrer"><strong>iterator</strong></a>.</p>
<p>Let's examine each of these components separately, starting, in good KDB/Q fashion with the most right one:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">q)" "&lt;&gt;"Hello World"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">11111011111b</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The code we executed produces a boolean mask. It compares each element of the string to the empty string " " and yields "<strong>true</strong>" for elements that differ and "<strong>false</strong>" for those that are the same. Consequently, we can infer that the <code>&lt;&gt;</code> operator assesses inequality. If our aim is to do the opposite and examine equality, we can simply apply the equality operator, which is represented by <code>=</code>.</p>
<p>This conveys another, valuable lesson in KDB/Q, specifically: <em>"A fundamental feature of atomic functions is that their action extends automatically to the items in a list"</em> as explained in <a href="https://code.kx.com/q4m3/4_Operators/#403-extension-of-atomic-functions" target="_blank" rel="noopener noreferrer">Chapter 4: Operators</a> of "Q for Mortals".</p>
<p>Don't take my word for it, witness it for yourself:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">q)2 3 4+5 6 7</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">7 9 11</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="theme-admonition theme-admonition-danger admonition_xJq3 alert alert--danger"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"></path></svg></span>danger</div><div class="admonitionContent_BuS1"><p>Of course, if you want to combine two lists they must be of the same length, otherwise KDB/Q will throw an error</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">q)2 3 4+5 6</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'length</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  [0]  2 3 4+5 6</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ^</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></div></div>
<p>Prior to delving into the <code>1 function\input</code> pattern, let's explore the functionality of the keyword <code>reverse</code>.</p>
<p>As you probably can guess, the keyword <a href="https://code.kx.com/q/ref/reverse/" target="_blank" rel="noopener noreferrer"><code>reverse</code></a> reverses the order of items of a list or dictionary.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">q)reverse "Hello World"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">"dlroW olleH"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">q)reverse 0 1 2 3 4 5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">5 4 3 2 1 0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The string <code>Hello World</code> becomes <code>dlroW olleH</code> and the list <code>0 1 2 3 4 5</code> becomes <code>5 4 3 2 1 0</code></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="exploring-the-versatility-of-scan-and-over">Exploring the versatility of Scan and Over<a href="https://defconq.github.io/blog/How%20to%20Read,%20Understand%20and%20Learn%20KDB/Q%20code#exploring-the-versatility-of-scan-and-over" class="hash-link" aria-label="Direct link to Exploring the versatility of Scan and Over" title="Direct link to Exploring the versatility of Scan and Over">​</a></h2>
<p>Now, it's time to address the most intricate part of this code snippet - the <code>1 function\input</code> pattern. The <code>\</code> operator is referred to as "Scan". To clarify the "Scan" iterator, we must first explain the "Over" iterator. <em>"The <a href="https://code.kx.com/q4m3/6_Functions/#676-over-for-accumulation" target="_blank" rel="noopener noreferrer">Over</a> iterator <code>/</code> is a higher-order function that provides the principal mechanism for recursion in q. In its simplest form it modifies a binary function to accumulate results over a list"</em>.</p>
<p><em>"The <a href="https://code.kx.com/q4m3/6_Functions/#678-scan" target="_blank" rel="noopener noreferrer">Scan</a> iterator <code>\</code> is a higher-order function that behaves just like <code>/</code> except that it returns all the intermediate accumulations instead of just the final one".</em></p>
<p>Now let's illustrate this with an example, a single line of code carries the weight of a thousand words.</p>
<p>First, let's look at <code>Over</code></p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">q)(+/)1 2 3 4 5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">15</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Can you perceive what "Over" does? It applies the binary function <code>+</code> to the list <code>1 2 3 4 5</code> and accumulates the results over the list, effectively returning the sum of all elements <code>1 2 3 4 5</code>.</p>
<p>Now, let's look at <code>Scan</code></p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">q)(+\)1 2 3 4 5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1 3 6 10 15</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Much like Over, Scan also yields the cumulative sum of all elements in the list, however, with one key difference: Scan returns all intermediate steps, returning the rolling sum, rather than just the sum of all elements.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>There exist two keywords for the two scenarios described above: the keyword <strong>sum</strong> corresponds to <code>(+/)</code> and the keyword <strong>sums</strong> corresponds to <code>(+\)</code>.</p></div></div>
<p>Here's the evidence</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">q)sum 1 2 3 4 5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">15</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">q)sums 1 2 3 4 5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1 3 6 10 15</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Because of KDB/Q's concise nature, operators have numerous overloads. This principle extends to the iterators Over and Scan. Depending on the valence (the number of inputs to a function) associated with Over or Scan, these iterators exhibit varying behavior. A comprehensive list of their behaviors can be found <a href="https://code.kx.com/q/ref/iterators/" target="_blank" rel="noopener noreferrer">here</a></p>
<p>In the context of the <code>1 function\input</code> pattern, Scan functions similarly to what you might recognize as a "Do-Loop" in conventional programming languages. It's important to note that Scan will also produce the input as the initial result when applied to a unary function.</p>
<p>The following example should illustrate this behavior:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">q)5 enlist\1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">,1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">,,1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">,,,1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">,,,,1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">,,,,,1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">q)5(`f;)\1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(`f;1)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(`f;(`f;1))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(`f;(`f;(`f;1)))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(`f;(`f;(`f;(`f;1))))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(`f;(`f;(`f;(`f;(`f;1)))))</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In the initial example, you'll observe that the number 1 is enlisted five times, whereas in the second example, a nested list is generated with a depth of five levels. Both examples begin by displaying the input as the initial step.</p>
<p>Now, let's try to put things together and see what we get. Let's look at the following code snippet:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">q)1 reverse\"Hello"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">"Hello"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">"olleH"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>As we explained earlier, the Scan will display the input first, and then repeat the function, reverse in this case, n-times, where n is 1, resulting into a list of strings consisting of "Hello" the original string, and its reverse "olleH"</p>
<p>Let's attempt to apply this concept to the originally provided string:  "     Trim spaces     ", and apply the whole expression within parentheses</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">q)1 reverse\" "&lt;&gt;"   Trim the spaces.  "</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">000111101110111111100b</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">001111111011101111000b</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Apologies if that was too swift. Let's break it down step by step.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">q)" "&lt;&gt;"   Trim the spaces.  "</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">000111101110111111100b</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The initial segment of the expression involves a character-by-character comparison between the given input string and an empty string. It yields a boolean mask with <code>0b</code> where the elements differ and <code>1b</code> where they match. This boolean mask is subsequently utilized as input for the <code>1 function\pattern.</code> In this context, Scan begins by presenting the input, followed by applying the <code>reverse</code> function precisely once.</p>
<p>Let's combine that with the initial expression we examined, <code>?'1b</code> find each 1b:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">q)(1 reverse\" "&lt;&gt;"   Trim the spaces.  ")?'1b</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">3 2</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Upon inspecting the two boolean masks, it becomes evident that the initial <code>1b</code> occurrence appears at index 3 in the first mask and index 2 in the second mask, respectively.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">000111101110111111100b   // first occurrence of 1b is at index 3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">001111111011101111000b   // first occurrence of 1b is at index 2</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The next part of the code is straightforward, we multiply 1 -1 with 3 2, REMEMBER: operators are atomic, meaning their functionality extends automatically to the items in a list. This yields the following result</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">q)1 -1*(1 reverse\" "&lt;&gt;"   Trim the spaces.  ")?'1b</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">3 -2</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Next, we encounter another lambda function combined with an iterator, but in this case, it's Over.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">x{y _ x}/1 -1*(1 reverse\" "&lt;&gt;x)?'1b</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="other-kdbq-operators">Other KDB/Q operators<a href="https://defconq.github.io/blog/How%20to%20Read,%20Understand%20and%20Learn%20KDB/Q%20code#other-kdbq-operators" class="hash-link" aria-label="Direct link to Other KDB/Q operators" title="Direct link to Other KDB/Q operators">​</a></h2>
<p>Let's take a closer look at the functionality of the operator <code>_</code> inside the lambda does: <code>_</code> also called <a href="https://code.kx.com/q/ref/drop/" target="_blank" rel="noopener noreferrer">Drop</a>, drops items from a list, entries from a dictionary or columns from a table</p>
<div class="theme-admonition theme-admonition-caution admonition_xJq3 alert alert--warning"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>caution</div><div class="admonitionContent_BuS1"><p>Let's avoid any confusion between <strong><a href="https://code.kx.com/q/ref/drop/" target="_blank" rel="noopener noreferrer">drop</a></strong> and <strong><a href="https://code.kx.com/q/ref/cut/" target="_blank" rel="noopener noreferrer">cut</a></strong> even though they are the same operator but function differently.</p></div></div>
<p>From the KX refernce card:</p>
<p>Drop leading or trailing items</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">x _ y		_[x;y]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Where</p>
<ul>
<li>x is an int atom</li>
<li>y a list or dictionary</li>
</ul>
<p>returns y without the first or last x items.</p>
<p>Let's look at an example:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">q)5_0 1 2 3 4 5 6 7 8      /drop the first 5 items</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">5 6 7 8</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">q)-5_0 1 2 3 4 5 6 7 8     /drop the last 5 items</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0 1 2 3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">q)1 _ `a`b`c!1 2 3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">b| 2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">c| 3</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Now, the remaining task is to integrate our understanding of "drop" with our knowledge of "Over." In this scenario, "Over" is applied to a binary function where "drop" takes two parameters, <code>x</code> and <code>y.</code> Upon closer examination of the code, it's apparent that within the lambda, we apply <code>y _ x</code> rather than <code>x _ y.</code> However, you might be wondering about the additional <code>x</code> preceding the lambda. This variation arises from the different notation forms offered in KDB/Q. Functions can be expressed in either prefix or infix notation.</p>
<p>Application of a binary function <code>f</code> on arguments <code>x</code> and <code>y</code> is written <code>f[x;y]</code> in <strong>prefix</strong> or <code>x f y</code> in <strong>infix</strong>. Note: <strong>infix</strong> notation only works for Q functions, while functions defined by yourself can only be used in <strong>prefix</strong> notation.</p>
<p>You can find the different applications of iterators and their valence <a href="https://code.kx.com/q/ref/accumulators/" target="_blank" rel="noopener noreferrer">here</a></p>
<p>Over applied to a binary function can be written either</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">x v2/y</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">or</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">v2/[x;y]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>meaning that the <code>x</code> we observe in front of the lambda function <code>{y _ x}/</code> is the first parameter to the function.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="putting-it-all-together">Putting it all together<a href="https://defconq.github.io/blog/How%20to%20Read,%20Understand%20and%20Learn%20KDB/Q%20code#putting-it-all-together" class="hash-link" aria-label="Direct link to Putting it all together" title="Direct link to Putting it all together">​</a></h2>
<p>If we take a closer look at the entire code, we'll notice that the input to the primary lambda function is the string we intend to trim. Additionally, the <code>y</code> parameter in the lambda corresponds to the two indexes, 3 and -2. If you recall from the initial part of the code, when we reverse the boolean mask, we obtain the first index of a "true" flag in the "original" boolean mask and the first index of a "true' flag in the "reversed" boolean mask. However, let's pause for a moment and consider this. The first index of a "true" flag in the "reversed" boolean mask is, in fact, the same as the first index of the "original" boolean mask when we count from the opposite end of the boolean mask (namely from the back/end).</p>
<p>Haven't we recently discovered that "drop" used in conjunction with a negative number will discard the last "n" elements? Indeed, we have! So, the remaining piece of the puzzle is to grasp how "Over" is applied to this function. Yet, we're already acquainted with this concept, as "Over" serves as a higher-order function that facilitates recursion in q. In its basic form, it adapts a binary function to accumulate results over a list.</p>
<p>Let's take a peek. To simplify matters, I'll display some of the intermediate outcomes rather than the entire expression
.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">q)"   Trim the spaces.  "{y _ x}/3 -2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">"Trim the spaces."</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>A helpful technique for debugging and comprehending the actions of "Over" is to initially employ "Scan" and examine all the interim outcomes. This can provide valuable insights into the ultimate result.</p></div></div>
<p>Let's give this technique a try. You can observe how "Scan" begins by removing the first three (empty) characters from the string and subsequently discards the last two (empty) characters, resulting in the desired outcome: a string that has been trimmed of all leading and trailing spaces.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">q)"   Trim the spaces.  "{y _ x}\3 -2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">"Trim the spaces.  "</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">"Trim the spaces."</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And there you have it! As a final step, let's consolidate all the code and execute it one more time, appreciating how elegantly everything aligns.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">q){x{y _ x}/1 -1*(1 reverse\" "&lt;&gt;x)?'1b}"   Trim the spaces.  "</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">"Trim the spaces."</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>As an exercise, you can delve into the second code example from the original <a href="https://community.kx.com/t5/Community-Blogs/Meet-the-Zen-monks/ba-p/11604" target="_blank" rel="noopener noreferrer">post</a> by Stephen Taylor and attempt to decipher it independently. If you encounter any queries or uncertainties along the way, don't hesitate to reach out for assistance.</p>
<p>Happy coding!</p>]]></content:encoded>
            <category>kdb/q</category>
            <category>Learning</category>
            <category>Beginner</category>
            <category>Qbie</category>
        </item>
        <item>
            <title><![CDATA[Go-To KDB/Q Learning Resources]]></title>
            <link>https://DefconQ.github.io/blog/Go-To KDB/Q Learning Resources</link>
            <guid>https://DefconQ.github.io/blog/Go-To KDB/Q Learning Resources</guid>
            <pubDate>Wed, 30 Aug 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[In this blog post, I'll be sharing my favourite KDB/Q learning resources. These are the go-to references that most experienced KDB/Q developers will have encountered, offering an excellent starting point for anyone looking to dive into the world of KDB/Q.]]></description>
            <content:encoded><![CDATA[<p>In this blog post, I'll be sharing my favourite KDB/Q learning resources. These are the go-to references that most experienced KDB/Q developers will have encountered, offering an excellent starting point for anyone looking to dive into the world of KDB/Q.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-tldr">The TL;DR<a href="https://defconq.github.io/blog/Go-To%20KDB/Q%20Learning%20Resources#the-tldr" class="hash-link" aria-label="Direct link to The TL;DR" title="Direct link to The TL;DR">​</a></h2>
<p>If there's one thing that you need to read about KDB/Q then it's the below books:</p>
<ul>
<li><a href="https://www.amazon.com/Mortals-Version-Introduction-Programming/dp/0692573674/" target="_blank" rel="noopener noreferrer">Q For Mortals</a> by Jeffry A. Borror. <a href="https://code.kx.com/q4m3/" target="_blank" rel="noopener noreferrer">Free online version</a></li>
<li><a href="https://www.amazon.com/Tips-Fast-Scalable-Maintainable-Kdb/dp/9881389909/ref=sr_1_1?crid=1P89C7FDDCLIM&amp;keywords=q+tips+nick+psaris&amp;qid=1693248061&amp;s=books&amp;sprefix=qtips+nick+psari%2Cstripbooks-intl-ship%2C141&amp;sr=1-1" target="_blank" rel="noopener noreferrer">Q Tips</a> by Nick Psaris</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-detailed-version">The detailed version<a href="https://defconq.github.io/blog/Go-To%20KDB/Q%20Learning%20Resources#the-detailed-version" class="hash-link" aria-label="Direct link to The detailed version" title="Direct link to The detailed version">​</a></h2>
<p>Mastering KDB/Q can be quite challenging due to its steep learning curve, especially if you're new to vector programming languages. The resources below are designed to provide a solid foundation and help you grasp the essential concepts of the Q programming language.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="books">Books<a href="https://defconq.github.io/blog/Go-To%20KDB/Q%20Learning%20Resources#books" class="hash-link" aria-label="Direct link to Books" title="Direct link to Books">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="q-for-mortals-by-jeffry-a-borror">Q for Mortals by Jeffry A. Borror<a href="https://defconq.github.io/blog/Go-To%20KDB/Q%20Learning%20Resources#q-for-mortals-by-jeffry-a-borror" class="hash-link" aria-label="Direct link to Q for Mortals by Jeffry A. Borror" title="Direct link to Q for Mortals by Jeffry A. Borror">​</a></h4>
<p>If you're new to the Q programming language and embarking on your learning journey, your first step should be to thoroughly read "Q for Mortals" by Jeffry A. Borror, cover to cover. This book serves as a comprehensive guide to essential q concepts and provides a strong foundation in understanding the KDB/Q database.</p>
<p>Beginning with the fundamental data structures of KDB/Q, including Atoms, Lists, and Dictionaries, the book progressively introduces you to Tables, which form a core data structure in KDB/Q. It delves into intricate details about the functioning of operators, guides you through crafting your custom functions, an integral aspect of functional programming (though KDB/Q isn't purely functional), and illustrates the creation of derived functions using iterators, another pivotal element of KDB/Q.</p>
<p>Chapter 9 introduces q-sql and its role in querying and manipulating tables, while Chapter 14 offers insights into the KDB/Q database, encompassing the process of persisting data to disk. These chapters collectively provide an excellent foundational understanding of KDB/Q, making "Q for Mortals" an indispensable resource for newcomers as well as experienced developers.</p>
<p>Written in a highly accessible manner, the book is accompanied by illustrative coding examples and snippets, allowing for easy comprehension and hands-on learning. After completing a full read-through, you can revisit specific chapters whenever needed to reinforce your understanding and delve deeper into the content for a more solid grasp.</p>
<p><img decoding="async" loading="lazy" alt="Q For Mortals" src="https://defconq.github.io/assets/images/qfm3-205f449d12b175d2b535a9c4b51a244d.jpg" width="387" height="500" class="img_ev3q"></p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="q-tips-by-nick-psaris">Q-Tips by Nick Psaris<a href="https://defconq.github.io/blog/Go-To%20KDB/Q%20Learning%20Resources#q-tips-by-nick-psaris" class="hash-link" aria-label="Direct link to Q-Tips by Nick Psaris" title="Direct link to Q-Tips by Nick Psaris">​</a></h4>
<p>After reading of "Q for Mortals," the next step is to explore my preferred KDB/Q book, "Q Tips," authored by Nick Psaris. While "Q Tips" does offer an initial section introducing fundamental concepts and KDB/Q data structures in its initial chapters, I personally found it more advantageous to have a foundational understanding from "Q for Mortals" before delving into "Q Tips."</p>
<p>Within the pages of this book, Nick draws upon his extensive experience and insights garnered from hands-on usage of KDB/Q within a dynamic real-world trading setting. He leads readers on a practical expedition, guiding them through the step-by-step construction of an intricate event processor in KDB/Q, right from the ground up. Nick seamlessly intertwines the fundamental elements of KDB/Q with the pertinent intricacies of market microstructure, resulting in the creation of a synthetic market data generator.</p>
<p>In this context, Nick not only illustrates how to efficiently capture, store, and analyze vast datasets, but also explains the Q programming paradigm and progressively develops the associated libraries. Throughout this journey, he weaves in well-observed and refined tips that he's gleaned from his own experience, ensuring readers gain comprehensive insights into the process.</p>
<p>As you can see from the image of my well-worn copy of Q-Tips below I have read the book several times from front to back and I wholeheartedly recommend Q-Tips to anyone who wants to bring their KDB/Q programming skills to the next level.</p>
<p><img decoding="async" loading="lazy" alt="Q Tips" src="https://defconq.github.io/assets/images/qtips-393a16878dcce7b3886db6ac17cd39ee.jpg" width="1386" height="1440" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="online-resources">Online resources<a href="https://defconq.github.io/blog/Go-To%20KDB/Q%20Learning%20Resources#online-resources" class="hash-link" aria-label="Direct link to Online resources" title="Direct link to Online resources">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="kx-academy">KX Academy<a href="https://defconq.github.io/blog/Go-To%20KDB/Q%20Learning%20Resources#kx-academy" class="hash-link" aria-label="Direct link to KX Academy" title="Direct link to KX Academy">​</a></h4>
<p>In October 2021 KX announced the launch of <a href="https://kx.com/academy/" target="_blank" rel="noopener noreferrer">KX Academy</a>, an online portal for on-demand training. The Academy offers a range of courses, split into two main difficulty levels, Fundamentals and Advanced. In addition to that, you can also find introductory sessions on KX Dashboard, KX Developer, KX Insight and the recently published Python Interface, PyKX. Demos and Tutorials will deepen your newly acquired knowledge with some practical, hands-on examples.</p>
<p>The Fundamental section combines a series of 15 short courses containing expanatory videos and Jupiter notebooks running in a freely accessible, live sandbox development environment with pre-loaded data sets, giving you seemingless access to the power of KDB/Q without having to install anything on your local machine. This is a perfect, practical addition to the book "Q for Mortals" mentioned earlier. I suggest you take the courses alongside when reading the book.</p>
<p>The Advanced section of KX Academy builds up on your previously acquired knowledge and explains more advanced concepts of KDB/Q in 15 Jupiter notebook courses. The modules cover topics such as Enumeration, Attributes, different ways of persisting tables, Joins, Iterators, Functional Selects and more. These topics are also covered in "Q for Mortals" but again, the Jupiter notebooks provide a great practical addition to the theory covered in great detail in the book.</p>
<p>After completing each section, you have the opportunity to validate your understanding by obtaining either of the two certificates, putting your knowledge to test.</p>
<p><img decoding="async" loading="lazy" alt="KX Academy" src="https://defconq.github.io/assets/images/KXAcademy-47795646b5b5edc4ed02255e05e822d5.png" width="1728" height="1020" class="img_ev3q"></p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="data-intellects-blog">Data Intellect's Blog<a href="https://defconq.github.io/blog/Go-To%20KDB/Q%20Learning%20Resources#data-intellects-blog" class="hash-link" aria-label="Direct link to Data Intellect's Blog" title="Direct link to Data Intellect's Blog">​</a></h4>
<p><a href="https://dataintellect.com/" target="_blank" rel="noopener noreferrer">Data Intellect</a>, formerly known as AquaQ, is a consultancy firm providing complete software solutions across a broad range of sectors, including but not limited to Financial Institutions such as Investment Banks or Hedge Funds, Fintec, Healthcare, Renewables or Telematics, just to name a few. One of their expertises is KDB/Q and you can find plenty of more advanced topics on their <a href="https://dataintellect.com/thoughts/?_sft_category=blog" target="_blank" rel="noopener noreferrer">blog</a>. While some of the content is for the more experienced developer, I really enjoy the in depth knowledge provided by them. In addition to the great details provided, Data Intellect also covers technologies or databases beyond KDB/Q and how to interact with them. The blog posts are skillfully crafted, easily understandable, and serve as an excellent platform to enhance your understanding beyond the foundational concepts acquired from other sources.</p>
<p>But that's not all. The best part is that Data Intellect provides a complete, production ready KDB/Q framework called <a href="https://dataintellect.com/thoughts/?_sft_category=blog" target="_blank" rel="noopener noreferrer">TorQ</a> for free as OPEN SOURCE. Yes, you read that right. Go and check it out for yourself, you can find TorQ <a href="https://github.com/DataIntellectTech/TorQ" target="_blank" rel="noopener noreferrer">here</a></p>
<p><img decoding="async" loading="lazy" alt="Data Intellect Blog" src="https://defconq.github.io/assets/images/DataIntellect-2857673dfe79a19daf9d5d9f57ccfa72.png" width="1350" height="1101" class="img_ev3q"></p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="updated-habla-computing-blog-and-weekly-cue">[UPDATED] Habla Computing Blog and Weekly Cue<a href="https://defconq.github.io/blog/Go-To%20KDB/Q%20Learning%20Resources#updated-habla-computing-blog-and-weekly-cue" class="hash-link" aria-label="Direct link to [UPDATED] Habla Computing Blog and Weekly Cue" title="Direct link to [UPDATED] Habla Computing Blog and Weekly Cue">​</a></h4>
<p>In recent months, we've witnessed the emergence of a promising newcomer in the KDB/Q landscape. I'm thrilled to witness the expansion of the KDB/Q community, with the contributions of my colleagues and friends at <a href="https://www.linkedin.com/company/habla-computing/" target="_blank" rel="noopener noreferrer">Habla Computing</a> in Madrid proving to be an invaluable asset for those venturing into the world of KDB/Q. <a href="https://www.linkedin.com/in/jserranohidalgo/" target="_blank" rel="noopener noreferrer">Juan</a> and <a href="https://www.linkedin.com/in/jes%C3%BAs-l%C3%B3pez-gonz%C3%A1lez-98237248/" target="_blank" rel="noopener noreferrer">Jesus</a>, both seasoned software developers with extensive backgrounds in Scala, have embarked on their journey with KDB/Q in the past few years, spearheading the efforts behind the <a href="https://www.habla.dev/blog/" target="_blank" rel="noopener noreferrer">Habla Computing blog</a> and the <a href="https://www.linkedin.com/pulse/weekly-cue-1-accumulating-sums-habla-computing-er8wf/?trackingId=RWhEsgG6cJLkslLOztv%2B4A%3D%3D" target="_blank" rel="noopener noreferrer">Weekly Cue</a> series on LinkedIn. The Weekly Cues, are bite-sized Linkedin articles explaining a KDB/Q topic in a easy and simple way, ideal to satisfy your hunger for KDB/Q knowledge. Following this, their <a href="https://www.linkedin.com/pulse/weekly-quest-1-sliding-sum-mastery-habla-computing-p3gre/?trackingId=XHUq3wpldVEtOZx5u62T3g%3D%3D" target="_blank" rel="noopener noreferrer">Weekly Quests</a> challenge you to apply your newfound knowledge by solving KDB/Q puzzles, aiming to craft the most concise and efficient q code—an opportunity to gauge your skills alongside fellow KDB/Q developers in the community. It's a delightful and interactive approach to learning KDB/Q concepts, offering glimpses into the expertise of seasoned developers. Make sure to check them out! Moreover, Habla Computing hosts monthly meetups in Madrid (with online streaming available), operating under the theme "Everything, Everywhere All with KDB/Q." I had the pleasure of presenting at their inaugural Meetup in April, and you can access the recording <a href="https://www.linkedin.com/pulse/defconq-everything-everywhere-all-kdbq-habla-alexander-unterrainer-yawqf/?trackingId=NE5DvIxmc1V6nzJMdfPsyQ%3D%3D" target="_blank" rel="noopener noreferrer">here</a>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="whats-next">What's next<a href="https://defconq.github.io/blog/Go-To%20KDB/Q%20Learning%20Resources#whats-next" class="hash-link" aria-label="Direct link to What's next" title="Direct link to What's next">​</a></h3>
<p>If you've made it this far and possibly explored some of the suggested resources, you likely posses a solid understanding of KDB/Q, its concepts, applications, strengths and architecture. At this point, you might ask yourself what's next on this beautiful journey of mastering KDB/Q, which like any other skill, holds boundless potential. Moving forward,practice is key. Mastery, after all, emerges from dedicated practice. Nevertheless, I'd like to offer you two more resources to help you on your path:</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="kx-whitepapers">KX Whitepapers<a href="https://defconq.github.io/blog/Go-To%20KDB/Q%20Learning%20Resources#kx-whitepapers" class="hash-link" aria-label="Direct link to KX Whitepapers" title="Direct link to KX Whitepapers">​</a></h4>
<p>Whitepapers are short, focused  papers explaining a particular topic in KDB/Q. These topics cover a broad spectrum, ranging from direct association with the Q programming language, its application, and interfaces to strategies for managing large data and systems. Furthermore, there exists a segment dedicated to delving into Machine Learning within the realm of KDB/Q. Notably, the complexity of these whitepapers varies significantly, with the majority catering to more seasoned developers.</p>
<p>It's worth mentioning that while some of these whitepapers may lack in-depth explanations of the presented code or practical implementation guidance, this should not deter you from exploring them. Below, I've compiled a list of whitepapers that I've personally perused and find exceptionally well-written and valuable for expanding your knowledge. Do keep in mind that I haven't read all whitepapers available <a href="https://code.kx.com/q/wp/" target="_blank" rel="noopener noreferrer">here</a> and I can't comment on every single one of them</p>
<ul>
<li><a href="https://code.kx.com/q/wp/rt-tick/" target="_blank" rel="noopener noreferrer">Building real-time tick subscribers</a> by Nathan Perrem</li>
<li><a href="https://code.kx.com/q/wp/gateway-design/" target="_blank" rel="noopener noreferrer">Common design principles for kdb+ gateways</a> by Michael McClintock</li>
<li><a href="https://code.kx.com/q/wp/query-routing/" target="_blank" rel="noopener noreferrer">Query Routing: A kdb+ framework for a scalable, load balanced system</a> by Kevin Holsgrove</li>
<li><a href="https://code.kx.com/q/wp/iterators/" target="_blank" rel="noopener noreferrer">Iterators</a> by  Conor Slattery &amp; Stephen Taylor</li>
<li><a href="https://code.kx.com/q/wp/parse-trees/" target="_blank" rel="noopener noreferrer">Parse trees and functional forms</a> by Peter Storeng &amp; Stephen Taylor</li>
<li><a href="https://code.kx.com/q/wp/ipc/" target="_blank" rel="noopener noreferrer">Interprocess communications</a> by  Katrina McCormac</li>
</ul>
<p>I will cover some of them in future blog posts.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="kx-reference">KX Reference<a href="https://defconq.github.io/blog/Go-To%20KDB/Q%20Learning%20Resources#kx-reference" class="hash-link" aria-label="Direct link to KX Reference" title="Direct link to KX Reference">​</a></h4>
<p>The final resource I'd like to introduce is akin to a Swiss pocket knife in the realm of KDB/Q learning: the KX Reference card. This invaluable tool encompasses a comprehensive compilation of KDB/Q keywords, datatypes, namespaces, operators, command-line options, and much more – the list is extensive and beyond the scope of this discussion.</p>
<p>I find the Reference Card to be an indispensable asset, to the extent that I routinely keep it open in one of my web browser tabs. Whether you're seeking a swift verification of a keyword's functionality, exploring operators that align with your requirements, or revisiting subjects that may have become rusty over time, the Reference Card stands as your go-to resource.</p>
<p><img decoding="async" loading="lazy" alt="KX Reference" src="https://defconq.github.io/assets/images/reference-2818896eaae661a4dd12785b2f9056d4.png" width="1358" height="1104" class="img_ev3q"></p>
<p>And thus, we conclude our journey. Wishing you joyful learning and coding endeavors ahead</p>]]></content:encoded>
            <category>kdb/q</category>
            <category>QForMortals</category>
            <category>QTips</category>
            <category>KX</category>
            <category>Data Intellect</category>
            <category>Learning</category>
            <category>Beginner</category>
        </item>
        <item>
            <title><![CDATA[Welcome]]></title>
            <link>https://DefconQ.github.io/blog/welcome</link>
            <guid>https://DefconQ.github.io/blog/welcome</guid>
            <pubDate>Mon, 28 Aug 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to DefconQ - Your Beginner's Guide to Navigating the KDB/Q Universe!]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="welcome-to-defconq---your-beginners-guide-to-navigating-the-kdbq-universe">Welcome to DefconQ - Your Beginner's Guide to Navigating the KDB/Q Universe!<a href="https://defconq.github.io/blog/welcome#welcome-to-defconq---your-beginners-guide-to-navigating-the-kdbq-universe" class="hash-link" aria-label="Direct link to Welcome to DefconQ - Your Beginner's Guide to Navigating the KDB/Q Universe!" title="Direct link to Welcome to DefconQ - Your Beginner's Guide to Navigating the KDB/Q Universe!">​</a></h2>
<p>Hey there, tech enthusiasts and aspiring KDB/Q developers! Are you ready to embark on an exciting journey into the world of q programming, tice architecture, and design? Look no further, because you've just stumbled upon your ultimate resource for demystifying the KDB/Q landscape.</p>
<p>We get it - starting out in the tech world can be a bit overwhelming. The jargon, the paradigms, the concepts - they can feel like a maze that's hard to navigate. But fear not! Our mission is to guide you through this maze, one step at a time, and make these seemingly complex topics as easy to grasp as building blocks.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-are-we-here">Why Are We Here?<a href="https://defconq.github.io/blog/welcome#why-are-we-here" class="hash-link" aria-label="Direct link to Why Are We Here?" title="Direct link to Why Are We Here?">​</a></h3>
<p>Being a self-starter myself - our blog is born out of the desire to make KDB/Q accessible to everyone, especially beginners. We've been in your shoes, and we understand the struggles of wrapping your head around the q programming language, tick architecture, and design principles. That's why we're here to break down those barriers, sprinkle in some practical tips, and empower you to dive into the KDB/Q world with confidence.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="what-can-you-expect">What Can You Expect?<a href="https://defconq.github.io/blog/welcome#what-can-you-expect" class="hash-link" aria-label="Direct link to What Can You Expect?" title="Direct link to What Can You Expect?">​</a></h4>
<p>Whether you're a complete novice or someone looking to brush up on their skills, our blog has something for you. We'll start with the basics, explaining q programming paradigms in a way that won't make your head spin. We'll delve into the intricacies of tick architecture and design, so you can build solid foundations for your projects.</p>
<p>But that's not all! We're curating a collection of helpful resources that'll serve as your tech toolbox. From must-read articles to insightful videos, we're cherry-picking the best content to aid your learning journey. And yes, we're rolling up our sleeves to create step-by-step tutorials that walk you through real-world scenarios, so you can see these concepts in action.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="join-us-on-this-adventure">Join Us On This Adventure<a href="https://defconq.github.io/blog/welcome#join-us-on-this-adventure" class="hash-link" aria-label="Direct link to Join Us On This Adventure" title="Direct link to Join Us On This Adventure">​</a></h3>
<p>Buckle up, because this is a journey you won't want to miss. Whether you're aspiring to be a programmer, an architect, or just someone intrigued by the tech magic happening behind the scenes, we're here to welcome you with open arms. Let's turn the overwhelming into the understandable, the complex into the clear, and the daunting into the doable.</p>
<p>So, stick around, bookmark us, and get ready to embark on a tech adventure that'll leave you with newfound knowledge, skills, and an unquenchable thirst for all things tech. Welcome to DefconQ - where we're turning tech novices into tech savvy superheroes, one blog post at a time!</p>
<p><img decoding="async" loading="lazy" alt="Hello World" src="https://defconq.github.io/assets/images/HelloWorld-7a27dc6d1865c697ecd52b33398d80e0.png" width="1380" height="784" class="img_ev3q"></p>]]></content:encoded>
            <category>kdb/q</category>
            <category>welcome</category>
            <category>Hello World</category>
        </item>
    </channel>
</rss>