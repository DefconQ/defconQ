"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3997],{37848:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var i=t(74848),s=t(28453);const a={sidebar_position:9},o="Joins: Connecting the Dots for Data Clarity",r={id:"concepts/joins",title:"Joins: Connecting the Dots for Data Clarity",description:"So far, we\u2019ve explored how to query data using Q-SQL and how to translate those queries into their corresponding functional forms. Now, let\u2019s take it a step further and dive into joining datasets with KDB/Q. Joins are one of the most powerful tools in KDB/Q, and they play a significant role in its unmatched efficiency for big data analysis. Compared to other languages, KDB/Q joins are not only faster and more efficient but also uniquely versatile, featuring specialized joins like the asof join and window join.",source:"@site/docs/concepts/joins.mdx",sourceDirName:"concepts",slug:"/concepts/joins",permalink:"/docs/concepts/joins",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Embracing Terseness: Functional Forms and Parse Trees",permalink:"/docs/concepts/functionalSelect"},next:{title:"Tutorials",permalink:"/docs/category/tutorials"}},d={},l=[{value:"Why we use Joins",id:"why-we-use-joins",level:2},{value:"Basic Joins",id:"basic-joins",level:2},{value:"Merge Tables Effortlessly: Joining Records with Concatenate <code>,</code>",id:"merge-tables-effortlessly-joining-records-with-concatenate-",level:3},{value:"Combining Columns: Mastering Concatenate and Each-Both Joins",id:"combining-columns-mastering-concatenate-and-each-both-joins",level:3},{value:"Equi (or Exact) Joins",id:"equi-or-exact-joins",level:2},{value:"Left Join <code>lj</code>",id:"left-join-lj",level:3},{value:"Syntax",id:"syntax",level:4},{value:"Inner Join <code>ij</code>",id:"inner-join-ij",level:3},{value:"Syntax",id:"syntax-1",level:4},{value:"Union Join <code>uj</code>",id:"union-join-uj",level:3},{value:"Syntax",id:"syntax-2",level:4},{value:"Union Join for unkeyed table",id:"union-join-for-unkeyed-table",level:4},{value:"Union Join for keyed tables",id:"union-join-for-keyed-tables",level:4},{value:"The Danger of Union Joins: Handle with Care",id:"the-danger-of-union-joins-handle-with-care",level:4},{value:"Plus Join <code>pj</code>",id:"plus-join-pj",level:3},{value:"Syntax",id:"syntax-3",level:4},{value:"Equi Join <code>ej</code>",id:"equi-join-ej",level:3},{value:"Syntax",id:"syntax-4",level:3},{value:"As-Of-Joins",id:"as-of-joins",level:2},{value:"As-of Join <code>aj</code>",id:"as-of-join-aj",level:3},{value:"Syntax",id:"syntax-5",level:4},{value:"Navigating the Pitfalls: The Hidden Dangers of As-Of Joins",id:"navigating-the-pitfalls-the-hidden-dangers-of-as-of-joins",level:4},{value:"Window Join <code>wj</code>",id:"window-join-wj",level:3},{value:"Syntax",id:"syntax-6",level:4},{value:"Window Joins: Mind the Edge Before You Lean Too Far",id:"window-joins-mind-the-edge-before-you-lean-too-far",level:4},{value:"As of <code>asof</code>",id:"as-of-asof",level:3},{value:"Syntax",id:"syntax-7",level:4},{value:"Performance considerations",id:"performance-considerations",level:2},{value:"Join Smart: Only the Data You Need",id:"join-smart-only-the-data-you-need",level:4},{value:"Boost Your Joins with KDB/Q&#39;s Secret Weapon: Attributes",id:"boost-your-joins-with-kdbqs-secret-weapon-attributes",level:4},{value:"Optimising Asof Join Performance: Tips and Tricks",id:"optimising-asof-join-performance-tips-and-tricks",level:4},{value:"Don&#39;t Lose Your Attributes",id:"dont-lose-your-attributes",level:5},{value:"Tips and Tricks",id:"tips-and-tricks",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"joins-connecting-the-dots-for-data-clarity",children:"Joins: Connecting the Dots for Data Clarity"}),"\n",(0,i.jsxs)(n.p,{children:["So far, we\u2019ve explored how to query data using Q-SQL and how to translate those queries into their corresponding functional forms. Now, let\u2019s take it a step further and dive into ",(0,i.jsx)(n.strong,{children:"joining datasets"})," with KDB/Q. Joins are one of the most powerful tools in KDB/Q, and they play a significant role in its unmatched efficiency for big data analysis. Compared to other languages, KDB/Q joins are not only faster and more efficient but also uniquely versatile, featuring specialized joins like the ",(0,i.jsx)(n.strong,{children:"asof join"})," and ",(0,i.jsx)(n.strong,{children:"window join"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"While other databases are beginning to incorporate these advanced join types into their capabilities, KDB/Q has been perfecting them for decades, enabling you to answer complex questions about your data that would otherwise be challenging to tackle. Without further ado, let\u2019s explore this fascinating topic!"}),"\n",(0,i.jsx)(n.h2,{id:"why-we-use-joins",children:"Why we use Joins"}),"\n",(0,i.jsx)(n.p,{children:"Before we start exploring joins in greater detail, let\u2019s take a step back and consider why we use them in the first place. Why not just store all our data in one massive table and eliminate the need for joins entirely? While possible, such an approach would violate many best practices in software development and lead to significant inefficiencies. The schema for such a table would be absolutely horrendous, with potentially hundreds of columns, making it difficult to manage and query."}),"\n",(0,i.jsxs)(n.p,{children:["This brings us to one of the core principles of database design: ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Database_normalization",children:(0,i.jsx)(n.strong,{children:"data normalization"})}),". Normalization is the process of organizing a relational database into structured tables following specific rules, called normal forms, to reduce redundancy and improve data integrity. While a deep dive into normalization is beyond the scope of this post, the gist is simple - data is divided into smaller, related tables using keys and reassembled when needed using joins."]}),"\n",(0,i.jsx)(n.p,{children:"Normalization eliminates duplicate data, saving storage space and ensuring consistency. Joins, in turn, restore the flat, rectangular structure needed for effective data analysis. For example, trading data might be stored in one table, while reference data like instrument details resides in another. Joins allow you to combine these datasets seamlessly, enabling meaningful analysis while adhering to good database design principles."}),"\n",(0,i.jsxs)(n.p,{children:["One of the key reasons KDB/Q excels in big data analytics is its exceptional efficiency in performing joins. Additionally, KDB/Q has featured ",(0,i.jsx)(n.strong,{children:"as-of joins"})," for nearly three decades - a groundbreaking innovation introduced by Arthur Whitney that enables users to answer questions that would otherwise remain unresolved."]}),"\n",(0,i.jsx)(n.p,{children:"In KDB/Q, joins can be broadly categorized into two main types: Equi (or Exact) Joins and As-of Joins. In the following sections we will look at both categories in more detail and walking through numerous examples to demonstrate their power and versatility."}),"\n",(0,i.jsx)(n.h2,{id:"basic-joins",children:"Basic Joins"}),"\n",(0,i.jsxs)(n.p,{children:["Technically, there\u2019s a third category of joins in KDB/Q, though it\u2019s more accurately described as a ",(0,i.jsx)(n.strong,{children:"concatenation"})," of tables or columns. Since a table in KDB/Q is essentially a list of conforming dictionaries (if this concept is unfamiliar, check out my dedicated blog post on tables ",(0,i.jsx)(n.a,{href:"https://www.defconq.tech/docs/concepts/dictionariesTables#tables",children:"here"}),") , and because tables are first-class citizens in KDB/Q, you can use the simple ",(0,i.jsx)(n.strong,{children:"concatenate operator"})," ",(0,i.jsx)(n.code,{children:","})," to merge tables or leverage the ",(0,i.jsx)(n.strong,{children:"each-both iterator"})," ",(0,i.jsx)(n.code,{children:"'"})," in combination with ",(0,i.jsx)(n.code,{children:","})," to join all columns of two tables using ",(0,i.jsx)(n.code,{children:",'"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Let's look at some basic examples to illustrate how this works. We are using the simplified ",(0,i.jsx)(n.code,{children:"trade"})," and ",(0,i.jsx)(n.code,{children:"quote"})," tables for these examples:"]}),"\n",(0,i.jsxs)(n.h3,{id:"merge-tables-effortlessly-joining-records-with-concatenate-",children:["Merge Tables Effortlessly: Joining Records with Concatenate ",(0,i.jsx)(n.code,{children:","})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)show trade:([] sym:`AAPL`MSFT`GOOG`IBM; price:123.0 45.9 234.4 20.0; qty: 100 45 200 300)\nsym  price qty\n--------------\nAAPL 123   100\nMSFT 45.9  45\nGOOG 234.4 200\nIBM  20    300\nq)show quote:([] sym:`AAPL`MSFT`GOOG`IBM; bid:123.1 46.0 245.9 21.9; ask:124.8 46.1 246.2 23.9)\nsym  bid   ask\n----------------\nAAPL 123.1 124.8\nMSFT 46    46.1\nGOOG 245.9 246.2\nIBM  21.9  23.9\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The first thing you\u2019ll notice when attempting to use the concatenate operator to combine the ",(0,i.jsx)(n.code,{children:"trade"})," table with the ",(0,i.jsx)(n.code,{children:"quote"})," table is that it results in a ",(0,i.jsx)(n.code,{children:"mismatch"})," error. This behavior is expected. Recall that a table in KDB/Q is essentially a list of conforming column dictionaries, and in this case, the ",(0,i.jsx)(n.code,{children:"trade"})," and ",(0,i.jsx)(n.code,{children:"quote"})," tables do not conform. The ",(0,i.jsx)(n.code,{children:"trade"})," table has the columns ",(0,i.jsx)(n.code,{children:"sym"}),", ",(0,i.jsx)(n.code,{children:"price"})," and ",(0,i.jsx)(n.code,{children:"qty"}),", while the ",(0,i.jsx)(n.code,{children:"quote"})," table contains ",(0,i.jsx)(n.code,{children:"sym"}),", ",(0,i.jsx)(n.code,{children:"bid"}),", and ",(0,i.jsx)(n.code,{children:"ask"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)trade,quote\n'mismatch\n  [0]  trade,quote\n            ^\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If we attempt to concatenate or join the ",(0,i.jsx)(n.code,{children:"trade"})," table with itself, it works as expected. Since we are effectively joining the same table to itself, the schemas align perfectly, resulting in a table where each record appears twice. It\u2019s important to note that the records are not sorted in any specific order\u2014they appear sequentially based on how the two individual tables are joined."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)trade,trade\nsym  price qty\n--------------\nAAPL 123   100\nMSFT 45.9  45\nGOOG 234.4 200\nIBM  20    300\nAAPL 123   100\nMSFT 45.9  45\nGOOG 234.4 200\nIBM  20    300\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"https://code.kx.com/q/basics/internal/#0nx-show",children:(0,i.jsx)(n.code,{children:"0N!"})})," operator is a powerful tool when it comes to debugging or inspecting the underlying structure of a KBD/Q data type"]})}),"\n",(0,i.jsxs)(n.p,{children:["The compatibility of the schemas becomes more apparent when you use the ",(0,i.jsx)(n.code,{children:"0N!"})," operator to inspect the underlying data structure of the ",(0,i.jsx)(n.code,{children:"trade"})," table."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)0N!trade,trade\n+`sym`price`qty!(`AAPL`MSFT`GOOG`IBM`AAPL`MSFT`GOOG`IBM;123 45.9 234.4 20 123 45.9 234.4 20;100 45 200 300 100 45 200 300)\nsym  price qty\n--------------\nAAPL 123   100\nMSFT 45.9  45\nGOOG 234.4 200\nIBM  20    300\nAAPL 123   100\nMSFT 45.9  45\nGOOG 234.4 200\nIBM  20    300\nq)(trade;trade)\n+`sym`price`qty!(`AAPL`MSFT`GOOG`IBM;123 45.9 234.4 20;100 45 200 300)\n+`sym`price`qty!(`AAPL`MSFT`GOOG`IBM;123 45.9 234.4 20;100 45 200 300)\n"})}),"\n",(0,i.jsx)(n.p,{children:"As long as the table schemas align, you can concatenate more than two tables without any issues."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)trade,trade,trade\nsym  price qty\n--------------\nAAPL 123   100\nMSFT 45.9  45\nGOOG 234.4 200\nIBM  20    300\nAAPL 123   100\nMSFT 45.9  45\nGOOG 234.4 200\nIBM  20    300\nAAPL 123   100\nMSFT 45.9  45\nGOOG 234.4 200\nIBM  20    300\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This type of join is particularly useful when combining two tables with identical schemas. However, it\u2019s important to note that this join does not match on any keys, which means it can result in ",(0,i.jsx)(n.strong,{children:"duplicate records"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"combining-columns-mastering-concatenate-and-each-both-joins",children:"Combining Columns: Mastering Concatenate and Each-Both Joins"}),"\n",(0,i.jsxs)(n.p,{children:["Another useful technique is joining all columns of two tables. To achieve this, we use the concatenate operator ",(0,i.jsx)(n.code,{children:","})," in combination with the each-both iterator ",(0,i.jsx)(n.code,{children:"'"}),", resulting in ",(0,i.jsx)(n.code,{children:",'"}),". Since a table in KDB/Q is essentially a list of conforming dictionaries, the concatenation is applied element-wise to each record from both tables. By leveraging the each-both iterator, the first record of the trade table (a dictionary) is joined with the first record of the quote table (also a dictionary), and so on, resulting in the desired merged output."]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["If you need a quick refresher on KDB/Q dictionaries and tables, check out my blog post ",(0,i.jsx)(n.a,{href:"https://www.defconq.tech/docs/concepts/dictionariesTables",children:"here"})]})}),"\n",(0,i.jsx)(n.p,{children:"Let's take a closer look at how this works in practice. First, let's confirm that a table is indeed a list of conform dictionaries. We can do so by simply creating a list of conform dictionaries:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)(`sym`price`qty!(`AAPL;123;100);`sym`price`qty!(`MSFT;45.9;45);`sym`price`qty!(`GOOG;234.4;200);`sym`price`qty!(`IBM;20;300))\nsym  price qty\n--------------\nAAPL 123   100\nMSFT 45.9  45\nGOOG 234.4 200\nIBM  20    300\n"})}),"\n",(0,i.jsx)(n.p,{children:"alternatively, a table can be seen as a flipped column dictionary."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)flip (`sym`price`qty!(`AAPL;123;100);`sym`price`qty!(`MSFT;45.9;45);`sym`price`qty!(`GOOG;234.4;200);`sym`price`qty!(`IBM;20;300))\nsym  | AAPL MSFT GOOG  IBM\nprice| 123  45.9 234.4 20\nqty  | 100  45   200   300\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Building on the concept above, we can use the ",(0,i.jsx)(n.strong,{children:"concatenate"})," operator ",(0,i.jsx)(n.code,{children:","})," alongside the ",(0,i.jsx)(n.strong,{children:"each-both"})," iterator ",(0,i.jsx)(n.code,{children:"'"})," to join each record from both tables using ",(0,i.jsx)(n.code,{children:",'"}),". This operation adds any keys and values from the second dictionary that are missing in the first. However, if a key exists in both dictionaries, the value from the right dictionary takes precedence. The result of this operation is a list of conforming dictionaries, which, as we know, forms a valid table."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)trade,'quote\nsym  price qty bid   ask\n--------------------------\nAAPL 123   100 123.1 124.8\nMSFT 45.9  45  46    46.1\nGOOG 234.4 200 245.9 246.2\nIBM  20    300 21.9  23.9\n"})}),"\n",(0,i.jsx)(n.p,{children:"There are two key observations to make:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"If a key exists in both dictionaries, the value from the right dictionary takes precedence."}),"\n",(0,i.jsx)(n.li,{children:"For this type of join to work, both tables must have the same number of records, which is logical given the element-wise nature of the operation."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"// Reverse quote to illustrate that the sym column values of the right table take precedence\nq)(update symTrade:sym from trade),'reverse quote\nsym  price qty symTrade bid   ask\n-----------------------------------\nIBM  123   100 AAPL     21.9  23.9\nGOOG 45.9  45  MSFT     245.9 246.2\nMSFT 234.4 200 GOOG     46    46.1\nAAPL 20    300 IBM      123.1 124.8\n// Use non conform lengths\nq)trade,'2#quote\n'length\n  [0]  trade,'2#quote\n             ^\n"})}),"\n",(0,i.jsx)(n.p,{children:"With these two fundamental implicit joins covered, let\u2019s move on to the real strength of KDB/Q native joins."}),"\n",(0,i.jsx)(n.h2,{id:"equi-or-exact-joins",children:"Equi (or Exact) Joins"}),"\n",(0,i.jsxs)(n.p,{children:["The first category of joins, ",(0,i.jsx)(n.strong,{children:"Equi (or Exact) Joins"}),", is used when you have one or more columns that uniquely identify the records in a table. These identifiers serve as the basis for matching and combining data from two different datasets. The shape and content of the resulting table depend on the specific type of join used. In the following sections, we\u2019ll explore all the exact joins: ",(0,i.jsx)(n.strong,{children:"left join"})," (",(0,i.jsx)(n.code,{children:"lj"}),"), ",(0,i.jsx)(n.strong,{children:"inner join"})," (",(0,i.jsx)(n.code,{children:"ij"}),"), ",(0,i.jsx)(n.strong,{children:"union join"})," (",(0,i.jsx)(n.code,{children:"uj"}),"), ",(0,i.jsx)(n.strong,{children:"plus join"})," (",(0,i.jsx)(n.code,{children:"pj"}),"), and ",(0,i.jsx)(n.strong,{children:"equi join"})," (",(0,i.jsx)(n.code,{children:"ej"}),"). The common pattern across all these joins is the fact that they rely on one or more key columns to match and align records."]}),"\n",(0,i.jsxs)(n.p,{children:["In our examples, we\u2019ll reuse the ",(0,i.jsx)(n.code,{children:"trade"})," and ",(0,i.jsx)(n.code,{children:"quote"})," tables from the previous section. To enhance understanding, we\u2019ll illustrate the outcome of each join with graphical representations, making it easier to grasp the mechanics behind each join."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)trade\nsym  price qty\n--------------\nAAPL 123   100\nMSFT 45.9  45\nGOOG 234.4 200\nIBM  20    300\nq)quote\nsym  bid   ask\n----------------\nAAPL 123.1 124.8\nMSFT 46    46.1\nGOOG 245.9 246.2\nIBM  21.9  23.9\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Trade and Quote table",src:t(9363).A+"",width:"1828",height:"442"})}),"\n",(0,i.jsxs)(n.h3,{id:"left-join-lj",children:["Left Join ",(0,i.jsx)(n.code,{children:"lj"})]}),"\n",(0,i.jsxs)(n.p,{children:["If you\u2019re familiar with set theory, the concept of a ",(0,i.jsx)(n.strong,{children:"left join"})," (",(0,i.jsx)(n.code,{children:"lj"}),") will feel intuitive. However, for completeness, let\u2019s break it down. Given an ",(0,i.jsx)(n.strong,{children:"unkeyed or keyed table"})," as the ",(0,i.jsx)(n.strong,{children:"left operand"})," and a ",(0,i.jsx)(n.strong,{children:"keyed table"})," as the ",(0,i.jsx)(n.strong,{children:"right operand"}),", a left join matches rows from the right table where the key column(s) align with those in the left table. The result includes all rows from the left table, with matching data from the right table added to it."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Trade and Quote table - Left Join",src:t(88793).A+"",width:"733",height:"516"})}),"\n",(0,i.jsx)(n.h4,{id:"syntax",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"table1 lj table2\n"})}),"\n",(0,i.jsx)(n.p,{children:"where"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"table1"})," is either a table or keyed table"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"table2"})," is a keyed table"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"If the right table lacks data for any record in the left table, the corresponding new columns will contain nulls. However, if the source and target tables have duplicate non-key columns, the operation follows upsert semantics. This means the values in the right operand (target) columns will take precedence over those in the left operand (source). A key detail to remember is that the resulting table will always have the same number of records as the left table, neither expanding nor shrinking."}),"\n",(0,i.jsx)(n.p,{children:"A practical use case for a left join might involve appending bid and ask prices to trade records or enriching trade data with reference information."}),"\n",(0,i.jsx)(n.p,{children:"Let's look at the example where we join bid and ask prices to trade records:"}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Remember"}),": The right operand needs to be a keyed table"]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"// we key the quote table on the first column (sym)\nq)trade lj 1!quote\nsym  price qty bid   ask\n--------------------------\nAAPL 123   100 123.1 124.8\nMSFT 45.9  45  46    46.1\nGOOG 234.4 200 245.9 246.2\nIBM  20    300 21.9  23.9\n"})}),"\n",(0,i.jsx)(n.p,{children:"As mentioned above, if there are common non-key columns, the left join has upset semantics and the values of the right table prevail. Let's illustrate this concept:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"// Adding a qty column to quote so we have a common column\nq)trade lj 1!select sym,bid,ask,qty:10000 from quote where sym in `AAPL`GOOG\nsym  price qty   bid   ask\n----------------------------\nAAPL 123   10000 123.1 124.8\nMSFT 45.9  45\nGOOG 234.4 10000 245.9 246.2\nIBM  20    300\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Trade and Quote table - Left Join",src:t(95761).A+"",width:"2066",height:"950"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"// Adding bid and ask column to trades for illustration\nq)(update bid:10.0,ask:11.0 from trade) lj 1!select sym,bid,ask,qty:10000 from quote where sym in `AAPL`GOOG\nsym  price qty   bid   ask\n----------------------------\nAAPL 123   10000 123.1 124.8\nMSFT 45.9  45    10    11\nGOOG 234.4 10000 245.9 246.2\nIBM  20    300   10    11\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Trade and Quote table - Left Join",src:t(65522).A+"",width:"2482",height:"896"})}),"\n",(0,i.jsxs)(n.p,{children:["In the first example above, we added the ",(0,i.jsx)(n.code,{children:"qty"})," column to the ",(0,i.jsx)(n.code,{children:"quotes"})," table to create a shared non-key column. As observed, the resulting join updated the values in the ",(0,i.jsx)(n.code,{children:"qty"})," column wherever the keys matched (to ensure not all keys matched, we selected only Apple and Google records from the ",(0,i.jsx)(n.code,{children:"quotes"})," table). For records without a match, the corresponding columns were populated with null values (evident in the ",(0,i.jsx)(n.code,{children:"bid"})," and ",(0,i.jsx)(n.code,{children:"ask"})," columns for Microsoft and IBM)."]}),"\n",(0,i.jsxs)(n.p,{children:["In the second example, we added ",(0,i.jsx)(n.code,{children:"bid"})," and ",(0,i.jsx)(n.code,{children:"ask"})," columns to the ",(0,i.jsx)(n.code,{children:"trade"})," table to demonstrate that only records with matching key columns are updated, while all non-matching records remain unchanged."]}),"\n",(0,i.jsx)(n.p,{children:"When performing a left join on two keyed tables, the result is as expected, with the distinction that the resulting table remains keyed rather than unkeyed."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)(1!trade)lj 1!quote\nsym | price qty bid   ask\n----| ---------------------\nAAPL| 123   100 123.1 124.8\nMSFT| 45.9  45  46    46.1\nGOOG| 234.4 200 245.9 246.2\nIBM | 20    300 21.9  23.9\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Although KDB/Q ",(0,i.jsx)(n.strong,{children:"does not"})," have a dedicated ",(0,i.jsx)(n.strong,{children:"right join"}),", you can achieve the same result as a SQL right join by simply swapping the arguments of a left join."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"// Swapping the arguments to obtain a right join\nq)quote lj 1!trade\nsym  bid   ask   price qty\n--------------------------\nAAPL 123.1 124.8 123   100\nMSFT 46    46.1  45.9  45\nGOOG 245.9 246.2 234.4 200\nIBM  21.9  23.9  20    300\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"inner-join-ij",children:["Inner Join ",(0,i.jsx)(n.code,{children:"ij"})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"Inner Join"})," ",(0,i.jsx)(n.code,{children:"ij"})," works similarly to the left join, with one key ",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"difference"})}),": the resulting table includes ",(0,i.jsx)(n.strong,{children:"only"})," the records present in both the left (source) and right (target) table. As with a left join, the right operand must be a keyed table (target), while the left operand can be a table or keyed table (source) with column(s) that serve as foreign key(s) to the target or match the target's key column(s) in name and type. Matching is performed on the common column name(s) between the source and the key column(s) of the target, returning only those records with matching keys in both tables."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Trade and Quote table - Inner Join",src:t(48344).A+"",width:"784",height:"503"})}),"\n",(0,i.jsx)(n.h4,{id:"syntax-1",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"table1 ij table2\n"})}),"\n",(0,i.jsx)(n.p,{children:"where"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"table1"})," is either a table or keyed table"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"table2"})," is a keyed table"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)trade ij 1!update sym:`X from quote where sym in `AAPL`IBM\nsym  price qty bid   ask\n--------------------------\nMSFT 45.9  45  46    46.1\nGOOG 234.4 200 245.9 246.2\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Trade and Quote table - Inner Join",src:t(94379).A+"",width:"1992",height:"994"})}),"\n",(0,i.jsxs)(n.h3,{id:"union-join-uj",children:["Union Join ",(0,i.jsx)(n.code,{children:"uj"})]}),"\n",(0,i.jsx)(n.p,{children:"As the name suggests, a union join merges data from two tables. In terms of set theory, the union join is analogous to the union of two sets. It vertically and horizontally combines two tables or keyed tables into a single table. The resulting table is expanded to include new columns and rows from the right operand that do not exist in the left operand, with the same name and type. Records from the left operand appear first in the result, with null values in any newly added columns. Records from the right operand follow, with their field values placed in the corresponding columns. Let\u2019s explore this concept with some examples \u2014 it will make things clearer."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Trade and Quote table - Union Join",src:t(97465).A+"",width:"706",height:"504"})}),"\n",(0,i.jsx)(n.h4,{id:"syntax-2",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:["Unlike left and inner joins, the union join operates exclusively on ",(0,i.jsx)(n.strong,{children:"two unkeyed tables"})," or ",(0,i.jsx)(n.strong,{children:"two keyed tables"})," - it ",(0,i.jsx)(n.strong,{children:"does not"})," support combining a keyed table with an unkeyed table."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"table1 uj table2\n\nkeyedTable1 uj keyedTable2\n"})}),"\n",(0,i.jsx)(n.h4,{id:"union-join-for-unkeyed-table",children:"Union Join for unkeyed table"}),"\n",(0,i.jsx)(n.p,{children:"When neither table has a key, the union join appends the right table to the left table, filling non-common columns with null values."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)trade uj quote\nsym  price qty bid   ask\n--------------------------\nAAPL 123   100\nMSFT 45.9  45\nGOOG 234.4 200\nIBM  20    300\nAAPL           123.1 124.8\nMSFT           46    46.1\nGOOG           245.9 246.2\nIBM            21.9  23.9\nq)quote uj trade\nsym  bid   ask   price qty\n--------------------------\nAAPL 123.1 124.8\nMSFT 46    46.1\nGOOG 245.9 246.2\nIBM  21.9  23.9\nAAPL             123   100\nMSFT             45.9  45\nGOOG             234.4 200\nIBM              20    300\n// Add a common column qty to quote\nq)trade uj update qty:10 20 30 40 from quote\nsym  price qty bid   ask\n--------------------------\nAAPL 123   100\nMSFT 45.9  45\nGOOG 234.4 200\nIBM  20    300\nAAPL       10  123.1 124.8\nMSFT       20  46    46.1\nGOOG       30  245.9 246.2\nIBM        40  21.9  23.9\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Trade and Quote table - Union Join",src:t(10258).A+"",width:"2006",height:"1206"})}),"\n",(0,i.jsx)(n.p,{children:"As demonstrated in the examples above, the union join of two unkeyed tables combines the tables both vertically and horizontally, filling any missing cells with null values. This behavior becomes particularly evident when we examine the first record of the resulting table."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)first trade uj update qty:10 from quote\nsym  | `AAPL\nprice| 123f\nqty  | 100\nbid  | 0n\nask  | 0n\n"})}),"\n",(0,i.jsx)(n.h4,{id:"union-join-for-keyed-tables",children:"Union Join for keyed tables"}),"\n",(0,i.jsx)(n.p,{children:"When performing a union join on two keyed tables, the operation follows upsert semantics for both rows and columns. This behavior is best understood through an example."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)(1!trade) uj 1!quote\nsym | price qty bid   ask\n----| ---------------------\nAAPL| 123   100 123.1 124.8\nMSFT| 45.9  45  46    46.1\nGOOG| 234.4 200 245.9 246.2\nIBM | 20    300 21.9  23.9\n"})}),"\n",(0,i.jsx)(n.p,{children:"Similar to other join operations, if there are common non-key columns, the values from the right operand (table) take precedence."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)trade\nsym  price qty\n--------------\nAAPL 123   100\nMSFT 45.9  45\nGOOG 234.4 200\nIBM  20    300\nq)quote\nsym  bid   ask\n----------------\nAAPL 123.1 124.8\nMSFT 46    46.1\nGOOG 245.9 246.2\nIBM  21.9  23.9\nq)update qty:10 20 from quote where sym in `MSFT`GOOG\nsym  bid   ask   qty\n--------------------\nAAPL 123.1 124.8\nMSFT 46    46.1  10\nGOOG 245.9 246.2 20\nIBM  21.9  23.9\nq)(1!trade) uj 1!update qty:10 20 from quote where sym in `MSFT`GOOG\nsym | price qty bid   ask\n----| ---------------------\nAAPL| 123       123.1 124.8\nMSFT| 45.9  10  46    46.1\nGOOG| 234.4 20  245.9 246.2\nIBM | 20        21.9  23.9\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Trade and Quote table - Union Join Keyed Tables",src:t(17328).A+"",width:"2054",height:"1056"})}),"\n",(0,i.jsx)(n.h4,{id:"the-danger-of-union-joins-handle-with-care",children:"The Danger of Union Joins: Handle with Care"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Spiderman",src:t(83373).A+"",width:"1002",height:"712"})}),"\n",(0,i.jsxs)(n.p,{children:["Like Uncle Ben wisely told Peter Parker in Spider-Man: ",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:'"With great power comes great responsibility."'})}),", the same principle applies to union joins. While incredibly powerful, they require careful handling. The upsert semantics of a union join do not enforce data type conformity, meaning it will upsert values regardless of their type. Let\u2019s examine this in detail."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'q)show t1:([] a:"ABC"; b:1 2 3; c:("tick";"tack";"toe"))\na b c\n----------\nA 1 "tick"\nB 2 "tack"\nC 3 "toe"\nq)show t2:([] a:`A`B`C; b:1 2 3f; c:3?0Ng)\na b c\n----------------------------------------\nA 1 8c6b8b64-6815-6084-0a3e-178401251b68\nB 2 5ae7962d-49f2-404d-5aec-f7c8abbae288\nC 3 5a580fb6-656b-5e69-d445-417ebfe71994\nq)t1 uj t2\na   b  c\n-------------------------------------------\n"A" 1  "tick"\n"B" 2  "tack"\n"C" 3  "toe"\n`A  1f 8c6b8b64-6815-6084-0a3e-178401251b68\n`B  2f 5ae7962d-49f2-404d-5aec-f7c8abbae288\n`C  3f 5a580fb6-656b-5e69-d445-417ebfe71994\n'})}),"\n",(0,i.jsx)(n.p,{children:"As shown in the example above, a union join on two unkeyed tables completely disregards data types. If not approached carefully, this can result in a production run-time nightmare. To avoid such pitfalls, be the (super)hero of your KDB/Q application! Use your power wisely by opting for upsert instead of a union join when your primary goal is to upsert data. Upsert operates by using the amend functionality, either modifying the existing data structure in place or creating a new copy. In doing so, it ensures data type conformity and will throw an error if there is a type mismatch."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)`t1 upsert t2\n'type\n  [0]  `t1 upsert t2\n           ^\nq)upsert\n.[;();,;]\nq)1 2 3 upsert 3 4 5f\n'type\n  [0]  1 2 3 upsert 3 4 5f\n             ^\nq).[1 2 3;();,;4 5 6f]\n'type\n  [0]  .[1 2 3;();,;4 5 6f]\n       ^\nq)1 2 3 union 4 5 6f\n1\n2\n3\n4f\n5f\n6f\nq)union\n?,\nq)1 2 3,4 5 6f\n1\n2\n3\n4f\n5f\n6f\n"})}),"\n",(0,i.jsx)(n.p,{children:"The examples above clearly illustrate that upsert enforces data type conformity and raises a type error if any violations occur. A union join on keyed tables ensures data type conformity for the key column and will only succeed if the key column's data types are consistent. Unfortunately, data type conformity for non-key columns is not enforced."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'q)show t3:([] a:"ABC"; b:3 4 5f; c:3?0Ng)\na b c\n----------------------------------------\nA 3 409031f3-b19c-6770-ee84-6e9369c98697\nB 4 52cb20d9-f12c-9963-2829-3c64d8d8cb14\nC 5 cddeceef-9ee9-3847-9172-3e3d7ab39b26\nq)(1!t1) uj 1!t3\na| b c\n-| --------------------------------------\nA| 3 409031f3-b19c-6770-ee84-6e9369c98697\nB| 4 52cb20d9-f12c-9963-2829-3c64d8d8cb14\nC| 5 cddeceef-9ee9-3847-9172-3e3d7ab39b26\nq)meta t1\nc| t f a\n-| -----\na| c\nb| j\nc| C\nq)meta t2\nc| t f a\n-| -----\na| s\nb| f\nc| g\nq)(1!t1) uj (1!t2)\n\'type\n  [0]  (1!t1) uj (1!t2)\n              ^\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"plus-join-pj",children:["Plus Join ",(0,i.jsx)(n.code,{children:"pj"})]}),"\n",(0,i.jsxs)(n.p,{children:["The plus join ",(0,i.jsx)(n.code,{children:"pj"})," works similar to the left join, with one key difference: it adds non-key columns rather than upserting them. This makes it particularly useful when working with two tables that share identical schemas and have numeric non-key columns. The operands for a plus join are the same as those for a left join, with the added requirement that all non-key columns must be numeric. In this operation, duplicate columns are summed across matching keys, while missing or null values are treated as zero."]}),"\n",(0,i.jsx)(n.h4,{id:"syntax-3",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"table1 pj table2\n"})}),"\n",(0,i.jsx)(n.p,{children:"where"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"table1"})," is either a table or keyed table"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"table2"})," is a keyed table"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)trade pj 1!update qty:10 100 1000 10000 from quote\nsym  price qty   bid   ask\n----------------------------\nAAPL 123   110   123.1 124.8\nMSFT 45.9  145   46    46.1\nGOOG 234.4 1200  245.9 246.2\nIBM  20    10300 21.9  23.9\nq)(1!trade) pj 1!update qty:10 100 1000 10000 from quote\nsym | price qty   bid   ask\n----| -----------------------\nAAPL| 123   110   123.1 124.8\nMSFT| 45.9  145   46    46.1\nGOOG| 234.4 1200  245.9 246.2\nIBM | 20    10300 21.9  23.9\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Trade and Quote table - Plus Join",src:t(37945).A+"",width:"1994",height:"1002"})}),"\n",(0,i.jsxs)(n.h3,{id:"equi-join-ej",children:["Equi Join ",(0,i.jsx)(n.code,{children:"ej"})]}),"\n",(0,i.jsxs)(n.p,{children:["Up until now, all our joins have relied on a key column to determine which records from the tables should match and be included in the result. The equi join ",(0,i.jsx)(n.code,{children:"ej"}),", however, allows you to join two tables even when neither has a primary key. The right operand does not need to be a keyed table. Using the column or list of columns defined as the first parameter, an equi join returns all rows from the right table that match the left table. If the specified column(s) used for matching are unique, the result will be identical to an inner join ",(0,i.jsx)(n.code,{children:"ij"}),". However, in cases where the right table has multiple rows with the same matching criteria, the result will include all these rows, making it more expansive than an inner join. Unlike ",(0,i.jsx)(n.code,{children:"ij"}),", every matching record from the right table is included in the output. Let's illustrate this with an example."]}),"\n",(0,i.jsx)(n.h3,{id:"syntax-4",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"ej[column(List);table1;table2]\n"})}),"\n",(0,i.jsx)(n.p,{children:"where"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"column(List)"})," is a column name or list of column names used to match common records."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"table1"})," can be a table or keyed table"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"table2"})," can be a table or keyed table"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["In this example, we will make a slight modification to our ",(0,i.jsx)(n.code,{children:"quote"})," table. The updated tables are defined as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)show trade:([] sym:`AAPL`MSFT`GOOG`IBM; price:123.0 45.9 234.4 20.0; qty: 100 45 200 300)\nsym  price qty\n--------------\nAAPL 123   100\nMSFT 45.9  45\nGOOG 234.4 200\nIBM  20    300\nq)show quote:([] sym:`AAPL`AAPL`GOOG`GOOG; bid:123.1 46.0 245.9 21.9; ask:124.8 46.1 246.2 23.9)\nsym  bid   ask\n----------------\nAAPL 123.1 124.8\nAAPL 46    46.1\nGOOG 245.9 246.2\nGOOG 21.9  23.9\n"})}),"\n",(0,i.jsxs)(n.p,{children:["As you can see, the ",(0,i.jsx)(n.code,{children:"quote"})," table now includes multiple records for Google and Apple, while no other stocks are represented."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)ej[`sym;trade;quote]\nsym  price qty bid   ask\n--------------------------\nAAPL 123   100 123.1 124.8\nAAPL 123   100 46    46.1\nGOOG 234.4 200 245.9 246.2\nGOOG 234.4 200 21.9  23.9\nq)(1!trade)ij 1!quote\nsym | price qty bid   ask\n----| ---------------------\nAAPL| 123   100 123.1 124.8\nGOOG| 234.4 200 245.9 246.2\nq)(1!trade) lj 1!quote\nsym | price qty bid   ask\n----| ---------------------\nAAPL| 123   100 123.1 124.8\nMSFT| 45.9  45\nGOOG| 234.4 200 245.9 246.2\nIBM | 20    300\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Trade and Quote table - Equi Join",src:t(88201).A+"",width:"1832",height:"1044"})}),"\n",(0,i.jsxs)(n.p,{children:["From the example above, you can observe that the equi join matched the ",(0,i.jsx)(n.code,{children:"trade"})," and ",(0,i.jsx)(n.code,{children:"quote"})," tables using the ",(0,i.jsx)(n.code,{children:"sym"})," column, including all matching records from the right argument, the ",(0,i.jsx)(n.code,{children:"quote"})," table. In contrast, the inner join and left join only matched the first record from the right table to the left table, adhering to the specific logic of inner and left joins, respectively."]}),"\n",(0,i.jsx)(n.h2,{id:"as-of-joins",children:"As-Of-Joins"}),"\n",(0,i.jsxs)(n.p,{children:["Equi or Exact Joins are invaluable when matching datasets with a common key or ID column, such as enhancing a dataset with reference data. However, when working with big data and time series, joining solely on a key column often falls short. In many cases, you need to analyze the state of the world at a specific moment in time or within a certain time range. This is where KDB/Q's native as-of joins, such as the ",(0,i.jsxs)(n.strong,{children:["as-of join ",(0,i.jsx)(n.code,{children:"aj"})]})," and ",(0,i.jsxs)(n.strong,{children:["window join ",(0,i.jsx)(n.code,{children:"wj"})]}),", prove extremely useful."]}),"\n",(0,i.jsx)(n.p,{children:"These joins enable you to recreate the state of the world at a particular point or over a specified time range. A common use case is analyzing the quote just before a trade occurred to assist compliance officers or regulators in understanding the events and verifying if the best bid and ask prices were executed. Another example is calculating the average trade price over a specific time interval before a trade, which can be done using the window join to self-join the trades data."}),"\n",(0,i.jsx)(n.p,{children:"We\u2019ll dive deeper into as-of and window joins, along with practical examples, in the following section."}),"\n",(0,i.jsxs)(n.h3,{id:"as-of-join-aj",children:["As-of Join ",(0,i.jsx)(n.code,{children:"aj"})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsxs)(n.strong,{children:["asof join ",(0,i.jsx)(n.code,{children:"aj"})]})," is a powerful tool for joining tables based on time (or any other ordered ",(0,i.jsx)(n.strong,{children:"nummerical"})," value) columns, retrieving the most recent value in one table as of a given value in another table. The basic as-of join is implemented using the triadic function ",(0,i.jsx)(n.code,{children:"aj"}),". It performs joins along common columns, selecting the most recent matching values. The syntax for ",(0,i.jsx)(n.code,{children:"aj"})," is:"]}),"\n",(0,i.jsx)(n.h4,{id:"syntax-5",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"aj[`c1...`cn; t1; t2]\n"})}),"\n",(0,i.jsx)(n.p,{children:"where"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:" `c1...`cn"})})," is a list of column names (symbols) shared by ",(0,i.jsx)(n.code,{children:"t1"})," and ",(0,i.jsx)(n.code,{children:"t2"}),", the tables to be joined"]}),"\n",(0,i.jsx)(n.li,{children:"The join columns do not need to be keys, although having them as keys can improve performance."}),"\n",(0,i.jsx)(n.li,{children:"All columns from both tables are included in the resulting table."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The logic of ",(0,i.jsx)(n.code,{children:"aj"})," works as follows:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Matches on all specified columns, except the last, are determined using equality."}),"\n",(0,i.jsxs)(n.li,{children:["For the last column (e.g., time), the match identifies the greatest value in ",(0,i.jsx)(n.code,{children:"t2"})," that is less than or equal to the corresponding value in ",(0,i.jsx)(n.code,{children:"t1"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["When the last column represents temporal values, the join effectively finds the value in ",(0,i.jsx)(n.code,{children:"t2"}),' that was valid "as of" the time specified in ',(0,i.jsx)(n.code,{children:"t1"}),". This ensures efficient and meaningful joins, especially when dealing with time-ordered data."]}),"\n",(0,i.jsx)(n.p,{children:"Let\u2019s explore this with an example. In order to do so, we need to modify our trade and quote tables slightly by adding a time column."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)show trades:([] time:10:01:01 10:01:03 10:01:04;sym:`msft`ibm`ge;qty:100 200 150)\ntime     sym  qty\n-----------------\n10:01:01 msft 100\n10:01:03 ibm  200\n10:01:04 ge   150\nq)show quotes:([] time:10:01:00 10:01:01 10:01:01 10:01:02 10:01:03 10:01:05;sym:`ibm`msft`msft`ibm`msft`ibm;px:100 99 101 98 102 97)\ntime     sym  px\n-----------------\n10:01:00 ibm  100\n10:01:01 msft 99\n10:01:01 msft 101\n10:01:02 ibm  98\n10:01:03 msft 102\n10:01:05 ibm  97\nq)aj[`sym`time;trades;quotes]\ntime     sym  qty px\n---------------------\n10:01:01 msft 100 101\n10:01:03 ibm  200 98\n10:01:04 ge   150\n"})}),"\n",(0,i.jsx)(n.p,{children:"At first glance, the as-of join might seem complex, but it becomes much clearer when you work through an example step by step. Let\u2019s do exactly that with the example above:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["We start with the first record in the ",(0,i.jsx)(n.code,{children:"trades"})," table: We look for a ",(0,i.jsx)(n.code,{children:"quotes"})," records matching ",(0,i.jsx)(n.code,{children:"msft"})," as of the trade time ",(0,i.jsx)(n.code,{children:"10:01:01"}),". There are two such records where the time in ",(0,i.jsx)(n.code,{children:"t2"})," is less than or equal than the time in ",(0,i.jsx)(n.code,{children:"t1"}),", both stamped ",(0,i.jsx)(n.code,{children:"10:01:01"}),". The last one has a price of ",(0,i.jsx)(n.code,{children:"101"}),", which is included in the result. Remember: the match identifies the greatest value in ",(0,i.jsx)(n.code,{children:"t2"})," that is less than or equal to the corresponding ",(0,i.jsx)(n.code,{children:"time"})," value in ",(0,i.jsx)(n.code,{children:"t1"}),". Therefore, everything that occured after the timestamp in ",(0,i.jsx)(n.code,{children:"t1"})," for this particular record is ignored. E.g ",(0,i.jsx)(n.code,{children:"msft"})," at ",(0,i.jsx)(n.code,{children:"10:01:03"})]}),"\n",(0,i.jsxs)(n.li,{children:["Then, move to the second record in the ",(0,i.jsx)(n.code,{children:"trades"})," table: For ",(0,i.jsx)(n.code,{children:"ibm"})," as of ",(0,i.jsx)(n.code,{children:"10:01:03"}),", the last matching quote record is stamped ",(0,i.jsx)(n.code,{children:"10:01:02"})," with a price of ",(0,i.jsx)(n.code,{children:"98"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["For the final record in our ",(0,i.jsx)(n.code,{children:"trades"})," table: The symbol ",(0,i.jsx)(n.code,{children:"ge"})," at ",(0,i.jsx)(n.code,{children:"10:01:04"}),", there are no matching quote records."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Trade and Quote table - Asof Join",src:t(63226).A+"",width:"3276",height:"1258"})}),"\n",(0,i.jsxs)(n.p,{children:["By walking through the process systematically, you can see how the as-of join matches and retrieves the most relevant records. There are some key observations to note. First, the last column specified in the column names parameter does not have to be named ",(0,i.jsx)(n.code,{children:"time"}),"; it can have any name, as long as the column exists in both tables. Furthermore, this column doesn\u2019t need to be of a temporal data type - the type can be any numerical value. This flexibility comes from the fact that temporal data types in KDB/Q are internally represented as numerical values, storing a float that reflects the fractional day count from midnight on January 1, 2000."]}),"\n",(0,i.jsx)(n.p,{children:"We can quickly validate these points by making adjustments to our trades and quotes tables."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)show tradesNew:([] whatever:1 3 4;sym:`msft`ibm`ge;qty:100 200 150)\nwhatever sym  qty\n-----------------\n1        msft 100\n3        ibm  200\n4        ge   150\nq)show quotesNew:([] whatever:0 1 1 2;sym:`ibm`msft`msft`ibm;px:100 99 101 98)\nwhatever sym  px\n-----------------\n0        ibm  100\n1        msft 99\n1        msft 101\n2        ibm  98\nq)aj[`sym`whatever;tradesNew;quotesNew]\nwhatever sym  qty px\n---------------------\n1        msft 100 101\n3        ibm  200 98\n4        ge   150\nq)aj[`sym`time;trades;quotes]\ntime     sym  qty px\n---------------------\n10:01:01 msft 100 101\n10:01:03 ibm  200 98\n10:01:04 ge   150\nq)aj[`sym`whatever;update whatever:`int$time from trades;update whatever:`int$time from quotes]\ntime     sym  qty whatever px\n------------------------------\n10:01:01 msft 100 36061    101\n10:01:02 ibm  200 36063    98\n10:01:04 ge   150 36064\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The result of an asof join ",(0,i.jsx)(n.code,{children:"aj"})," includes all columns from the right table except those used for matching. The columns used in the exact match remain the same between the two tables, but the temporal column (or more generally, the last column) will differ. In an asof join ",(0,i.jsx)(n.code,{children:"aj"}),", the value from the left table takes precedence. If you want the value from the right table instead - such as the timestamp of the matching quote rather than the trade's timestamp - you can use ",(0,i.jsx)(n.code,{children:"aj0"}),", which has the exact same syntax as ",(0,i.jsx)(n.code,{children:"aj"})," but returns the time from the right table."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)trades\ntime     sym  qty\n-----------------\n10:01:01 msft 100\n10:01:03 ibm  200\n10:01:04 ge   150\nq)quotes\ntime     sym  px\n-----------------\n10:01:00 ibm  100\n10:01:01 msft 99\n10:01:01 msft 101\n10:01:02 ibm  98\nq)aj[`sym`time;trades;quotes]\ntime     sym  qty px\n---------------------\n10:01:01 msft 100 101\n10:01:03 ibm  200 98\n10:01:04 ge   150\nq)aj0[`sym`time;trades;quotes]\ntime     sym  qty px\n---------------------\n10:01:01 msft 100 101\n10:01:02 ibm  200 98\n10:01:04 ge   150\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["Everything else remains the same. The only difference between ",(0,i.jsx)(n.code,{children:"aj"})," and ",(0,i.jsx)(n.code,{children:"aj0"})," is that ",(0,i.jsx)(n.code,{children:"aj0"})," returns the time column (or the last column) from the right table instead of the one from the left table."]})}),"\n",(0,i.jsx)(n.h4,{id:"navigating-the-pitfalls-the-hidden-dangers-of-as-of-joins",children:"Navigating the Pitfalls: The Hidden Dangers of As-Of Joins"}),"\n",(0,i.jsxs)(n.p,{children:["Although the asof ",(0,i.jsx)(n.code,{children:"aj"})," join doesn't seem that complicated once you're familiar with its syntax and logic, there's a very important detail you must always remember. Both the asof ",(0,i.jsx)(n.code,{children:"aj"})," and the window join ",(0,i.jsx)(n.code,{children:"wj"})," use a binary search algorithm to locate the appropriate records for joining. For this to work correctly, the temporal column - or more generally, the last column specified - must be in ascending order within the partitions defined by the preceding columns."]}),"\n",(0,i.jsxs)(n.p,{children:["This requirement is not enforced by KDB/Q, so no error is thrown if the temporal column isn't sorted. Instead, the operation will produce incorrect results - essentially garbage. ",(0,i.jsx)(n.strong,{children:"To emphasize"}),": all columns except the last one specified in the join parameter are used to filter records for an exact match and narrow the rows. The binary search is then performed within this narrowed set, where the temporal (or last) column must be sorted."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, if the ",(0,i.jsx)(n.code,{children:"sym"})," column is used for matching, the temporal column (e.g., ",(0,i.jsx)(n.code,{children:"time"}),") must be sorted within each ",(0,i.jsx)(n.code,{children:"sym"})," group for the join to work as intended."]}),"\n",(0,i.jsxs)(n.h3,{id:"window-join-wj",children:["Window Join ",(0,i.jsx)(n.code,{children:"wj"})]}),"\n",(0,i.jsx)(n.p,{children:"Sometimes, focusing on a single point in time isn't sufficient to answer our questions, and we may need to consider a time range or window instead of just a specific moment. This is where the window join proves invaluable. Contrary to popular belief, the window join is not a special case of the asof join; rather, the asof join is a specific instance of the more generalized window join."}),"\n",(0,i.jsx)(n.p,{children:"While the asof join provides a snapshot of the current state at a specific moment in time, the window join aggregates values of specified columns within defined intervals, making it particularly useful for analyzing the relationship between trades and quotes in financial data. The core idea is to investigate how quotes behave in the vicinity of a trade."}),"\n",(0,i.jsx)(n.p,{children:"For instance, to evaluate the execution quality of a trade, you may need to examine the range of bid and ask prices prevailing around the trade time. Unlike the asof join, which only looks back in time, the window join enables both backward - and forward-looking analysis. Additionally, while the asof join captures the state of the world at a particular time by selecting the last value before that moment, the window join facilitates more comprehensive analysis. It allows you to compute functions such as averages, medians, or any other summarizations over records within the specified time window."}),"\n",(0,i.jsx)(n.p,{children:"The syntax for the window join is arguably the most complex, so let's break it down step by step and illustrate it with an example."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-6",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"wj [w; c; t; (q; (f0;c0); (f1;c1))]\nwj1[w; c; t; (q; (f0;c0); (f1;c1))]\n"})}),"\n",(0,i.jsx)(n.p,{children:"where"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"t"})," and ",(0,i.jsx)(n.code,{children:"q"})," are simple tables to be joined. The table ",(0,i.jsx)(n.code,{children:"q"})," must be sorted by ",(0,i.jsx)(n.code,{children:"sym"})," and ",(0,i.jsx)(n.code,{children:"time"}),", with the parted ",(0,i.jsx)(n.code,{children:"p"})," attribute on ",(0,i.jsx)(n.code,{children:"sym"}),". Starting from ",(0,i.jsx)(n.code,{children:"version 4.1t"})," (2023.08.04), if ",(0,i.jsx)(n.code,{children:"t"})," is provided as a table name, it will be updated in place."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"w"})," represents a pair of lists containing the start and end of the time intervals"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"c"})," specifies the common column names, such as ",(0,i.jsx)(n.code,{children:"sym"})," and ",(0,i.jsx)(n.code,{children:"time"}),", which must be of integral data types."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"f0"})," and ",(0,i.jsx)(n.code,{children:"f1"})," are aggregation functions applied to the values in ",(0,i.jsx)(n.code,{children:"q"})," columns ",(0,i.jsx)(n.code,{children:"c0"})," and ",(0,i.jsx)(n.code,{children:"c1"})," over the defined intervals."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["For each record in ",(0,i.jsx)(n.code,{children:"t"}),", the result includes additional columns ",(0,i.jsx)(n.code,{children:"c0"})," and ",(0,i.jsx)(n.code,{children:"c1"}),", which store the results of the aggregation functions applied to the matching intervals in ",(0,i.jsx)(n.code,{children:"w"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"A typical use case might be:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"wj[w;`sym`time;trade;(quote;(max;`ask);(min;`bid))]\n"})}),"\n",(0,i.jsxs)(n.admonition,{type:"tip",children:[(0,i.jsx)(n.p,{children:"To view all the values within each window, use the identity function :: instead of aggregation functions.\nE.g."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"wj[w;c;t;(q;(::;c0);(::;c1))]\n"})})]}),"\n",(0,i.jsxs)(n.p,{children:["Let\u2019s go through an example to better understand how the window join works. Our example is inspired by the official documentation in ",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Q for Mortals"})}),", which you can find ",(0,i.jsx)(n.a,{href:"https://code.kx.com/q4m3/9_Queries_q-sql/#999-window-join",children:"here"})," For symplicity we will only consider trades and quotes for Apple."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)show trades:([]sym:3#`aapl;time:09:30:01 09:30:04 09:30:08;price:100 103 101)\nsym  time     price\n-------------------\naapl 09:30:01 100\naapl 09:30:04 103\naapl 09:30:08 101\nq)show quotes::([] sym:8#`aapl;time:09:30:01+(til 5),7 8 9;ask:101 103 103 104 104 103 102 100;bid:98 99 102 103 103 100 100 99)\nsym  time     ask bid\n---------------------\naapl 09:30:01 101 98\naapl 09:30:02 103 99\naapl 09:30:03 103 102\naapl 09:30:04 104 103\naapl 09:30:05 104 103\naapl 09:30:08 103 100\naapl 09:30:09 102 100\naapl 09:30:10 100 99\n"})}),"\n",(0,i.jsxs)(n.p,{children:["First, we create fixed-width time windows spanning 2 seconds before and 1 second after each trade time. (Note that the windows don't have to be of uniform width.) To achieve this, we extract the ",(0,i.jsx)(n.code,{children:"time"})," column from our trades table and use the each-right iterator to add -2 and 1 seconds to each time value, effectively subtracting 2 seconds and adding 1 second to each time value, creating a pair of lists representing the time intervals for each trade."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)show w:-2 1+\\:trades`time\n09:29:59 09:30:02 09:30:06\n09:30:02 09:30:05 09:30:09\n"})}),"\n",(0,i.jsx)(n.p,{children:"Now, let\u2019s examine the actual syntax of the window join and break it down step by step."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"wj[w;`sym`time;trades;(quotes;(::;`ask);(::;`bid))]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The first parameter in our window join, ",(0,i.jsx)(n.code,{children:"w"})," is the list of time windows we created earlier. This is followed by a list of column names, ",(0,i.jsx)(n.code,{children:"sym"})," and ",(0,i.jsx)(n.code,{children:"time"})," in this case, which specify the common columns between the tables. Next, we have the ",(0,i.jsx)(n.code,{children:"trades"})," table, which serves as the left table in the join. The final parameter is a list containing the ",(0,i.jsx)(n.code,{children:"quotes"})," table and a pair of lists, each pairing an aggregate function with a column name."]}),"\n",(0,i.jsxs)(n.p,{children:["To view all the values within each window, we used the identity function ",(0,i.jsx)(n.code,{children:"::"})," instead of an aggregate function. This produces a result similar to grouping without applying any aggregation, which can be useful for visualizing the data included in each window."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)wj[w;`sym`time;trades;(quotes;(::;`ask);(::;`bid))]\nsym  time     price ask             bid\n--------------------------------------------------\naapl 09:30:01 100   101 103         98 99\naapl 09:30:04 103   103 103 104 104 99 102 103 103\naapl 09:30:08 101   104 103 102     103 100 100\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Trade and Quote table - Window Join",src:t(15634).A+"",width:"2474",height:"867"})}),"\n",(0,i.jsxs)(n.p,{children:["The syntax for the ",(0,i.jsx)(n.code,{children:"wj1"})," window join is identical to that of ",(0,i.jsx)(n.code,{children:"wj"}),". The difference lies in how the time window interval is interpreted. In ",(0,i.jsx)(n.code,{children:"wj"}),", the prevailing quote at the start of the window is included, reflecting the step-function nature of quotes. However, ",(0,i.jsx)(n.code,{children:"wj1"})," considers only quotes that arrive on or after the window's start."]}),"\n",(0,i.jsxs)(n.p,{children:["If your analysis requires quotes starting precisely from the beginning of the interval, you should use ",(0,i.jsx)(n.code,{children:"wj1"}),". For further details, refer to the official documentation, as ",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Q for Mortals"})}),"  is outdated in this regard. You can find the updated reference ",(0,i.jsx)(n.a,{href:"https://code.kx.com/q/ref/wj/#interval-behavior",children:"here"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)wj1[w;`sym`time;trades;(quotes;(::;`ask);(::;`bid))]\nsym  time     price ask             bid\n--------------------------------------------------\naapl 09:30:01 100   101 103         98 99\naapl 09:30:04 103   103 103 104 104 99 102 103 103\naapl 09:30:08 101   103 102         100 100\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Trade and Quote table - Window Join wj1",src:t(7665).A+"",width:"2447",height:"862"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["The key distinction between window join ",(0,i.jsx)(n.code,{children:"wj"})," and ",(0,i.jsx)(n.code,{children:"wj1"})," lies in how they handle interval behavior. Both, ",(0,i.jsx)(n.code,{children:"wj"})," and ",(0,i.jsx)(n.code,{children:"wj1"})," operate on ",(0,i.jsx)(n.code,{children:"[]"})," intervals, meaning they consider quotes that are \u2265 the beginning and \u2264 the end of the interval. With ",(0,i.jsx)(n.code,{children:"wj"}),", the prevailing quote at the start of the window is considered valid, as quotes are treated as a step function. This is evident in the first example, where the second window ",(0,i.jsx)(n.code,{children:"window2"})," includes the prevailing bid and ask prices as valid. In contrast, this is not the case with the ",(0,i.jsx)(n.code,{children:"wj1"})," join. For ",(0,i.jsx)(n.code,{children:"wj1"}),", only quotes on or after the start of the window are considered. If your use case requires quotes to be included from the beginning of the interval, you should use ",(0,i.jsx)(n.code,{children:"wj1"})]})}),"\n",(0,i.jsx)(n.p,{children:"Additionally, you can perform various analyses on the selected columns within the time range of the window join. For instance, you can calculate averages, minimums, maximums, medians, or standard deviations."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)wj[w;`sym`time;trades;(quotes;(min;`ask);(min;`bid))]\nsym  time     price ask bid\n---------------------------\naapl 09:30:01 100   101 98\naapl 09:30:04 103   103 99\naapl 09:30:08 101   102 100\nq)wj[w;`sym`time;trades;(quotes;(max;`ask);(max;`bid))]\nsym  time     price ask bid\n---------------------------\naapl 09:30:01 100   103 99\naapl 09:30:04 103   104 103\naapl 09:30:08 101   104 103\nq)wj[w;`sym`time;trades;(quotes;(med;`ask);(med;`bid))]\nsym  time     price ask   bid\n-------------------------------\naapl 09:30:01 100   102   98.5\naapl 09:30:04 103   103.5 102.5\naapl 09:30:08 101   103   100\nq)wj[w;`sym`time;trades;(quotes;(sdev;`ask);(sdev;`bid))]\nsym  time     price ask       bid\n---------------------------------------\naapl 09:30:01 100   1.414214  0.7071068\naapl 09:30:04 103   0.5773503 1.892969\naapl 09:30:08 101   1         1.732051\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)wj[w;`sym`time;trades;(quotes;(avg;`ask);(avg;`bid))]\nsym  time     price ask   bid\n--------------------------------\naapl 09:30:01 100   102   98.5\naapl 09:30:04 103   103.5 101.75\naapl 09:30:08 101   103   101\nq)wj1[w;`sym`time;trades;(quotes;(avg;`ask);(avg;`bid))]\nsym  time     price ask   bid\n--------------------------------\naapl 09:30:01 100   102   98.5\naapl 09:30:04 103   103.5 101.75\naapl 09:30:08 101   102.5 100\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Trade and Quote table - Window Join wj wj1 Comparison",src:t(64869).A+"",width:"2456",height:"874"})}),"\n",(0,i.jsx)(n.h4,{id:"window-joins-mind-the-edge-before-you-lean-too-far",children:"Window Joins: Mind the Edge Before You Lean Too Far"}),"\n",(0,i.jsxs)(n.p,{children:["When performing a window join, several critical constraints must be adhered to. First, similar to the asof join, the data must be sorted - first by the key identifier used for the exact match (e.g., ",(0,i.jsx)(n.code,{children:"sym"})," in this case) and then by time within each identifier partition. Additionally, the parted attribute ",(0,i.jsx)(n.code,{children:"p"})," must be applied to the identifier column. Unlike other joins, which may tolerate unpartitioned data or function correctly with the grouped ",(0,i.jsx)(n.code,{children:"g"})," attribute, the window join strictly requires the parted attribute."]}),"\n",(0,i.jsx)(n.p,{children:"While the query will execute without errors even if these conditions are not met, the resulting output will be meaningless. This requirement also makes the window join unsuitable for real-time data, such as that in the Real-Time Database (RDB). Instead, it is designed for use with historical data stored in the Historical Database (HDB), where the parted attribute has been correctly applied."}),"\n",(0,i.jsxs)(n.h3,{id:"as-of-asof",children:["As of ",(0,i.jsx)(n.code,{children:"asof"})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"asof"})," operator is a simplified version of the ",(0,i.jsx)(n.code,{children:"asof join aj"})," enabling you to perform the same type of match as ",(0,i.jsx)(n.code,{children:"aj"})," but between a table and a single record. It returns the remaining columns from the matched row in the table."]}),"\n",(0,i.jsx)(n.h4,{id:"syntax-7",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"t1 asof t2     asof[t1;t2]\n"})}),"\n",(0,i.jsx)(n.p,{children:"where"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"t1"})," is a table"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"t2"})," is a table or dictionary"]}),"\n",(0,i.jsxs)(n.li,{children:["the last key or column of ",(0,i.jsx)(n.code,{children:"t2"})," corresponds to a time column in ",(0,i.jsx)(n.code,{children:"t1"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["and returns the values from the last rows matching the rest of the keys and time \u2264 the time in ",(0,i.jsx)(n.code,{children:"t2"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)show trades:([] time:10:01:01 10:01:03 10:01:04; sym:`msft`ibm`ge; qty:100 200 150; px:45 160 55)\ntime     sym  qty px\n---------------------\n10:01:01 msft 100 45\n10:01:03 ibm  200 160\n10:01:04 ge   150 55\nq)trades asof `sym`time!(`ibm;10:01:03)\nqty| 200\npx | 160\n"})}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsxs)(n.p,{children:["As shown in the example above, the result does not include the columns from the original dictionary used for the match. To include these columns in the result, save them into a variable and prepend them to the output of the ",(0,i.jsx)(n.code,{children:"asof"})," operation."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)d,trades asof d:`sym`time!(`ibm;10:01:03)\nsym | `ibm\ntime| 10:01:03\nqty | 200\npx  | 160\n"})})]}),"\n",(0,i.jsxs)(n.p,{children:["You can also use a list of conforming dictionary records \u2013 i.e., a table \u2013 to perform ",(0,i.jsx)(n.code,{children:"asof"})," matches against each reacord."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)trades asof ([] sym:`msft`ibm; time:10:01:01 10:01:03)\nqty px\n-------\n100 45\n200 160\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Prepending the original ",(0,i.jsx)(n.code,{children:"asof"})," records to the result:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)t,'trades asof t:([] sym:`msft`ibm; time:10:01:01 10:01:03)\nsym  time     qty px\n---------------------\nmsft 10:01:01 100 45\nibm  10:01:03 200 160\n"})}),"\n",(0,i.jsx)(n.h2,{id:"performance-considerations",children:"Performance considerations"}),"\n",(0,i.jsx)(n.p,{children:"In the next section, we will explore various performance optimizations for different types of joins, starting with the obvious and basic strategies before progressing to more advanced techniques."}),"\n",(0,i.jsx)(n.h4,{id:"join-smart-only-the-data-you-need",children:"Join Smart: Only the Data You Need"}),"\n",(0,i.jsx)(n.p,{children:"When performing joins like left join, inner join, or union join, all non-common columns from the right table are added to the left table if their key columns match. For large datasets, this means a significant amount of data is appended, which can impact performance due to the overhead of copying data. To optimize performance, it\u2019s better to select only the columns you need for the join. The following examples demonstrate this approach."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Non Optimal Query"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"table1 lj table2\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optimised Query"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"lj[select sym,time,exchange,price from trades where sym in `AAPL`MSFT;\n   1!select sym,description from referenceData where sym in `AAPL`MSFT]\n"})}),"\n",(0,i.jsx)(n.h4,{id:"boost-your-joins-with-kdbqs-secret-weapon-attributes",children:"Boost Your Joins with KDB/Q's Secret Weapon: Attributes"}),"\n",(0,i.jsx)(n.p,{children:"A key performance enhancement for running queries in KDB/Q lies in its powerful feature: attributes. Attributes are metadata you can apply to lists that follow a specified order, significantly improving query performance - including joins. Joining datasets requires identifying matching keys, an operation that becomes increasingly time-consuming as datasets grow larger."}),"\n",(0,i.jsx)(n.p,{children:"The efficiency of a join operation depends on how quickly KDB/Q can locate all matching records for the key column(s) in both tables. If no attributes are applied to the key column(s), the system defaults to a sequential, linear search. However, by applying an attribute, the linear search is replaced with a faster binary search, drastically improving join performance and delivering results much quicker."}),"\n",(0,i.jsx)(n.p,{children:"Instead of performing a join without attributes, such as"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"aj[`sym`time;trades;quotes]\n"})}),"\n",(0,i.jsx)(n.p,{children:"you should use"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"aj[`sym`time;trades;update `g#sym from quotes]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["applying the grouped ",(0,i.jsx)(n.code,{children:"g"})," attribute to the key column."]}),"\n",(0,i.jsx)(n.h4,{id:"optimising-asof-join-performance-tips-and-tricks",children:"Optimising Asof Join Performance: Tips and Tricks"}),"\n",(0,i.jsxs)(n.p,{children:["First and foremost, ensure that the columns specified as the first argument of the asof join are in the correct order, such as ",(0,i.jsx)(n.code,{children:"`sym`time"}),". Incorrect ordering can lead to significant performance degradation. Next, leverage attributes for performance optimization. For in-memory asof joins, apply the grouped ",(0,i.jsx)(n.code,{children:"g"})," attribute to the key column of ",(0,i.jsx)(n.code,{children:"table2"})," and sort the records by time within this grouped column. For on-disk data, ensure the parted ",(0,i.jsx)(n.code,{children:"p"})," attribute is applied to the key column, with records sorted by time within each partition."]}),"\n",(0,i.jsx)(n.p,{children:"Additionally, when performing asof joins on disk-stored data, select only the columns needed for the join. KDB/Q uses memory mapping and loads columns into memory only when required. Reducing the number of columns involved in the join will greatly enhance query performance by limiting memory usage to essential data."}),"\n",(0,i.jsx)(n.p,{children:"Lastly, only select the virtual partition column if it is explicitly needed, as it is generated on demand, which can be time-consuming for large partitions."}),"\n",(0,i.jsx)(n.h5,{id:"dont-lose-your-attributes",children:"Don't Lose Your Attributes"}),"\n",(0,i.jsxs)(n.p,{children:["When saving data to disk, we typically partition by date and apply the parted attribute to the ",(0,i.jsx)(n.code,{children:"sym"})," column within each partition. As we\u2019ve learned, attributes can greatly enhance query performance, making their use a best practice. But what happens when we load data from disk into memory and query a time range that spans multiple days? Will the parted attribute persist if we query several days worth of data? Or will it be lost?"]}),"\n",(0,i.jsx)(n.p,{children:"For the purpose of this exercise, I have created a small, simple Historical Database (HDB), containing a trades and quotes table spanning a few days. The structure is as below"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"alexanderunterrainer@Mac:~/repos/test|\u21d2  ls -l\ntotal 8\ndrwxr-xr-x@ 4 alexanderunterrainer  staff  128 13 Dec 17:06 2024.12.09\ndrwxr-xr-x@ 4 alexanderunterrainer  staff  128 13 Dec 17:06 2024.12.10\ndrwxr-xr-x@ 4 alexanderunterrainer  staff  128 13 Dec 17:06 2024.12.11\ndrwxr-xr-x@ 4 alexanderunterrainer  staff  128 13 Dec 17:06 2024.12.12\ndrwxr-xr-x@ 4 alexanderunterrainer  staff  128 13 Dec 17:06 2024.12.13\n-rw-r--r--@ 1 alexanderunterrainer  staff   23 13 Dec 17:02 sym\n"})}),"\n",(0,i.jsx)(n.p,{children:"We can now start a KDB/Q process and load our data"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"alexanderunterrainer@Mac:~/repos/test|\u21d2  qq .\nKDB+ 4.0 2023.01.20 Copyright (C) 1993-2023 Kx Systems\nm64/ 8(24)core 24576MB alexanderunterrainer mac 192.168.1.142 EXPIRE 2025.02.21 KDB PLUS TRIAL #5018719\nq)\\l .\nq)tables[]\n`s#`quotes`trades\nq)t!{count value x}each t:tables[]\nquotes| 50\ntrades| 50\nq)select count i by date from trades\ndate      | x\n----------| --\n2024.12.09| 10\n2024.12.10| 10\n2024.12.11| 10\n2024.12.12| 10\n2024.12.13| 10\nq)select count i by date from quotes\ndate      | x\n----------| --\n2024.12.09| 10\n2024.12.10| 10\n2024.12.11| 10\n2024.12.12| 10\n2024.12.13| 10\nq)meta trades\nc   | t f a\n----| -----\ndate| d\nsym | s   p\ntime| v\nqty | j\npx  | f\nq)meta quotes\nc   | t f a\n----| -----\ndate| d\nsym | s   p\ntime| v\nbid | f\nask | f\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Our Historical Database (HDB) includes two tables, ",(0,i.jsx)(n.code,{children:"trades"})," and ",(0,i.jsx)(n.code,{children:"quotes"}),", each containing a total of 50 records, distributed as 10 records per day over a span of 5 days. By examining the metadata of these tables using the ",(0,i.jsx)(n.code,{children:"meta"})," operator, we can confirm that the parted attribute ",(0,i.jsx)(n.code,{children:"p"})," is applied to the sym column in both tables. When we query either table for a specific day and verify the metadata, we observe that the parted attribute remains intact."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)meta select from trades where date=2024.12.13\nc   | t f a\n----| -----\ndate| d\nsym | s   p\ntime| v\nqty | j\npx  | f\nq)meta select from quotes where date=2024.12.13\nc   | t f a\n----| -----\ndate| d\nsym | s   p\ntime| v\nbid | f\nask | f\n"})}),"\n",(0,i.jsx)(n.p,{children:"Interestingly (and perhaps unexpectedly for some), querying the tables for a date range results in the parted attribute being removed."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)meta select from trades where date within 2024.12.10 2024.12.13\nc   | t f a\n----| -----\ndate| d\nsym | s\ntime| v\nqty | j\npx  | f\nq)meta select from quotes where date within 2024.12.10 2024.12.13\nc   | t f a\n----| -----\ndate| d\nsym | s\ntime| v\nbid | f\nask | f\n"})}),"\n",(0,i.jsxs)(n.p,{children:["But should this really come as a surprise? Not quite. Examining the data, we notice that querying a range of dates returns the results ordered by date, not by the ",(0,i.jsx)(n.code,{children:"sym"})," This behavior makes perfect sense, as the Historical Database (HDB) is primarily partitioned by date, with the ",(0,i.jsx)(n.code,{children:"sym"})," column partitioned only within each individual date. When querying a date range, the data is retrieved exactly as it is stored on disk, preserving this structure."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)select from trades where date within (2024.12.10;2024.12.13),i<5\ndate       sym  time     qty px\n-------------------------------------\n2024.12.10 aapl 02:15:30 11  28.2223\n2024.12.10 aapl 02:27:56 57  18.70281\n2024.12.10 aapl 18:20:20 74  44.18975\n2024.12.10 goog 11:20:03 28  44.6898\n2024.12.10 goog 21:02:21 54  79.32503\n2024.12.11 aapl 15:19:46 61  14.29403\n2024.12.11 aapl 16:26:35 59  49.53894\n2024.12.11 aapl 18:11:13 16  65.76692\n2024.12.11 goog 02:15:01 52  56.78577\n2024.12.11 goog 15:08:29 3   97.55778\n2024.12.12 aapl 00:18:37 52  27.85781\n2024.12.12 aapl 02:46:34 38  30.64804\n2024.12.12 aapl 14:04:50 57  72.42412\n2024.12.12 aapl 15:12:09 50  98.86591\n2024.12.12 goog 11:36:19 79  78.44527\n2024.12.13 aapl 02:06:01 43  68.67425\n2024.12.13 aapl 17:37:16 9   68.45319\n2024.12.13 goog 15:33:46 13  16.47619\n2024.12.13 goog 16:28:17 79  92.76588\n2024.12.13 goog 21:26:55 64  71.08719\n"})}),"\n",(0,i.jsx)(n.p,{children:"Is losing attributes really that problematic? Unfortunately, yes, it is. We've seen how attributes significantly enhance query performance, especially with large datasets. Conversely, running queries without attributes applied means the operations become less efficient, leading to a noticeable performance hit."}),"\n",(0,i.jsxs)(n.p,{children:["Fortunately, there's an easy solution to this problem. As we've seen in an earlier example, querying data for a single day preserves the parted attribute since the data is parted by ",(0,i.jsx)(n.code,{children:"sym"})," within each day. By leveraging this behavior and using iterators, we can create a lambda function (an anonymous function) to iterate over a list of dates, querying one day at a time. This ensures that the parted attribute remains intact. The result of such a query is a list of tables, which can then be combined into a single table using the ",(0,i.jsx)(n.code,{children:"raze"})," operator."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"// Using a lambda to query each date art a time returns a list of tables\nq){ aj[`sym`time;select from trades where date=x;select from quotes where date=x]} each 2024.12.09 2024.12.10 2024.12.11 2024.12.12\n+`date`sym`time`qty`px`bid`ask!(2024.12.09 2024.12.09 2024.12.09 2024.12.09 2..\n+`date`sym`time`qty`px`bid`ask!(2024.12.10 2024.12.10 2024.12.10 2024.12.10 2..\n+`date`sym`time`qty`px`bid`ask!(2024.12.11 2024.12.11 2024.12.11 2024.12.11 2..\n+`date`sym`time`qty`px`bid`ask!(2024.12.12 2024.12.12 2024.12.12 2024.12.12 2..\n// You can observe that each individual element is in fact a table\nq)first { aj[`sym`time;select from trades where date=x;select from quotes where date=x]} each 2024.12.09 2024.12.10 2024.12.11 2024.12.12\ndate       sym  time     qty px       bid      ask\n-------------------------------------------------------\n2024.12.09 aapl 12:28:12 12  34.93533 38.39793 38.78682\n2024.12.09 aapl 20:12:34 17  63.35864 76.04912 76.86455\n2024.12.09 goog 01:08:14 89  95.54843\n2024.12.09 goog 04:47:02 26  21.7258  59.37708 59.55671\n2024.12.09 goog 04:48:15 27  22.57321 59.37708 59.55671\n2024.12.09 goog 05:37:39 44  88.60093 97.53188 97.55164\n2024.12.09 goog 07:30:19 57  71.99879 97.53188 97.55164\n2024.12.09 goog 10:11:22 37  66.08195 97.53188 97.55164\n2024.12.09 goog 10:15:57 68  97.89487 97.53188 97.55164\n2024.12.09 goog 11:35:23 58  91.17688 24.69932 24.74801\n// Applying raze to this list will combine all elements into a single table\nq)raze{ aj[`sym`time;select from trades where date=x;select from quotes where date=x]} each 2024.12.09 2024.12.10 2024.12.11 2024.12.12\ndate       sym  time     qty px       bid      ask\n-------------------------------------------------------\n2024.12.09 aapl 12:28:12 12  34.93533 38.39793 38.78682\n2024.12.09 aapl 20:12:34 17  63.35864 76.04912 76.86455\n2024.12.09 goog 01:08:14 89  95.54843\n2024.12.09 goog 04:47:02 26  21.7258  59.37708 59.55671\n2024.12.09 goog 04:48:15 27  22.57321 59.37708 59.55671\n2024.12.09 goog 05:37:39 44  88.60093 97.53188 97.55164\n2024.12.09 goog 07:30:19 57  71.99879 97.53188 97.55164\n2024.12.09 goog 10:11:22 37  66.08195 97.53188 97.55164\n2024.12.09 goog 10:15:57 68  97.89487 97.53188 97.55164\n2024.12.09 goog 11:35:23 58  91.17688 24.69932 24.74801\n2024.12.10 aapl 02:15:30 11  28.2223\n2024.12.10 aapl 02:27:56 57  18.70281\n2024.12.10 aapl 18:20:20 74  44.18975 34.64666 34.70822\n2024.12.10 goog 11:20:03 28  44.6898  86.7695  87.26624\n2024.12.10 goog 21:02:21 54  79.32503 1.318344 2.207291\n2024.12.10 msft 02:39:17 73  35.95293\n2024.12.10 msft 09:13:50 39  48.09078 23.71334 24.2586\n2024.12.10 msft 13:25:26 39  13.16095 23.71334 24.2586\n2024.12.10 msft 14:39:50 28  63.33324 23.71334 24.2586\n2024.12.10 msft 17:22:33 11  69.90336 23.71334 24.2586\n..\n"})}),"\n",(0,i.jsx)(n.p,{children:"This technique will be a valuable addition to your KDB/Q toolkit the next time you need to query a large dataset spanning multiple dates."}),"\n",(0,i.jsx)(n.h2,{id:"tips-and-tricks",children:"Tips and Tricks"}),"\n",(0,i.jsx)(n.p,{children:"Sometimes, joining multiple datasets is necessary to achieve the desired result. However, in longer queries, this can lead to messy and unreadable code, making it harder to maintain and less accessible for your fellow KDB/Q colleagues."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'q)((select open:first px,low:min px, high:max px, close:last px by sym from trades) lj select by sym from quotes) lj 1!reference\nsym | open     low      high     close    date       time     bid      ask      description\n----| --------------------------------------------------------------------------------------\naapl| 34.93533 14.29403 98.86591 68.45319 2024.12.13 18:12:53 91.26417 91.30803 "Apple Inc"\ngoog| 95.54843 16.47619 97.89487 21.4076  2024.12.13 12:28:42 46.10987 46.54357 "Google Inc"\nmsft| 35.95293 1.280633 92.56132 56.10808 2024.12.13 10:25:30 80.95108 81.65008 "Microsoft"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The query above is already somewhat difficult to read, and it\u2019s not even a particularly complex one. In practice, you\u2019re likely to encounter much more complicated queries. Fortunately, there\u2019s a simple way to make such queries more readable. By leveraging an iterator, we can achieve the same result while significantly improving readability. By leveraging an iterator, we can achieve the same result while significantly improving clarity. Specifically, using the ",(0,i.jsx)(n.code,{children:"over"})," iterator in combination with the desired join operation allows us to join datasets in a much cleaner and more understandable manner."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'q)(lj/)(select open:first px,low:min px, high:max px, close:last px by sym from trades;select by sym from quotes;1!reference)\nsym | open     low      high     close    date       time     bid      ask      description\n----| --------------------------------------------------------------------------------------\naapl| 34.93533 14.29403 98.86591 68.45319 2024.12.13 18:12:53 91.26417 91.30803 "Apple Inc"\ngoog| 95.54843 16.47619 97.89487 21.4076  2024.12.13 12:28:42 46.10987 46.54357 "Google Inc"\nmsft| 35.95293 1.280633 92.56132 56.10808 2024.12.13 10:25:30 80.95108 81.65008 "Microsoft"\n'})}),"\n",(0,i.jsx)(n.p,{children:"Doesn't this already look much clearer? In a KDB/Q script, you can take it a step further by spreading the query across multiple lines, making it even easier to read and understand. You can even add some comments if you want."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"result:(lj/)(select open:first px,low:min px, high:max px, close:last px by sym from trades;\n\t    select by sym from quotes;\n\t    1!reference);\n"})}),"\n",(0,i.jsx)(n.p,{children:"Last but not least, we verify that both our queries actually return the same result."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"q)((lj/)(select open:first px,low:min px, high:max px, close:last px by sym from trades;select by sym from quotes;1!reference))~((select open:first px,low:min px, high:max px, close:last px by sym from trades) lj select by sym from quotes) lj 1!reference\n1b\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["That's all Folks! I hope you found this blog post helpful. See you next time. Don't forget to subscribe to my newsletter for updates straight to your inbox. Subscribe ",(0,i.jsx)(n.a,{href:"https://defconq.substack.com",children:"now"})]})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},37945:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/PlusJoinTables-5b34af09e5e7ecb0ad18d6e1ea2bd5d0.png"},17328:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/UnionJoinKeyedTables-6cab446ab734d2eb747a9b9f8fea2f74.png"},10258:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/UnionJoinTables-2e6ed8f6dc8c6d6d2f7ba8d84eabbdce.png"},63226:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/asofJoinTables-93a87fe96603270bf7cc4b4d7bd94cc8.png"},88201:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/equiJoinTables-1a5e72b184c1c0dfdcc3899fb110f2af.png"},48344:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/innerJoin-a31dfce724248fe540fb5d2edc2842a8.png"},94379:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/innerJoinTables-0173bccb2f5f6acbb6beb0c1feebbc29.png"},88793:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/leftJoin-45d6896cef60a180d0c4c98efe50f460.png"},65522:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/leftJoinTables-6de7f28e2b3a4f463cb8e7bb026c4617.png"},95761:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/leftJoinTables1-964e117a85e2595f0ec34b0a198ec0ec.png"},83373:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/spiderMan-d2e13437eedd8d6e7838b78671c8d168.png"},9363:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/tradeQuoteTables-a4acce0d1bd73449b8002aac23a528be.png"},97465:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/unionJoin-af02d16e1965b78de06cb2b4e65be7cd.png"},15634:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/windowJoin-6ad9c30ed8bc51a0c78817bc891430d9.png"},7665:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/windowJoin1-2d73702cd9bc43393de059ea9528d1ef.png"},64869:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/windowJoinComparison-674ccff860eef18c1be70d59f3cdbe71.png"},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var i=t(96540);const s={},a=i.createContext(s);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);