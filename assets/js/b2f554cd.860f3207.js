"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5894],{6042:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"The importance of code review - Four eyes see more than two","metadata":{"permalink":"/blog/The importance of code review - Four eyes see more than two","source":"@site/blog/2024-03-17-codeReview/index.mdx","title":"The importance of code review - Four eyes see more than two","description":"Over the weekend, I performed an update on the version of Docusaurus, the documentation framework utilized for my blog. A major update had been released some time ago, and due to my limited enthusiasm for front-end development, I had been postponing this task as long as possible. However, I finally decided to tackle it this weekend. After reviewing the recommended upgrade instructions provided in the official documentation, I prepared all necessary steps and then started the upgrade. Incrementally I went through all steps, running my blog locally on my laptop, ensuring that I wouldn\'t break anything. After completing the upgrade, I conducted one final verification to confirm that everything was running as expected in my browser. Satisfied with the results, I committed my changes and pushed them to the repository of my blog.","date":"2024-03-17T00:00:00.000Z","formattedDate":"March 17, 2024","tags":[{"label":"kdb/q","permalink":"/blog/tags/kdb-q"},{"label":"code review","permalink":"/blog/tags/code-review"},{"label":"good practice","permalink":"/blog/tags/good-practice"},{"label":"software development","permalink":"/blog/tags/software-development"},{"label":"programming","permalink":"/blog/tags/programming"}],"readingTime":5.7,"hasTruncateMarker":true,"authors":[{"name":"Alexander Unterrainer","title":"DefconQ, KDB/Q Developer, Consultant","url":"https://github.com/AUnterrainer","imageURL":"/img/alex.jpeg","key":"alexander"}],"frontMatter":{"slug":"The importance of code review - Four eyes see more than two","title":"The importance of code review - Four eyes see more than two","authors":["alexander"],"hide_table_of_contents":true,"tags":["kdb/q","code review","good practice","software development","programming"]},"unlisted":false,"nextItem":{"title":"Advent of Code -  Daily Coding Practice","permalink":"/blog/Advent of Code -  Daily Coding Practice"}},"content":"Over the weekend, I performed an update on the version of [Docusaurus](https://docusaurus.io), the documentation framework utilized for my blog. A major update had been released some time ago, and due to my limited enthusiasm for front-end development, I had been postponing this task as long as possible. However, I finally decided to tackle it this weekend. After reviewing the recommended upgrade instructions provided in the official documentation, I prepared all necessary steps and then started the upgrade. Incrementally I went through all steps, running my blog locally on my laptop, ensuring that I wouldn\'t break anything. After completing the upgrade, I conducted one final verification to confirm that everything was running as expected in my browser. Satisfied with the results, I committed my changes and pushed them to the repository of my blog.\\n\\nNow, all that remained was deploying the new version to [Github Pages](https://pages.github.com). I executed the command `USE_SSH=true yarn deploy` as I typically do, pressed enter, and awaited the customary `[INFO]` messages. However, instead of the expected outcome, I was confronted with a bright, red error message.  \\n\\n\x3c!-- truncate --\x3e\\n\\n```\\n[ERROR] Deployment of the build output failed.\\n\\nError: Running \\"git push\\" command failed. \\nDoes the GitHub user account you are using have push access to the repository?\\n```\\n\\nUgh, of course. Something went wrong. However, my blog ran smoothly locally. I meticulously reviewed all my steps again, compared the `docusaurus.config.js` file with the new `docusaurus.config.ts` script I had to generate as part of the transition from JavaScript to TypeScript. Everything appeared to be in order. So why wasn\'t it functioning properly? The error message resembled an `SSH` issue, prompting me to double-check all my GIT configurations, and even recreate `SSH` keys, but to nothing.\\n\\nThen, I proceeded with the typical routine every developer follows when encountering an issue: I searched for help on the internet, StackOverflow, Google search, blogs, forums, but unfortunately, none of the resources I explored offered a solution to my dilemma. Eventually, I stumbled upon a post suggesting that I delete the gh-pages branch of my repository \u2014 the branch responsible for hosting my blog online - and recreating it might resolve the issue. This sounded like a plausible remedy, so I proceeded accordingly. Regrettably, the solution did not rectify my problem; in fact, it exacerbated it. Deleting the branch responsible for hosting my blog rendered it inaccessible. While I may not boast millions of readers, the embarrassment of visitors encountering an offline blog was real.\\n\\nI began to feel a tinge of concern and proceeded to review everything one more time, attempting a few additional troubleshooting steps, but nothing worked. At this point, my last resort was seeking assistance from a more seasoned developer. Fortunately, one of my close friends from university happened to be one of those exceptional talents - often referred to as **10X developers** in the tech industry. Regardless of the topic at hand, he possessed the ability to grasp concepts within minutes. Most technical challenges that had stumped me in the past seemed trivial to him. While the only programming language he wasn\'t well-versed in happened to be KDB/Q, I was fortunate that this particular issue did not pertain to that domain. Armed with a few screenshots and a concise explanation detailing my efforts and attempted solutions, I composed a message and eagerly awaited his response.\\n\\nKnowing that he had recently welcomed his second child and that my trivial web development issues were understandably not a priority compared to his new responsibilities, I decided to take a leisurely stroll with my girlfriend and some friends. Several hours later, I received a response from him\u2014a few links to potential solutions, all of which I had already explored. Following that, he inquired about my GIT repository URL, username, and a few other details. After confirming these details, I received a smiley face emoji in response. It was then pointed out to me that I had a typo in my GIT username\u2014I had mistakenly written De**c**fonQ rather than De**f**conQ. With this embarrassing oversight corrected, I was finally able to deploy my blog once again, and it was back up and running as usual.\\n\\nThis experience, reminded me once again, about the significance of code review and why it should be an integral part of every software development life cycle. Which brings me to the main topic of this blog post: **code review**.\\n\\n## What is code review and why you should practice it\\n\\nIn the software development industry, code review is a fundamental practice that involves systematically examining code changes made by developers. It serves as a crucial quality assurance measure, ensuring that code meets standards, is free of bugs, and aligns with project requirements. Code review is important for several reasons:\\n\\n- Firstly, it provides an opportunity for developers to have their code reviewed by their peers ensuring certain **quality standards and controls**, receiving valuable feedback on potential improvements or adherence to best practices.\\n- **Sharing and transferring knowledge**: Code reviews are a great opportunity to share or gain expertise. The depth of this knowledge transfer varies widely, however, there will always be some level of information exchange.\\n- **Spreading ownership**: Code reviews  allow developers to review code written by others, facilitating learning and deeper understanding of the system being developed. This will foster mutual code ownership. It\'s common for a developer to become solely responsible for a specific part of the codebase due to their familiarity with it. While this might offer short-term advantages, it often leads to long-term drawbacks. When ownership of the code is shared among team members, it promotes motivation and autonomy within the team.\\n-  Moreover, code review encourages **collaboration** within teams, as developers can provide constructive feedback to one another and engage in discussions about software development practices.\\n- **Unify development styles**: Each developer has their unique approaches and preferences when it comes to implementing software. Code reviews play a crucial role in bridging the gap between individual development styles, thereby promoting a more unified codebase. This unification occurs through both high-level discussions concerning architecture and software design, as well as micro-level continuous integration checks like enforcing coding style consistency.\\n- For junior developers, code review offers a unique chance to benefit from the experience and expertise of more seasoned developers.\\n\\nFor a comprehensive guide on code reviews and best practices, make sure to read the excellent article [\\"A Complete Guide to Code Review\\"](https://www.swarmia.com/blog/a-complete-guide-to-code-reviews/) by Kimmo Brunfeldt.\\n\\nUltimately, no code should be deployed to a production environment without undergoing a formal code review and obtaining the approval of at least two other developers, a best practice that development teams should adhere to. **DefconQ** on the other hand, will simply postpone future front end updates or outsource it to an experts. Volunteers are more than welcome.\\n\\n**Resources**:\\n[A complete guide to code reviews](https://www.swarmia.com/blog/a-complete-guide-to-code-reviews/) by Kimmo Brunfeldt"},{"id":"Advent of Code -  Daily Coding Practice","metadata":{"permalink":"/blog/Advent of Code -  Daily Coding Practice","source":"@site/blog/2023-11-30-AOC/index.mdx","title":"Advent of Code -  Daily Coding Practice","description":"It\'s this time of the year again: it\'s getting cold and dark outside, the days are getting shorter, Chris Rea is driving home, Santa is coming coming to town and all Mariah Carey wants for Christmas is you. As business requests hopefully slow down, and we enter code freeze, it\'s a good time to reflect on the past year and spend some time on sharpening our brains and KDB/Q coding skills. And what could possibly be better for that than tackling the daily coding challenges presented by Advent of Code?","date":"2023-11-30T00:00:00.000Z","formattedDate":"November 30, 2023","tags":[{"label":"kdb/q","permalink":"/blog/tags/kdb-q"},{"label":"AOC","permalink":"/blog/tags/aoc"},{"label":"Challenges","permalink":"/blog/tags/challenges"},{"label":"Practice","permalink":"/blog/tags/practice"}],"readingTime":2.03,"hasTruncateMarker":true,"authors":[{"name":"Alexander Unterrainer","title":"DefconQ, KDB/Q Developer, Consultant","url":"https://github.com/AUnterrainer","imageURL":"/img/alex.jpeg","key":"alexander"}],"frontMatter":{"slug":"Advent of Code -  Daily Coding Practice","title":"Advent of Code -  Daily Coding Practice","authors":["alexander"],"hide_table_of_contents":true,"tags":["kdb/q","AOC","Challenges","Practice"]},"unlisted":false,"prevItem":{"title":"The importance of code review - Four eyes see more than two","permalink":"/blog/The importance of code review - Four eyes see more than two"},"nextItem":{"title":"Where to find help","permalink":"/blog/Where to find help"}},"content":"It\'s this time of the year again: it\'s getting cold and dark outside, the days are getting shorter, Chris Rea is driving home, Santa is coming coming to town and all Mariah Carey wants for Christmas is you. As business requests hopefully slow down, and we enter code freeze, it\'s a good time to reflect on the past year and spend some time on sharpening our brains and KDB/Q coding skills. And what could possibly be better for that than tackling the daily coding challenges presented by [Advent of Code](https://adventofcode.com)? \\n\x3c!-- truncate --\x3e\\n\\nAdvent of Code is a daily coding challenge presented in the form of an advent calendar, running from December 1st to Christmas Day, December 25th. Initially created in 2015 by [Eric Wastl](https://twitter.com/ericwastl), it has become widely popular among programmers across various programming languages.\\n\\nThe challenges are in form of small programming puzzles designed for diverse skill sets and levels that can be solved in any programming language you like. Participants use these puzzles for interview preparation, company training, university coursework, practice problems, engaging in speed contests, or challenging one another. You also don\'t need a computer science background in order to participate; a basic understanding of programming and some problem-solving skills are sufficient to make progress. Moreover, a high-end computer is not a requirement; each problem is designed to have a solution that runs within 15 seconds on ten-year-old hardware.\\n\\nEach day at midnight EST, a new problem is revealed, comprising two small problems that increase in difficulty as you advance through December. Solving each part of the problem correctly earns you one star. For those of you who love a competition, there are leaderboards, where earning the first star is worth 100 points, the second is 99, and so forth, down to 1 point for 100th place.\\n\\nWhile KDB/Q may not always be the optimal programming language for solving all puzzles, it serves as an excellent platform to sharpen your KDB/Q skills and cultivate creative problem-solving abilities. It provides an opportunity to tackle challenges that might not be encountered in your daily work routine. If you ever get stuck in one of the problems or don\'t feel experienced enough, don\'t lose hope. There are plenty of developers who share their solutions on LinkedIn or [KX Community](https://community.kx.com) and you can learn a lot by looking at their solutions.\\n\\nGet your keyboards ready, Advent of Code starts tomorrow! Join the fun [here](https://adventofcode.com)\\n\\nHappy Coding!"},{"id":"Where to find help","metadata":{"permalink":"/blog/Where to find help","source":"@site/blog/2023-09-18-help/index.mdx","title":"Where to find help","description":"So, you\'ve delved into \'Q for Mortals\' and a few other fundamental references I shared with you in my previous post, immersed yourself in code, tutorials, and successfully tackled your initial tasks. However, as you progress, you inevitably encounter that frustrating error. You try the different approaches you normally attempt when running into an error but you\'ve exhausted every strategy, set breakpoints, meticulously stepped through the code, and yet, you can\'t figure out what\'s wrong with your code. Maybe you\'ve encountered a challenge you are unsure how to tackle or perhaps you simply want to ensure your solution is optimal, whether in terms of execution time or memory usage. In any of these scenarios, the need for assistance arises, and in this blog post, we\'ll look at the different options for help with your KDB/Q challenges.","date":"2023-09-18T00:00:00.000Z","formattedDate":"September 18, 2023","tags":[{"label":"kdb/q","permalink":"/blog/tags/kdb-q"},{"label":"Help","permalink":"/blog/tags/help"},{"label":"StackOverFlow","permalink":"/blog/tags/stack-over-flow"},{"label":"KX Community","permalink":"/blog/tags/kx-community"},{"label":"Mentorship","permalink":"/blog/tags/mentorship"}],"readingTime":4.145,"hasTruncateMarker":true,"authors":[{"name":"Alexander Unterrainer","title":"DefconQ, KDB/Q Developer, Consultant","url":"https://github.com/AUnterrainer","imageURL":"/img/alex.jpeg","key":"alexander"}],"frontMatter":{"slug":"Where to find help","title":"Where to find help","authors":["alexander"],"hide_table_of_contents":true,"tags":["kdb/q","Help","StackOverFlow","KX Community","Mentorship"]},"unlisted":false,"prevItem":{"title":"Advent of Code -  Daily Coding Practice","permalink":"/blog/Advent of Code -  Daily Coding Practice"},"nextItem":{"title":"How to Read, Understand and Learn KDB/Q code","permalink":"/blog/How to Read, Understand and Learn KDB/Q code"}},"content":"So, you\'ve delved into \'Q for Mortals\' and a few other fundamental references I shared with you in my previous [post](https://defconq.tech/blog/Go-To%20KDB/Q%20Learning%20Resources), immersed yourself in code, tutorials, and successfully tackled your initial tasks. However, as you progress, you inevitably encounter that frustrating error. You try the different approaches you normally attempt when running into an error but you\'ve exhausted every strategy, set breakpoints, meticulously stepped through the code, and yet, you can\'t figure out what\'s wrong with your code. Maybe you\'ve encountered a challenge you are unsure how to tackle or perhaps you simply want to ensure your solution is optimal, whether in terms of execution time or memory usage. In any of these scenarios, the need for assistance arises, and in this blog post, we\'ll look at the different options for help with your KDB/Q challenges.  \\n\\n\x3c!--truncate--\x3e\\n\\nIn the early days of KDB/Q (technically it was K back then but lets keep the history of KDB/Q for another blog post), comprehensive documentation and online resources were scarce. For those utilizing KDB/Q in a professional capacity, one option was to register with your work email address on a listbox/topicbox email distribution list. Here, you could post your questions or inquiries, relying on the hope that experienced and knowledgeable developers within the community would offer responses. Nevertheless, if you weren\'t using KDB/Q in a professional context or attempted to learn it independently, there were limited documentation and resources at your disposal.\\n\\nOver time, the KDB/Q community expanded, leading to more comprehensive documentation and increased resources for seeking assistance. While KDB/Q doesn\'t enjoy the same level of all-pervasive online information as Python, where a simple Google search for \'How to do XYZ in Python\' yields countless results, you can still depend on the two sources mentioned below to access support.\\"\\n\\n## KX Community\\n\\nIn September 2021, KX launched the KX Community, an online forum designed to serve as a centralized hub for all your KDB/Q inquiries. Within this forum, queries and issues are categorized into various discussion topics, including KDB/Q, KX Solutions or Products, KX Academy (which I previously discussed [here](https://defconq.tech/blog/Go-To%20KDB/Q%20Learning%20Resources#kx-academy)), KX Insight, or their latest offering, KDB.AI.\\n\\nThe forum is open to anyone seeking answers related to KDB/Q, offering a user-friendly interface. It enjoys active participation from KDB/Q developers within the industry, and, notably, it is closely monitored by seasoned developers from KX. These KX experts serve as forum administrators and actively engage by responding to inquiries and questions.\\n\\nIn my opinion, the KX Community serves as an excellent resource for assistance when you encounter challenges. Additionally, it provides a valuable platform for acquiring knowledge about prevalent issues and their corresponding resolutions. Whether you\'re striving to comprehend the intricacies of KDB/Q, grappling with an architectural design query, or seeking insights into any of the KX products, this forum proves highly beneficial.\\n\\nIf you haven\'t signed up yet, go and register yourself [here](https://community.kx.com)\\n\\n![KX Community](./KXCommunity1.png)\\n![KX Community](./KXCommunity2.png)\\n\\n## Stackoverflow\\n\\nIf you\'re a developer, you\'re likely familiar with StackOverflow. However, for those who may not have encountered StackOverflow before, here\'s an analogy: StackOverflow is to programmers what Google is to non-programmers - an essential website for finding answers to all your questions.\\n\\nAs of the time of this writing, StackOverflow boasts a vast repository of 23,908,328 questions spanning the realms of programming, software development, and similar domains. Out of these 23 Million questions, a mere 2,269 questions are related to KDB/Q. Yes, you read that right, meaning that only **0.0095%** of all questions on Stackoverflow are related to KDB/Q. That\'s pretty low if you ask me. To provide a comparison, consider Python, one of the widely-used mainstream programming languages, which boasts a staggering 2.1 million questions, equivalent to approximately 9%.\\n\\nThe relatively limited number of KDB/Q questions on StackOverflow is combined with a lack of a robust categorization. While I consider StackOverflow a valuable platform for posting questions, I must also acknowledge that it may not offer the same level of structured organization as the KX Community.  However, it\'s worth mentioning that there is an active participation from experienced developers who consistently respond to KDB/Q queries, and I\'ve personally come across valuable solutions and code snippets within the StackOverflow KDB/Q section as well. \\n\\nI consider Stack Overflow to be a valuable supplement to your repertoire of resources for addressing KDB/Q-related queries.\\n\\n![Stackoverflow](./Stackoverflow.png)\\n\\n## Mentorship\\n\\nAnother approach to seek solutions for your KDB/Q queries is to explore the possibility of finding a mentor. Whether you discover a mentor within your current team or organization, or seek one externally, I recommend initiating a mentor-mentee connection with an experienced KDB/Q developer. While some highly skilled KDB/Q developers may appear intimidating at first, you may be pleasantly surprised by the willingness of most of them to offer assistance and guidance.\\n\\nTo summarize, the combination of KX Community and StackOverflow, along with the option of connecting with a mentor or a knowledgeable colleague, provides a comprehensive support system to address any KDB/Q-related challenges you may encounter.\\n\\n\\nHappy Coding!"},{"id":"How to Read, Understand and Learn KDB/Q code","metadata":{"permalink":"/blog/How to Read, Understand and Learn KDB/Q code","source":"@site/blog/2023-09-11-read/index.mdx","title":"How to Read, Understand and Learn KDB/Q code","description":"In my previous blog post, I shared my favourite Go-To KDB/Q Learning Resources to help you to get started. However, as you dive deeper into the KDB/Q programming language and you begin to read and review other\'s code you might experience a slight sense of overwhelm. Two main characteristics of KDB/Q, namely its tersness and and its left-of-right evaluation order (KDB/Q expressions are evaluated left-of-right which equates to expressions are evaluated right-to-left), can pose initial challenges for new KDB/Q developers. It\'s important to overcome these hurdles and become familiar with these features as you progress.","date":"2023-09-11T00:00:00.000Z","formattedDate":"September 11, 2023","tags":[{"label":"kdb/q","permalink":"/blog/tags/kdb-q"},{"label":"Learning","permalink":"/blog/tags/learning"},{"label":"Beginner","permalink":"/blog/tags/beginner"},{"label":"Qbie","permalink":"/blog/tags/qbie"}],"readingTime":13.505,"hasTruncateMarker":true,"authors":[{"name":"Alexander Unterrainer","title":"DefconQ, KDB/Q Developer, Consultant","url":"https://github.com/AUnterrainer","imageURL":"/img/alex.jpeg","key":"alexander"}],"frontMatter":{"slug":"How to Read, Understand and Learn KDB/Q code","title":"How to Read, Understand and Learn KDB/Q code","authors":["alexander"],"hide_table_of_contents":true,"tags":["kdb/q","Learning","Beginner","Qbie"]},"unlisted":false,"prevItem":{"title":"Where to find help","permalink":"/blog/Where to find help"},"nextItem":{"title":"Go-To KDB/Q Learning Resources","permalink":"/blog/Go-To KDB/Q Learning Resources"}},"content":"In my previous blog post, I shared my favourite [Go-To KDB/Q Learning Resources](https://defconq.tech/blog/Go-To%20KDB/Q%20Learning%20Resources) to help you to get started. However, as you dive deeper into the KDB/Q programming language and you begin to read and review other\'s code you might experience a slight sense of overwhelm. Two main characteristics of KDB/Q, namely its tersness and and its [left-of-right](https://code.kx.com/q4m3/4_Operators/#412-left-of-right-evaluation) evaluation order (KDB/Q expressions are evaluated left-**of**-right which equates to expressions are evaluated right-**to**-left), can pose initial challenges for new KDB/Q developers. It\'s important to overcome these hurdles and become familiar with these features as you progress. \\n\\n\x3c!--truncate--\x3e\\n\\nWhen you start looking at other\'s KDB/Q code for the first time, it can be akin to a five-year-old attempting to independently assemnle the gigantic Lego Millenium Falcon immediately after learning how to connect just two Lego pieces. The experience can be overwhelming, leaving you unsure where to start. THe image below serves as an illustration of the described sensation.\\n\\n![Lego Millenium Falcon](./lego_millenium_falcon.webp)\\n\\nWhen you assess your current knowledge in relation to the task at hand, you might perceive it as inadequate and insufficient.\\n\\n![Lego scale](./lego_map.png)\\n\\nNevertheless, if we deconstruct the code into smaller components and methodically examine it step by step, expression by expression, we often come to realize that the code we\'re grappling with may not always be as daunting as initially presumed.\\n\\n![Lego Block](./lego_block.jpg)\\n\\n## Dividing code into smaller components\\n\\nThat\'s precisely the method we\'ll employ in this blog post. We\'ll dissect a line of KDB/Q code that could appear complex initially - maybe we won\'t even grasp its purpose at first glance. However, by breaking it down into small, discrete expressions and evaluating them sequentially, we\'ll unravel its underlying logic and functionality.\\n\\nWe are accomplishing this by examining a fascinating pattern introduced by Stephen Taylor, the KX Librarian, as outlined in this [post](https://community.kx.com/t5/Community-Blogs/Meet-the-Zen-monks/ba-p/11604). Take a glance at the code provided below and take a moment to make an educated guess about its purpose.\\n\\n```\\nq){x{y _ x}/1 -1*(1 reverse\\\\\\" \\"<>x)?\'1b}\\"   Trim the spaces.  \\"\\n```\\n\\n<details>\\n  <summary>Solution here </summary>\\n    <p>\\n      \\n      #### Did you guess right? The anonymous function (or lambda) trims all the spaces before and after the text. The ```1 function\\\\input``` pattern applies a function and not applies it\\n\\n      ```\\n      q){x{y _ x}/1 -1*(1 reverse\\\\\\" \\"<>x)?\'1b}\\"   Trim the spaces.  \\"\\n      \\"Trim the spaces.\\"\\n      ```\\n\\n    </p>\\n</details>\\n\\nIt\'s quite surprising how much can be achieved with such little code,isn\'t it? Now, let\'s break it down methodically, taking each component into careful consideration.\\n\\n:::caution\\nRemeber, KDB/Q is evaluated left-**of**-right, meaning we have to read our code right-**to**-left. \\n:::\\n\\nThe first code section we examine is the following.\\n```\\n(expression)?\'1b\\n```\\n\\nThe \'?\' operator, along with the \'!\' operator, arguably possesses the greatest number of overloads among KDB/Q operators. In this specific context, the \'?\' operator functions as a [**\'find\'**](https://code.kx.com/q/ref/find/) operation.\\n\\nLet\'s look at an example. Suppose we have a list of integers and we would like to find the index at which that element occurs. We can do this the following way:\\n\\n:::caution\\nIndexing starts at 0 in KDB/Q\\n:::\\n\\n```\\nq)10 5 4 3 2?3  // 3 occurs at the 4th position in the list\\n3\\n```\\n\\n:::danger\\n`?` find only returns the first index of the elemnt you are searching for\\n:::\\n\\n```\\nq)10 5 4 3 2 3?3\\n3\\nq)\\n```\\n\\n:::tip\\nIt\'s strongly advised to have the [KX reference card](https://code.kx.com/q/ref/) readily available, particularly when you\'re starting your KDB/Q journey and are still becoming acquainted with various operators, their overloads, and functionalities.\\n:::\\n\\n## The power of Iterators and their applications\\n\\nThe `\'` operator exemplifies another unique concept within KDB/Q, which is the concept of [iterators](https://code.kx.com/q/basics/iteration/). Iterators can be described as functions that take values as arguments and generate new functions that apply those values repetitively. In this specific instance, the `\'` operator signifies [\\"each\\"](https://code.kx.com/q/ref/maps/#each) and applies a value item-by-item to a dictionary, list, or conforming combinations of lists and dictionaries.\\n\\nAllow me to demonstrate this behavior with a straightforward example. Imagine we have a list of strings and aim to determine the length of each string:\\n\\n```\\nq)list:(\\"Hello\\";\\"World\\";\\"lorem\\";\\"ipsum\\")\\nq)count list\\n4\\n```\\nAs you can see, `count list` returns the length of the list of strings rather than the length of each individual string itself. We therefore have to use the `each` operator to achieve the desired result.\\n\\n```\\nq)count each list\\n5 5 5 5\\n```\\n\\nIn the above example we make use of the mnemonic keyword **each** which can be used to apply a unary value without having to use parentheses or brackets. We could have achieved the same result by doing the following \\n\\n:::note\\n`count` is a unary value\\n:::\\n\\n```\\nq)(count\')list\\n5 5 5 5\\nq)count\'[list]\\n5 5 5 5\\nq)count@\'list\\n5 5 5 5\\n```\\n\\nWhen examining the entire code snippet together, we can see that `(expression)?\'1b` will search (and find) the index of the first occurence of 1b in **each** element of the list denoted by expression. Sounds complicated? Allow me to provide a demonstration for better clarity:\\n\\n```\\nq)(000101010111b;0101010101b)?\'1b\\n3 1\\n```\\n\\nOur next task is to determine the actual result of the expression enclosed within parentheses.\\n\\n```\\n(1 reverse\\\\\\" \\"<>x)?\'1b\\n```\\n\\nTo do so, we solely focus on the expression within parentheses and ignore the second part. We can easily do this, we already know what it does\\n\\n```\\n1 reverse\\\\\\" \\"<>x\\n```\\n\\nThis expression can be further divided into three components. The keyword `reverse`, the component `\\" \\"<>x` and the `\\\\`, another KDB/Q [**iterator**](https://code.kx.com/q/basics/iteration/).\\n\\nLet\'s examine each of these components separately, starting, in good KDB/Q fashion with the most right one:\\n\\n```\\nq)\\" \\"<>\\"Hello World\\"\\n11111011111b\\n```\\n\\nThe code we executed produces a boolean mask. It compares each element of the string to the empty string \\" \\" and yields \\"**true**\\" for elements that differ and \\"**false**\\" for those that are the same. Consequently, we can infer that the `<>` operator assesses inequality. If our aim is to do the opposite and examine equality, we can simply apply the equality operator, which is represented by `=`.\\n\\nThis conveys another, valuable lesson in KDB/Q, specifically: *\\"A fundamental feature of atomic functions is that their action extends automatically to the items in a list\\"* as explained in [Chapter 4: Operators](https://code.kx.com/q4m3/4_Operators/#403-extension-of-atomic-functions) of \\"Q for Mortals\\".\\n\\nDon\'t take my word for it, witness it for yourself:\\n\\n```\\nq)2 3 4+5 6 7\\n7 9 11\\n```\\n\\n:::danger\\nOf course, if you want to combine two lists they must be of the same length, otherwise KDB/Q will throw an error\\n```\\nq)2 3 4+5 6\\n\'length\\n  [0]  2 3 4+5 6\\n            ^\\n```\\n:::\\n\\nPrior to delving into the `1 function\\\\input` pattern, let\'s explore the functionality of the keyword `reverse`.\\n\\nAs you probably can guess, the keyword [`reverse`](https://code.kx.com/q/ref/reverse/) reverses the order of items of a list or dictionary.\\n\\n```\\nq)reverse \\"Hello World\\"\\n\\"dlroW olleH\\"\\nq)reverse 0 1 2 3 4 5\\n5 4 3 2 1 0\\n```\\nThe string `Hello World` becomes `dlroW olleH` and the list `0 1 2 3 4 5` becomes `5 4 3 2 1 0`\\n\\n## Exploring the versatility of Scan and Over\\n\\nNow, it\'s time to address the most intricate part of this code snippet - the `1 function\\\\input` pattern. The `\\\\` operator is referred to as \\"Scan\\". To clarify the \\"Scan\\" iterator, we must first explain the \\"Over\\" iterator. *\\"The [Over](https://code.kx.com/q4m3/6_Functions/#676-over-for-accumulation) iterator `/` is a higher-order function that provides the principal mechanism for recursion in q. In its simplest form it modifies a binary function to accumulate results over a list\\"*.\\n\\n*\\"The [Scan](https://code.kx.com/q4m3/6_Functions/#678-scan) iterator `\\\\` is a higher-order function that behaves just like `/` except that it returns all the intermediate accumulations instead of just the final one\\".* \\n\\nNow let\'s illustrate this with an example, a single line of code carries the weight of a thousand words.\\n\\nFirst, let\'s look at `Over`\\n\\n```\\nq)(+/)1 2 3 4 5\\n15\\n```\\nCan you perceive what \\"Over\\" does? It applies the binary function `+` to the list `1 2 3 4 5` and accumulates the results over the list, effectively returning the sum of all elements `1 2 3 4 5`.\\n\\nNow, let\'s look at `Scan`\\n```\\nq)(+\\\\)1 2 3 4 5\\n1 3 6 10 15\\n```\\n\\nMuch like Over, Scan also yields the cumulative sum of all elements in the list, however, with one key difference: Scan returns all intermediate steps, returning the rolling sum, rather than just the sum of all elements.\\n\\n:::info\\nThere exist two keywords for the two scenarios described above: the keyword **sum** corresponds to `(+/)` and the keyword **sums** corresponds to `(+\\\\)`.\\n:::\\n\\nHere\'s the evidence\\n\\n```\\nq)sum 1 2 3 4 5\\n15\\nq)sums 1 2 3 4 5\\n1 3 6 10 15\\n```\\n\\nBecause of KDB/Q\'s concise nature, operators have numerous overloads. This principle extends to the iterators Over and Scan. Depending on the valence (the number of inputs to a function) associated with Over or Scan, these iterators exhibit varying behavior. A comprehensive list of their behaviors can be found [here](https://code.kx.com/q/ref/iterators/)\\n\\nIn the context of the `1 function\\\\input` pattern, Scan functions similarly to what you might recognize as a \\"Do-Loop\\" in conventional programming languages. It\'s important to note that Scan will also produce the input as the initial result when applied to a unary function.\\n\\nThe following example should illustrate this behavior:\\n\\n```\\nq)5 enlist\\\\1\\n1\\n,1\\n,,1\\n,,,1\\n,,,,1\\n,,,,,1\\n\\nq)5(`f;)\\\\1\\n1\\n(`f;1)\\n(`f;(`f;1))\\n(`f;(`f;(`f;1)))\\n(`f;(`f;(`f;(`f;1))))\\n(`f;(`f;(`f;(`f;(`f;1)))))\\n```\\n\\nIn the initial example, you\'ll observe that the number 1 is enlisted five times, whereas in the second example, a nested list is generated with a depth of five levels. Both examples begin by displaying the input as the initial step.\\n\\nNow, let\'s try to put things together and see what we get. Let\'s look at the following code snippet:\\n\\n```\\nq)1 reverse\\\\\\"Hello\\"\\n\\"Hello\\"\\n\\"olleH\\"\\n```\\nAs we explained earlier, the Scan will display the input first, and then repeat the function, reverse in this case, n-times, where n is 1, resulting into a list of strings consisting of \\"Hello\\" the original string, and its reverse \\"olleH\\"\\n\\nLet\'s attempt to apply this concept to the originally provided string:  \\"     Trim spaces     \\", and apply the whole expression within parentheses\\n\\n```\\nq)1 reverse\\\\\\" \\"<>\\"   Trim the spaces.  \\"\\n000111101110111111100b\\n001111111011101111000b\\n```\\nApologies if that was too swift. Let\'s break it down step by step.\\n\\n```\\nq)\\" \\"<>\\"   Trim the spaces.  \\"\\n000111101110111111100b\\n```\\n\\nThe initial segment of the expression involves a character-by-character comparison between the given input string and an empty string. It yields a boolean mask with `0b` where the elements differ and `1b` where they match. This boolean mask is subsequently utilized as input for the `1 function\\\\pattern.` In this context, Scan begins by presenting the input, followed by applying the `reverse` function precisely once.\\n\\nLet\'s combine that with the initial expression we examined, `?\'1b` find each 1b:\\n\\n```\\nq)(1 reverse\\\\\\" \\"<>\\"   Trim the spaces.  \\")?\'1b\\n3 2\\n```\\n\\nUpon inspecting the two boolean masks, it becomes evident that the initial `1b` occurrence appears at index 3 in the first mask and index 2 in the second mask, respectively.\\n\\n```\\n000111101110111111100b   // first occurrence of 1b is at index 3\\n001111111011101111000b   // first occurrence of 1b is at index 2\\n```\\n\\nThe next part of the code is straightforward, we multiply 1 -1 with 3 2, REMEMBER: operators are atomic, meaning their functionality extends automatically to the items in a list. This yields the following result\\n\\n```\\nq)1 -1*(1 reverse\\\\\\" \\"<>\\"   Trim the spaces.  \\")?\'1b\\n3 -2\\n```\\n\\nNext, we encounter another lambda function combined with an iterator, but in this case, it\'s Over.\\n\\n```\\nx{y _ x}/1 -1*(1 reverse\\\\\\" \\"<>x)?\'1b\\n```\\n\\n## Other KDB/Q operators\\n\\nLet\'s take a closer look at the functionality of the operator `_` inside the lambda does: `_` also called [Drop](https://code.kx.com/q/ref/drop/), drops items from a list, entries from a dictionary or columns from a table \\n\\n:::caution\\nLet\'s avoid any confusion between **[drop](https://code.kx.com/q/ref/drop/)** and **[cut](https://code.kx.com/q/ref/cut/)** even though they are the same operator but function differently. \\n::: \\n\\nFrom the KX refernce card:\\n\\nDrop leading or trailing items\\n\\n```\\nx _ y\\t\\t_[x;y]\\n```\\n\\nWhere\\n- x is an int atom\\n- y a list or dictionary\\n\\nreturns y without the first or last x items.\\n\\nLet\'s look at an example:\\n\\n```\\nq)5_0 1 2 3 4 5 6 7 8      /drop the first 5 items\\n5 6 7 8\\nq)-5_0 1 2 3 4 5 6 7 8     /drop the last 5 items\\n0 1 2 3\\nq)1 _ `a`b`c!1 2 3\\nb| 2\\nc| 3\\n```\\n\\nNow, the remaining task is to integrate our understanding of \\"drop\\" with our knowledge of \\"Over.\\" In this scenario, \\"Over\\" is applied to a binary function where \\"drop\\" takes two parameters, `x` and `y.` Upon closer examination of the code, it\'s apparent that within the lambda, we apply `y _ x` rather than `x _ y.` However, you might be wondering about the additional `x` preceding the lambda. This variation arises from the different notation forms offered in KDB/Q. Functions can be expressed in either prefix or infix notation.\\n\\nApplication of a binary function `f` on arguments `x` and `y` is written `f[x;y]` in **prefix** or `x f y` in **infix**. Note: **infix** notation only works for Q functions, while functions defined by yourself can only be used in **prefix** notation.\\n\\nYou can find the different applications of iterators and their valence [here](https://code.kx.com/q/ref/accumulators/)\\n\\nOver applied to a binary function can be written either \\n```\\nx v2/y\\nor\\nv2/[x;y]\\n```\\n\\nmeaning that the `x` we observe in front of the lambda function `{y _ x}/` is the first parameter to the function.\\n\\n## Putting it all together\\n\\nIf we take a closer look at the entire code, we\'ll notice that the input to the primary lambda function is the string we intend to trim. Additionally, the `y` parameter in the lambda corresponds to the two indexes, 3 and -2. If you recall from the initial part of the code, when we reverse the boolean mask, we obtain the first index of a \\"true\\" flag in the \\"original\\" boolean mask and the first index of a \\"true\' flag in the \\"reversed\\" boolean mask. However, let\'s pause for a moment and consider this. The first index of a \\"true\\" flag in the \\"reversed\\" boolean mask is, in fact, the same as the first index of the \\"original\\" boolean mask when we count from the opposite end of the boolean mask (namely from the back/end).\\n\\nHaven\'t we recently discovered that \\"drop\\" used in conjunction with a negative number will discard the last \\"n\\" elements? Indeed, we have! So, the remaining piece of the puzzle is to grasp how \\"Over\\" is applied to this function. Yet, we\'re already acquainted with this concept, as \\"Over\\" serves as a higher-order function that facilitates recursion in q. In its basic form, it adapts a binary function to accumulate results over a list.\\n\\nLet\'s take a peek. To simplify matters, I\'ll display some of the intermediate outcomes rather than the entire expression\\n.\\n```\\nq)\\"   Trim the spaces.  \\"{y _ x}/3 -2\\n\\"Trim the spaces.\\"\\n```\\n\\n:::tip\\nA helpful technique for debugging and comprehending the actions of \\"Over\\" is to initially employ \\"Scan\\" and examine all the interim outcomes. This can provide valuable insights into the ultimate result.\\n:::\\n\\nLet\'s give this technique a try. You can observe how \\"Scan\\" begins by removing the first three (empty) characters from the string and subsequently discards the last two (empty) characters, resulting in the desired outcome: a string that has been trimmed of all leading and trailing spaces.\\n\\n```\\nq)\\"   Trim the spaces.  \\"{y _ x}\\\\3 -2\\n\\"Trim the spaces.  \\"\\n\\"Trim the spaces.\\"\\n```\\n\\nAnd there you have it! As a final step, let\'s consolidate all the code and execute it one more time, appreciating how elegantly everything aligns.\\n\\n```\\nq){x{y _ x}/1 -1*(1 reverse\\\\\\" \\"<>x)?\'1b}\\"   Trim the spaces.  \\"\\n\\"Trim the spaces.\\"\\n```\\n\\nAs an exercise, you can delve into the second code example from the original [post](https://community.kx.com/t5/Community-Blogs/Meet-the-Zen-monks/ba-p/11604) by Stephen Taylor and attempt to decipher it independently. If you encounter any queries or uncertainties along the way, don\'t hesitate to reach out for assistance. \\n\\nHappy coding!"},{"id":"Go-To KDB/Q Learning Resources","metadata":{"permalink":"/blog/Go-To KDB/Q Learning Resources","source":"@site/blog/2023-08-30-resources/index.md","title":"Go-To KDB/Q Learning Resources","description":"In this blog post, I\'ll be sharing my favourite KDB/Q learning resources. These are the go-to references that most experienced KDB/Q developers will have encountered, offering an excellent starting point for anyone looking to dive into the world of KDB/Q.","date":"2023-08-30T00:00:00.000Z","formattedDate":"August 30, 2023","tags":[{"label":"kdb/q","permalink":"/blog/tags/kdb-q"},{"label":"QForMortals","permalink":"/blog/tags/q-for-mortals"},{"label":"QTips","permalink":"/blog/tags/q-tips"},{"label":"KX","permalink":"/blog/tags/kx"},{"label":"Data Intellect","permalink":"/blog/tags/data-intellect"},{"label":"Learning","permalink":"/blog/tags/learning"},{"label":"Beginner","permalink":"/blog/tags/beginner"}],"readingTime":7.3,"hasTruncateMarker":true,"authors":[{"name":"Alexander Unterrainer","title":"DefconQ, KDB/Q Developer, Consultant","url":"https://github.com/AUnterrainer","imageURL":"/img/alex.jpeg","key":"alexander"}],"frontMatter":{"slug":"Go-To KDB/Q Learning Resources","title":"Go-To KDB/Q Learning Resources","authors":["alexander"],"hide_table_of_contents":true,"tags":["kdb/q","QForMortals","QTips","KX","Data Intellect","Learning","Beginner"]},"unlisted":false,"prevItem":{"title":"How to Read, Understand and Learn KDB/Q code","permalink":"/blog/How to Read, Understand and Learn KDB/Q code"},"nextItem":{"title":"Welcome","permalink":"/blog/welcome"}},"content":"In this blog post, I\'ll be sharing my favourite KDB/Q learning resources. These are the go-to references that most experienced KDB/Q developers will have encountered, offering an excellent starting point for anyone looking to dive into the world of KDB/Q.\\n\\n\x3c!--truncate--\x3e\\n\\n## The TL;DR\\n\\nIf there\'s one thing that you need to read about KDB/Q then it\'s the below books:\\n\\n - [Q For Mortals](https://www.amazon.com/Mortals-Version-Introduction-Programming/dp/0692573674/) by Jeffry A. Borror. [Free online version](https://code.kx.com/q4m3/)\\n - [Q Tips](https://www.amazon.com/Tips-Fast-Scalable-Maintainable-Kdb/dp/9881389909/ref=sr_1_1?crid=1P89C7FDDCLIM&keywords=q+tips+nick+psaris&qid=1693248061&s=books&sprefix=qtips+nick+psari%2Cstripbooks-intl-ship%2C141&sr=1-1) by Nick Psaris \\n\\n\\n## The detailed version\\n\\nMastering KDB/Q can be quite challenging due to its steep learning curve, especially if you\'re new to vector programming languages. The resources below are designed to provide a solid foundation and help you grasp the essential concepts of the Q programming language.\\n\\n### Books\\n\\n#### Q for Mortals by Jeffry A. Borror\\n\\nIf you\'re new to the Q programming language and embarking on your learning journey, your first step should be to thoroughly read \\"Q for Mortals\\" by Jeffry A. Borror, cover to cover. This book serves as a comprehensive guide to essential q concepts and provides a strong foundation in understanding the KDB/Q database.\\n\\nBeginning with the fundamental data structures of KDB/Q, including Atoms, Lists, and Dictionaries, the book progressively introduces you to Tables, which form a core data structure in KDB/Q. It delves into intricate details about the functioning of operators, guides you through crafting your custom functions, an integral aspect of functional programming (though KDB/Q isn\'t purely functional), and illustrates the creation of derived functions using iterators, another pivotal element of KDB/Q.\\n\\nChapter 9 introduces q-sql and its role in querying and manipulating tables, while Chapter 14 offers insights into the KDB/Q database, encompassing the process of persisting data to disk. These chapters collectively provide an excellent foundational understanding of KDB/Q, making \\"Q for Mortals\\" an indispensable resource for newcomers as well as experienced developers.\\n\\nWritten in a highly accessible manner, the book is accompanied by illustrative coding examples and snippets, allowing for easy comprehension and hands-on learning. After completing a full read-through, you can revisit specific chapters whenever needed to reinforce your understanding and delve deeper into the content for a more solid grasp.\\n\\n![Q For Mortals](./qfm3.jpg)\\n\\n#### Q-Tips by Nick Psaris\\n\\nAfter reading of \\"Q for Mortals,\\" the next step is to explore my preferred KDB/Q book, \\"Q Tips,\\" authored by Nick Psaris. While \\"Q Tips\\" does offer an initial section introducing fundamental concepts and KDB/Q data structures in its initial chapters, I personally found it more advantageous to have a foundational understanding from \\"Q for Mortals\\" before delving into \\"Q Tips.\\"\\n\\nWithin the pages of this book, Nick draws upon his extensive experience and insights garnered from hands-on usage of KDB/Q within a dynamic real-world trading setting. He leads readers on a practical expedition, guiding them through the step-by-step construction of an intricate event processor in KDB/Q, right from the ground up. Nick seamlessly intertwines the fundamental elements of KDB/Q with the pertinent intricacies of market microstructure, resulting in the creation of a synthetic market data generator.\\n\\nIn this context, Nick not only illustrates how to efficiently capture, store, and analyze vast datasets, but also explains the Q programming paradigm and progressively develops the associated libraries. Throughout this journey, he weaves in well-observed and refined tips that he\'s gleaned from his own experience, ensuring readers gain comprehensive insights into the process.\\n\\nAs you can see from the image of my well-worn copy of Q-Tips below I have read the book several times from front to back and I wholeheartedly recommend Q-Tips to anyone who wants to bring their KDB/Q programming skills to the next level.\\n\\n![Q Tips](./qtips.jpg)\\n\\n### Online resources\\n\\n#### KX Academy \\n\\nIn October 2021 KX announced the launch of [KX Academy](https://kx.com/academy/), an online portal for on-demand training. The Academy offers a range of courses, split into two main difficulty levels, Fundamentals and Advanced. In addition to that, you can also find introductory sessions on KX Dashboard, KX Developer, KX Insight and the recently published Python Interface, PyKX. Demos and Tutorials will deepen your newly acquired knowledge with some practical, hands-on examples. \\n\\nThe Fundamental section combines a series of 15 short courses containing expanatory videos and Jupiter notebooks running in a freely accessible, live sandbox development environment with pre-loaded data sets, giving you seemingless access to the power of KDB/Q without having to install anything on your local machine. This is a perfect, practical addition to the book \\"Q for Mortals\\" mentioned earlier. I suggest you take the courses alongside when reading the book. \\n\\nThe Advanced section of KX Academy builds up on your previously acquired knowledge and explains more advanced concepts of KDB/Q in 15 Jupiter notebook courses. The modules cover topics such as Enumeration, Attributes, different ways of persisting tables, Joins, Iterators, Functional Selects and more. These topics are also covered in \\"Q for Mortals\\" but again, the Jupiter notebooks provide a great practical addition to the theory covered in great detail in the book.\\n\\nAfter completing each section, you have the opportunity to validate your understanding by obtaining either of the two certificates, putting your knowledge to test. \\n\\n![KX Academy](./KXAcademy.png)\\n\\n#### Data Intellect\'s Blog\\n\\n[Data Intellect](https://dataintellect.com), formerly known as AquaQ, is a consultancy firm providing complete software solutions across a broad range of sectors, including but not limited to Financial Institutions such as Investment Banks or Hedge Funds, Fintec, Healthcare, Renewables or Telematics, just to name a few. One of their expertises is KDB/Q and you can find plenty of more advanced topics on their [blog](https://dataintellect.com/thoughts/?_sft_category=blog). While some of the content is for the more experienced developer, I really enjoy the in depth knowledge provided by them. In addition to the great details provided, Data Intellect also covers technologies or databases beyond KDB/Q and how to interact with them. The blog posts are skillfully crafted, easily understandable, and serve as an excellent platform to enhance your understanding beyond the foundational concepts acquired from other sources.\\n\\nBut that\'s not all. The best part is that Data Intellect provides a complete, production ready KDB/Q framework called [TorQ](https://dataintellect.com/thoughts/?_sft_category=blog) for free as OPEN SOURCE. Yes, you read that right. Go and check it out for yourself, you can find TorQ [here](https://github.com/DataIntellectTech/TorQ)\\n \\n![Data Intellect Blog](./DataIntellect.png)\\n\\n### What\'s next\\n\\nIf you\'ve made it this far and possibly explored some of the suggested resources, you likely posses a solid understanding of KDB/Q, its concepts, applications, strengths and architecture. At this point, you might ask yourself what\'s next on this beautiful journey of mastering KDB/Q, which like any other skill, holds boundless potential. Moving forward,practice is key. Mastery, after all, emerges from dedicated practice. Nevertheless, I\'d like to offer you two more resources to help you on your path:\\n\\n#### KX Whitepapers\\n\\nWhitepapers are short, focused  papers explaining a particular topic in KDB/Q. These topics cover a broad spectrum, ranging from direct association with the Q programming language, its application, and interfaces to strategies for managing large data and systems. Furthermore, there exists a segment dedicated to delving into Machine Learning within the realm of KDB/Q. Notably, the complexity of these whitepapers varies significantly, with the majority catering to more seasoned developers.\\n\\nIt\'s worth mentioning that while some of these whitepapers may lack in-depth explanations of the presented code or practical implementation guidance, this should not deter you from exploring them. Below, I\'ve compiled a list of whitepapers that I\'ve personally perused and find exceptionally well-written and valuable for expanding your knowledge. Do keep in mind that I haven\'t read all whitepapers available [here](https://code.kx.com/q/wp/) and I can\'t comment on every single one of them\\n\\n - [Building real-time tick subscribers](https://code.kx.com/q/wp/rt-tick/) by Nathan Perrem\\n - [Common design principles for kdb+ gateways](https://code.kx.com/q/wp/gateway-design/) by Michael McClintock\\n - [Query Routing: A kdb+ framework for a scalable, load balanced system](https://code.kx.com/q/wp/query-routing/) by Kevin Holsgrove\\n - [Iterators](https://code.kx.com/q/wp/iterators/) by  Conor Slattery & Stephen Taylor\\n - [Parse trees and functional forms](https://code.kx.com/q/wp/parse-trees/) by Peter Storeng & Stephen Taylor\\n - [Interprocess communications](https://code.kx.com/q/wp/ipc/) by  Katrina McCormac\\n\\nI will cover some of them in future blog posts. \\n\\n#### KX Reference\\n\\nThe final resource I\'d like to introduce is akin to a Swiss pocket knife in the realm of KDB/Q learning: the KX Reference card. This invaluable tool encompasses a comprehensive compilation of KDB/Q keywords, datatypes, namespaces, operators, command-line options, and much more \u2013 the list is extensive and beyond the scope of this discussion.\\n\\nI find the Reference Card to be an indispensable asset, to the extent that I routinely keep it open in one of my web browser tabs. Whether you\'re seeking a swift verification of a keyword\'s functionality, exploring operators that align with your requirements, or revisiting subjects that may have become rusty over time, the Reference Card stands as your go-to resource.\\n\\n![KX Reference](./reference.png)\\n\\nAnd thus, we conclude our journey. Wishing you joyful learning and coding endeavors ahead"},{"id":"welcome","metadata":{"permalink":"/blog/welcome","source":"@site/blog/2023-08-28-welcome/index.md","title":"Welcome","description":"Welcome to DefconQ - Your Beginner\'s Guide to Navigating the KDB/Q Universe!","date":"2023-08-28T00:00:00.000Z","formattedDate":"August 28, 2023","tags":[{"label":"kdb/q","permalink":"/blog/tags/kdb-q"},{"label":"welcome","permalink":"/blog/tags/welcome"},{"label":"Hello World","permalink":"/blog/tags/hello-world"}],"readingTime":2.145,"hasTruncateMarker":true,"authors":[{"name":"Alexander Unterrainer","title":"DefconQ, KDB/Q Developer, Consultant","url":"https://github.com/AUnterrainer","imageURL":"/img/alex.jpeg","key":"alexander"}],"frontMatter":{"slug":"welcome","title":"Welcome","authors":["alexander"],"hide_table_of_contents":true,"tags":["kdb/q","welcome","Hello World"]},"unlisted":false,"prevItem":{"title":"Go-To KDB/Q Learning Resources","permalink":"/blog/Go-To KDB/Q Learning Resources"}},"content":"##  Welcome to DefconQ - Your Beginner\'s Guide to Navigating the KDB/Q Universe!\\n\\nHey there, tech enthusiasts and aspiring KDB/Q developers! Are you ready to embark on an exciting journey into the world of q programming, tice architecture, and design? Look no further, because you\'ve just stumbled upon your ultimate resource for demystifying the KDB/Q landscape.\\n\\nWe get it - starting out in the tech world can be a bit overwhelming. The jargon, the paradigms, the concepts - they can feel like a maze that\'s hard to navigate. But fear not! Our mission is to guide you through this maze, one step at a time, and make these seemingly complex topics as easy to grasp as building blocks.\\n\\n\x3c!--truncate--\x3e\\n\\n### Why Are We Here?\\n\\nBeing a self-starter myself - our blog is born out of the desire to make KDB/Q accessible to everyone, especially beginners. We\'ve been in your shoes, and we understand the struggles of wrapping your head around the q programming language, tick architecture, and design principles. That\'s why we\'re here to break down those barriers, sprinkle in some practical tips, and empower you to dive into the KDB/Q world with confidence.\\n\\n#### What Can You Expect?\\n\\nWhether you\'re a complete novice or someone looking to brush up on their skills, our blog has something for you. We\'ll start with the basics, explaining q programming paradigms in a way that won\'t make your head spin. We\'ll delve into the intricacies of tick architecture and design, so you can build solid foundations for your projects.\\n\\nBut that\'s not all! We\'re curating a collection of helpful resources that\'ll serve as your tech toolbox. From must-read articles to insightful videos, we\'re cherry-picking the best content to aid your learning journey. And yes, we\'re rolling up our sleeves to create step-by-step tutorials that walk you through real-world scenarios, so you can see these concepts in action.\\n\\n### Join Us On This Adventure\\n\\nBuckle up, because this is a journey you won\'t want to miss. Whether you\'re aspiring to be a programmer, an architect, or just someone intrigued by the tech magic happening behind the scenes, we\'re here to welcome you with open arms. Let\'s turn the overwhelming into the understandable, the complex into the clear, and the daunting into the doable.\\n\\nSo, stick around, bookmark us, and get ready to embark on a tech adventure that\'ll leave you with newfound knowledge, skills, and an unquenchable thirst for all things tech. Welcome to DefconQ - where we\'re turning tech novices into tech savvy superheroes, one blog post at a time!\\n\\n\\n![Hello World](./HelloWorld.png)"}]}')}}]);