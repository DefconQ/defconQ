"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9055],{5634:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>g,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var o=n(4848),r=n(8453);const a={slug:"How to Read, Understand and Learn KDB/Q code",title:"How to Read, Understand and Learn KDB/Q code",authors:["alexander"],hide_table_of_contents:!0,tags:["kdb/q","Learning","Beginner","Qbie"]},s=void 0,i={permalink:"/blog/How to Read, Understand and Learn KDB/Q code",source:"@site/blog/2023-09-11-read/index.mdx",title:"How to Read, Understand and Learn KDB/Q code",description:"In my previous blog post, I shared my favourite Go-To KDB/Q Learning Resources to help you to get started. However, as you dive deeper into the KDB/Q programming language and you begin to read and review other's code you might experience a slight sense of overwhelm. Two main characteristics of KDB/Q, namely its tersness and and its left-of-right evaluation order (KDB/Q expressions are evaluated left-of-right which equates to expressions are evaluated right-to-left), can pose initial challenges for new KDB/Q developers. It's important to overcome these hurdles and become familiar with these features as you progress.",date:"2023-09-11T00:00:00.000Z",formattedDate:"September 11, 2023",tags:[{label:"kdb/q",permalink:"/blog/tags/kdb-q"},{label:"Learning",permalink:"/blog/tags/learning"},{label:"Beginner",permalink:"/blog/tags/beginner"},{label:"Qbie",permalink:"/blog/tags/qbie"}],readingTime:13.505,hasTruncateMarker:!0,authors:[{name:"Alexander Unterrainer",title:"DefconQ, KDB/Q Developer, Consultant",url:"https://github.com/AUnterrainer",imageURL:"/img/alex.jpeg",key:"alexander"}],frontMatter:{slug:"How to Read, Understand and Learn KDB/Q code",title:"How to Read, Understand and Learn KDB/Q code",authors:["alexander"],hide_table_of_contents:!0,tags:["kdb/q","Learning","Beginner","Qbie"]},unlisted:!1,prevItem:{title:"Where to find help",permalink:"/blog/Where to find help"},nextItem:{title:"Go-To KDB/Q Learning Resources",permalink:"/blog/Go-To KDB/Q Learning Resources"}},l={authorsImageUrls:[void 0]},d=[];function c(e){const t={a:"a",p:"p",strong:"strong",...(0,r.R)(),...e.components};return(0,o.jsxs)(t.p,{children:["In my previous blog post, I shared my favourite ",(0,o.jsx)(t.a,{href:"https://defconq.tech/blog/Go-To%20KDB/Q%20Learning%20Resources",children:"Go-To KDB/Q Learning Resources"})," to help you to get started. However, as you dive deeper into the KDB/Q programming language and you begin to read and review other's code you might experience a slight sense of overwhelm. Two main characteristics of KDB/Q, namely its tersness and and its ",(0,o.jsx)(t.a,{href:"https://code.kx.com/q4m3/4_Operators/#412-left-of-right-evaluation",children:"left-of-right"})," evaluation order (KDB/Q expressions are evaluated left-",(0,o.jsx)(t.strong,{children:"of"}),"-right which equates to expressions are evaluated right-",(0,o.jsx)(t.strong,{children:"to"}),"-left), can pose initial challenges for new KDB/Q developers. It's important to overcome these hurdles and become familiar with these features as you progress."]})}function g(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var o=n(6540);const r={},a=o.createContext(r);function s(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);