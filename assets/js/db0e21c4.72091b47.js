"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8298],{1386:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var o=t(4848),a=t(8453);const r={sidebar_position:3},s="Garbage Collection",i={id:"concepts/garbageCollection",title:"Garbage Collection",description:"In this blog post, we cover another crucial concept, which if fully understood, can set you apart. Today's topic is Garbage Collection, and here's the news upfront: There's no such thing as Garbage in KDB/Q!! Yes, you read it correctly. Don't be caught off guard like I was, discovering this information in a job interview with \"the QGOD\" among all KDB/Q developers. Keep reading and learn everything you need to know about this essential topic.",source:"@site/docs/concepts/garbageCollection.mdx",sourceDirName:"concepts",slug:"/concepts/garbageCollection",permalink:"/docs/concepts/garbageCollection",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Memory Management",permalink:"/docs/concepts/memoryManagement"},next:{title:"Amend, Amend At: The Swiss Army knife among KDB/Q operators",permalink:"/docs/concepts/amend"}},c={},l=[{value:"Memory Allocation",id:"memory-allocation",level:2},{value:"Reference Counting",id:"reference-counting",level:2},{value:"<code>Q.gc[]</code> and Coalescing Memory",id:"qgc-and-coalescing-memory",level:2},{value:"The system command <code>-g</code>",id:"the-system-command--g",level:2},{value:"Why .Q.gc[] and <code>-g 1</code> can be bad",id:"why-qgc-and--g-1-can-be-bad",level:2},{value:"Recent changes in <code>.Q.gc[]</code>",id:"recent-changes-in-qgc",level:2},{value:"Conclusion",id:"conclusion",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"garbage-collection",children:"Garbage Collection"}),"\n",(0,o.jsxs)(n.p,{children:["In this blog post, we cover another crucial concept, which if fully understood, can set you apart. Today's topic is Garbage Collection, and here's the news upfront: There's no such thing as Garbage in KDB/Q!! Yes, you read it correctly. Don't be caught off guard like I was, discovering this information in a job interview with ",(0,o.jsx)(n.strong,{children:'"the QGOD"'})," among all KDB/Q developers. Keep reading and learn everything you need to know about this essential topic."]}),"\n",(0,o.jsx)(n.admonition,{type:"danger",children:(0,o.jsxs)(n.p,{children:["To fully comprehend Garbage Collection in KDB/Q, a solid understanding of Memory Management in KDB/Q is required, which you can find in detail in my previous blog post ",(0,o.jsx)(n.a,{href:"https://www.defconq.tech/docs/concepts/memoryManagement",children:"here"})]})}),"\n",(0,o.jsx)(n.h2,{id:"memory-allocation",children:"Memory Allocation"}),"\n",(0,o.jsxs)(n.p,{children:["As explained in my previous ",(0,o.jsx)(n.a,{href:"https://www.defconq.tech/docs/concepts/memoryManagement",children:"post"}),", KDB/Q employs a memory allocation strategy in blocks of powers of two, reserving the next larger memory block for the storage of the object. This memory allocation draws from the heap memory of KDB/Q processes, allocated during startup. The maximum memory allocated to a KDB/Q process can be defined by specifying a memory limit using the ",(0,o.jsx)(n.a,{href:"https://code.kx.com/q/basics/syscmds/#w-workspace",children:(0,o.jsx)(n.code,{children:"-w"})})," flag at startup. Alternatively, if no memory limit is specified, KDB/Q assumes there is none and utilizes all available memory as required. You can observe the above behaviour in the following code snippet:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"// Starting a KDB/Q process without memory limit\nAlexander@Alexanders-MacBook-Pro:~/repos|\n\u21d2  qq\nKDB+ 4.0 2023.01.20 Copyright (C) 1993-2023 Kx Systems\nm64/ 4(24)core 8192MB Alexander alexanders-macbook-pro.local 127.0.0.1 EXPIRE 2025.02.21 XXXX@gmail.com KDB PLUS TRIAL #5018719\n\nq).Q.w[]\nused| 359200\nheap| 67108864\npeak| 67108864\nwmax| 0\nmmap| 0\nmphy| 8589934592\nsyms| 668\nsymw| 28611\n// Starting a KBD/Q process with 200MB memory limit\nAlexander@Alexanders-MacBook-Pro:~/repos|\n\u21d2  qq -w 200\nKDB+ 4.0 2023.01.20 Copyright (C) 1993-2023 Kx Systems\nm64/ 4(24)core 8192MB Alexander alexanders-macbook-pro.local 127.0.0.1 EXPIRE 2025.02.21 XXXX@gmail.com KDB PLUS TRIAL #5018719\n\nq).Q.w[]\nused| 359296\nheap| 67108864\npeak| 67108864\nwmax| 209715200\nmmap| 0\nmphy| 8589934592\nsyms| 668\nsymw| 28611\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The system command ",(0,o.jsx)(n.a,{href:"https://code.kx.com/q/ref/dotq/#w-memory-stats",children:(0,o.jsx)(n.code,{children:".Q.w[]"})})," provides essential memory statistics in a user-friendly format. Key entries to examine include ",(0,o.jsx)(n.code,{children:"used"}),", denoting the amount of heap memory currently utilized, ",(0,o.jsx)(n.code,{children:"heap"}),", representing the total size of the heap, ",(0,o.jsx)(n.code,{children:"peak"}),", the largest heap memory size we have observed so far, ",(0,o.jsx)(n.code,{children:"wmax"}),", indicating the memory limit established by the ",(0,o.jsx)(n.code,{children:"-w"})," flag on startup, and ",(0,o.jsx)(n.code,{children:"mphy"})," the physical available memory of the system. As evident, the first case has a memory limit of 0, indicating an absence of limitations. In the second instance, we've set the memory limit to 200MB for the specified process, as reflected in ",(0,o.jsx)(n.code,{children:"wmax"})," returned by ",(0,o.jsx)(n.code,{children:".Q.w[]"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Another important observation we can make is the fact that even though we initiated our KDB/Q process with a 200MB memory limit in the second example, the initial heap is only allocated at 64MB. This behavior stems from KDB/Q's approach of not allocating the entire memory at once but rather expanding the heap in 64MB increments. If there is a memory limit set and our process breaches this limit the KDB/Q process will terminate with a ",(0,o.jsx)(n.code,{children:"-w abort"})," error."]}),"\n",(0,o.jsx)(n.admonition,{type:"danger",children:(0,o.jsxs)(n.p,{children:["It's crucial to understand that in the absence of a set memory limit, the effective memory limit is not equivalent to the physical memory, as indicated by ",(0,o.jsx)(n.code,{children:"mphy"}),", but rather twice that amount [5, p.131]. This discrepancy arises from the fact that most operating systems utilize a concept of ",(0,o.jsx)(n.a,{href:"https://www.techtarget.com/searchstorage/definition/virtual-memory",children:"Virtual Memory"}),", where secondary memory can be used as if it were a part of the main memory, basically functioning as an extension of the main memory."]})}),"\n",(0,o.jsx)(n.h2,{id:"reference-counting",children:"Reference Counting"}),"\n",(0,o.jsxs)(n.p,{children:["Now, let's dive into the most critical section of this article, so fasten your seatbelt and focus. KDB/Q employs a concept known as reference counting to track live objects. This means that once an object is no longer referenced, the associated memory allocated to this object is reclaimed and returned to the heap of our KDB/Q process (or to the OS if the system command ",(0,o.jsx)(n.code,{children:"-g"})," is set to ",(0,o.jsx)(n.code,{children:"1"}),", and the freed memory is greater than or equal to 64MB. Further details on this will be covered in a later section)."]}),"\n",(0,o.jsxs)(n.p,{children:["Let's pause for a moment and that information. If you were paying attention, you will realise, that what we just learned, means that ",(0,o.jsx)(n.strong,{children:"THERE IS NO SUCH THING AS GARBAGE in KDB/Q"}),". Yes, that's right. Since the memory occupied by an object is immediately reclaimed when the object is no longer referenced, and this freed memory can be assigned to a new object, we can affirm that there is no garbage in KDB/Q."]}),"\n",(0,o.jsxs)(n.p,{children:["The system command ",(0,o.jsx)(n.a,{href:"https://code.kx.com/q/basics/internal/#-16x-ref-count",children:(0,o.jsx)(n.code,{children:"-16!"})}),"  provides the reference count of a variable. The following code snippet demonstrates this feature."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"q)x:2\nq)-16!x\n1i\nq)x:y:z:2\nq)-16!x\n3i\nq)\n"})}),"\n",(0,o.jsxs)(n.h2,{id:"qgc-and-coalescing-memory",children:[(0,o.jsx)(n.code,{children:"Q.gc[]"})," and Coalescing Memory"]}),"\n",(0,o.jsxs)(n.p,{children:["Now that we know that there is no such thing as garbage, let's explore the functionality of ",(0,o.jsx)(n.a,{href:"https://code.kx.com/q/ref/dotq/#gc-garbage-collect",children:(0,o.jsx)(n.code,{children:".Q.gc[]"})}),". As mentioned in my earlier blog ",(0,o.jsx)(n.a,{href:"https://www.defconq.tech/docs/concepts/memoryManagement",children:"post"}),", KDB/Q allocates memory in blocks of power of 2, with the initial block being 64MB. When our KDB/Q process starts up, a 64MB heap is allocated. As we store data in variables, memory blocks of corresponding power-of-two sizes are created to accommodate the new data. However, if these variables are no longer referenced and the memory is no longer needed, calling ",(0,o.jsx)(n.code,{children:".Q.gc[]"})," in KDB/Q attempts to coalesce all free and adjacent memory blocks into the next larger power-of-two block. Moreover, any memory blocks larger or equal to 64MB will be returned to the operating system."]}),"\n",(0,o.jsx)(n.p,{children:"Let's have a look at this behaviour in practice"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"// First we start a new KDB/Q process and inspect the memory usage\nAlexander@Alexanders-MacBook-Pro:~/repos|\n\u21d2  qq\nKDB+ 4.0 2023.01.20 Copyright (C) 1993-2023 Kx Systems\nm64/ 4(24)core 8192MB Alexander alexanders-macbook-pro.local 127.0.0.1 EXPIRE 2025.02.21 XXXX@gmail.com KDB PLUS TRIAL #5018719\nq).Q.w[]*1e-6\nused| 0.359376\nheap| 67.10886\npeak| 67.10886\nwmax| 0\nmmap| 0\nmphy| 8589.935\nsyms| 0.000668\nsymw| 0.028611\n// We now create a vector with 10000000 numbers and see how much space that took\nq)v:til 10000000\nq).Q.w[]*1e-6\nused| 134.5758\nheap| 201.3266\npeak| 201.3266\nwmax| 0\nmmap| 0\nmphy| 8589.935\nsyms| 0.000668\nsymw| 0.028611\n// As you can see, this takes roughly 200MB of space\n// Deleting the variable v however will not free up the memory\nq)delete v from `.\n`.\n// v no longer exists as you can observe\nq)v\n'v\n  [0]  v\n       ^\n// However, the memory hasn't been returned to the OS and is still reservered for the KDB/Q heap\nq).Q.w[]*1e-6\nused| 0.359392\nheap| 201.3266\npeak| 201.3266\nwmax| 0\nmmap| 0\nmphy| 8589.935\nsyms| 0.000668\nsymw| 0.028611\n// Only when we invoke .Q.gc[] the free memory blocks are coalesced (defragmented) and returned to the OS\nq).Q.gc[]\n134217728\nq).Q.w[]*1e-6\nused| 0.35808\nheap| 67.10886\npeak| 201.3266\nwmax| 0\nmmap| 0\nmphy| 8589.935\nsyms| 0.000669\nsymw| 0.028641\n// You can see that after calling .Q.gc[] the size of the heap decreased to the same size we started with, roughly 67MB\n"})}),"\n",(0,o.jsxs)(n.p,{children:["In the example above, we started a new KDB/Q process and observed that the initial memory allocated to the process's heap was 67MB (",(0,o.jsx)(n.strong,{children:"NOTE"}),": slightly larger than the 64MB mentioned earlier in this article). Next, we created a vector containing 10 million long values and can observe that the memory occupied by our KBD/Q process increased to roughly 200MB. But why did the memory increase by that much? With 10 million long values, we'd expect roughly 80MB of space to be occupied, not 134MB. As explained in my previous blog post, KDB/Q allocates memory in power-of-two blocks, and the next larger block required to store 80MB of data is actually 134MB, totaling 200MB of heap memory. Finally we deleted our variable and inspect our memory stats one more time. But hold on, why does the heap still occupy 200MB? Why hasn't the memory been released to the OS? This is because KDB/Q doesn't automatically release memory to the OS unless the KDB/Q process is started with the ",(0,o.jsx)(n.code,{children:"-g"})," flag set to true. Only when invoking .Q.gc[] will the memory be returned to the OS, as demonstrated in the example above."]}),"\n",(0,o.jsxs)(n.p,{children:["Let's now have a closer look at the ",(0,o.jsx)(n.code,{children:"-g"})," flag."]}),"\n",(0,o.jsxs)(n.h2,{id:"the-system-command--g",children:["The system command ",(0,o.jsx)(n.code,{children:"-g"})]}),"\n",(0,o.jsxs)(n.p,{children:["The system command ",(0,o.jsx)(n.a,{href:"https://code.kx.com/q/basics/syscmds/#g-garbage-collection-mode",children:(0,o.jsx)(n.code,{children:"-g"})}),", often referred to as garbage collection mode (although, in my opinion, this is misleading as there is no such thing as garbage in KDB/Q), can be used to return unreferenced memory to the OS immediately. The ",(0,o.jsx)(n.code,{children:"g"})," flag can take one of two values:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"-g 0"}),": the deferred (default) mode, which returns memory to the OS when either .Q.gc[] is called or an allocation fails, offering a performance advantage but potentially posing challenges in dimensioning or managing memory requirements. If the freed memory isn't returned to the OS, our KDB/Q process might occupy free memory that could be used otherwise by another process"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"-g 1"}),": the immediate mode, which returns memory blocks equal to or larger than 64MB to the OS as soon as they are no longer referenced, but this comes with an associated performance overhead."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:'When starting a KDB/Q process without the -g flag specified, the flag will automatically set to 0 as this is the default mode, meaning that "garbage collection" is deferred. We have already seen this behaviour in our previous example, showing that the unreferenced memory is only returned when .Q.gc[] was invoked. Let\'s now look in more detail what happens when we set the -g flag to true.'}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Alexander@Alexanders-MacBook-Pro:~/repos|\n// We first start a KDB/Q process with the -g flag set to true\n\u21d2  qq -g 1\nKDB+ 4.0 2023.01.20 Copyright (C) 1993-2023 Kx Systems\nm64/ 4(24)core 8192MB Alexander alexanders-macbook-pro.local 127.0.0.1 EXPIRE 2025.02.21 XXXXr@gmail.com KDB PLUS TRIAL #5018719\n// We then create the same vector of 10000000 long values and inspect the memory usage\nq)v:til 10000000\nq).Q.w[]*1e-6\nused| 134.5772\nheap| 201.3266\npeak| 201.3266\nwmax| 0\nmmap| 0\nmphy| 8589.935\nsyms| 0.000668\nsymw| 0.028611\n// Next we delete the variable v\nq)delete v from `.\n`.\n// v no longer exists\nq)v\n'v\n  [0]  v\n       ^\n// We can observe that the unreferenced memory was returned to the OS immediately as the heap decreased\nq).Q.w[]*1e-6\nused| 0.359488\nheap| 67.10886\npeak| 201.3266\nwmax| 0\nmmap| 0\nmphy| 8589.935\nsyms| 0.000668\nsymw| 0.028611\nq)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["As you can see, having the ",(0,o.jsx)(n.code,{children:"-g"})," flag set to true will return unreferenced memory that is larger or equal than 64MB immediately to the OS. It is crucial to emphasize that only unreferenced memory above his 64MB threshold is returned to the OS. We will discuss this in the following section."]}),"\n",(0,o.jsxs)(n.h2,{id:"why-qgc-and--g-1-can-be-bad",children:["Why .Q.gc[] and ",(0,o.jsx)(n.code,{children:"-g 1"})," can be bad"]}),"\n",(0,o.jsx)(n.p,{children:"While freeing up memory might seem like a generally good practice, it's not always the case, particularly in low-latency, high-frequency applications where performance is key. Allow me to elablorate on the reasons behind this:"}),"\n",(0,o.jsxs)(n.p,{children:["We first look into the aspect of ",(0,o.jsx)(n.code,{children:".Q.gc[]"}),": As outlined earlier in this blog post, when initiating a KDB/Q process without a set memory limit, the actual allocated memory is twice the available physical memory due to the utilization of virtual memory. This characteristic introduces uncertainty regarding the duration of ",(0,o.jsx)(n.code,{children:".Q.gc[]"})," completion. Imagine a scenario with a substantial production box boasting hundreds or even thousands of gigabytes of RAM; the coalescence of unreferenced memory blocks could consume a considerable amount of time. Undoubtedly, you wouldn't want your trading applications to experience disruptions during this process."]}),"\n",(0,o.jsxs)(n.p,{children:["Now, let's explore the ",(0,o.jsx)(n.code,{children:"-g"})," flag, and you might already anticipate the issue with it. As a reminder, when the ",(0,o.jsx)(n.code,{children:"-g"})," flag is set to true, unreferenced memory is released to the OS immediately. However, unlike ",(0,o.jsx)(n.code,{children:".Q.gc[]"}),", the ",(0,o.jsx)(n.code,{children:"-g"})," flag doesn't consolidate free memory blocks, it solely releases free memory blocks that are larger or equal to 64MB. This implies that if you allocate a large number of small variables consuming less than 64MB, deleting them won't result in the return of this unreferenced memory to the OS. Let me illustrate this for you:"]}),"\n",(0,o.jsxs)(n.p,{children:["(",(0,o.jsx)(n.strong,{children:"Note"}),": This example has been partially taken from ",(0,o.jsx)(n.a,{href:"https://dataintellect.com/blog/garbage-collection-kdb/",children:"Garbage Collection in KDB+"})," by Data Intellect )"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'Alexander@Alexanders-MacBook-Pro:~/repos|\n// Again, we first start a KDB/Q process with the -g flag set to true\n\u21d2  qq -g 1\nKDB+ 4.0 2023.01.20 Copyright (C) 1993-2023 Kx Systems\nm64/ 4(24)core 8192MB Alexander alexanders-macbook-pro.local 127.0.0.1 EXPIRE 2025.02.21 XXXXr@gmail.com KDB PLUS TRIAL #5018719\n// We then create 10000 variables and store 3000 long numbers in each of them\nq)a:upper -10000?`4\nq){@[`.;x;:;til 3000]} each a;\n// Let\'s have a look at the memory stats\nq).Q.w[]*1e-6\nused| 328.4331\nheap| 335.5443\npeak| 335.5443\nwmax| 0\nmmap| 0\nmphy| 8589.935\nsyms| 0.020665\nsymw| 1.124617\n// As you can see, our heap increased by 335MB\n// However, each individual variable only takes 14bytes\nq)-22!first a\n14\n// Helper code: Creating 10000 vectors with 3000 long values each\nq){til 3000} each til 10000\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ..\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ..\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ..\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ..\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ..\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ..\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ..\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ..\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ..\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ..\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ..\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ..\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ..\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ..\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ..\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ..\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ..\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ..\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ..\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ..\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ..\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ..\n..\n// Whereas collectively, they amount to 240MB\nq)1e-6*-22!{til 3000} each til 10000\n240.06\n// Having another look at the memory stats, we can observe that the peak inreased even further\nq).Q.w[]*1e-6\nused| 328.4331\nheap| 671.0886\npeak| 671.0886\nwmax| 0\nmmap| 0\nmphy| 8589.935\nsyms| 0.020665\nsymw| 1.124617\n// We now delete all variables\nq){value"delete ",(string x)," from `."}each a;\n// But as you can see, the unreferenced memory was not returned to the OS\n// The heap is still 671MB \nq).Q.w[]*1e-6\nused| 0.490992\nheap| 671.0886\npeak| 671.0886\nwmax| 0\nmmap| 0\nmphy| 8589.935\nsyms| 0.020665\nsymw| 1.124617\n// Only when invoking .Q.gc[], the unreferenced memory is defragmented and then released\nq).Q.gc[]\n603979776\n// Our heap now decreased to 67MB, the smallest memory block allocated on startup\nq).Q.w[]*1e-6\nused| 0.48968\nheap| 67.10886\npeak| 671.0886\nwmax| 0\nmmap| 0\nmphy| 8589.935\nsyms| 0.020666\nsymw| 1.124647\n'})}),"\n",(0,o.jsxs)(n.p,{children:["In the example above, we initially created a list of 10,000 variables, each holding 3,000 long values. It's evident that our heap memory increased from the initial 67MB allocated on startup to 335MB. However, upon inspecting the memory size of the first individual variable among the 10,000, we observed that it only required 14 bytes. Whereas the collective size of our list of variables amounted to 240MB, as indicated by our helper code. (",(0,o.jsx)(n.strong,{children:"Note"}),": The reason it's 240MB and not 335MB is due to adding the initial block of 67MB to the 240MB and accounting for some overhead of the pointers to each list stored in the individual variables. In KDB/Q, each list has an associated pointer to the list, consuming 8 bytes of memory). After deleting all the variables, we noticed that our heap memory didn't decrease, even though the ",(0,o.jsx)(n.code,{children:"-g"})," flag was set to true. (The heap size is actually 671MB because our helper code also consumed some memory). This is because, unlike ",(0,o.jsx)(n.code,{children:".Q.gc[]"}),", the ",(0,o.jsx)(n.code,{children:"-g"})," flag doesn't coalesce unreferenced memory and only releases memory blocks larger or equal to 64MB to the OS. Since all variables only consume 14 bytes, no memory is released. It's only when invoking ",(0,o.jsx)(n.code,{children:".Q.gc[]"})," that the unreferenced memory is defragmented, releasing all memory larger or equal to 64MB to the OS. Inspecting the memory usage after ",(0,o.jsx)(n.code,{children:".Q.gc[]"})," confirms this."]}),"\n",(0,o.jsxs)(n.h2,{id:"recent-changes-in-qgc",children:["Recent changes in ",(0,o.jsx)(n.code,{children:".Q.gc[]"})]}),"\n",(0,o.jsxs)(n.p,{children:["Starting from version 4.1t (released in July 2022), ",(0,o.jsx)(n.a,{href:"https://code.kx.com/q/ref/dotq/#gc-garbage-collect",children:(0,o.jsx)(n.code,{children:".Q.gc[0]"})}),"  has been introduced to execute a subset of operations performed by ",(0,o.jsx)(n.code,{children:".Q.gc[]"}),", specifically, returning only unused blocks >= 64MB to the OS. This offers the advantage of faster execution compared to ",(0,o.jsx)(n.code,{children:".Q.gc[]"}),", but it comes with the drawback of not defragmenting unused memory blocks of smaller sizes and hence, it may not free as much unused memory."]}),"\n",(0,o.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsxs)(n.p,{children:['In conclusion, understanding memory management and garbage collection is pivotal when working with KDB/Q to ensure optimal performance in real-time data processing. Contrary to traditional concepts of garbage collection, KDB/Q adopts a reference counting mechanism, promptly releasing memory whenever an object is no longer referenced. This eliminates the concept of "garbage" in KDB/Q, as unreferenced memory is efficiently reallocated for new data. The system command ',(0,o.jsx)(n.code,{children:".Q.gc[]"})," and the ",(0,o.jsx)(n.code,{children:"-g"})," flag, when set to 1, provide means to return unreferenced memory blocks larger or equal to 64MB to the OS. However, the careful use of these tools is crucial, as ",(0,o.jsx)(n.code,{children:".Q.gc[]"})," defragments unused memory, whereas ",(0,o.jsx)(n.code,{children:"-g 1"})," may not efficiently free smaller-sized memory blocks. Considerations about latency and performance implications are essential, especially in high-frequency applications, urging developers to weigh the trade-offs when deciding to invoke garbage collection operations in KDB/Q."]}),"\n",(0,o.jsx)(n.p,{children:"As usual, feel free to reach out if you have any questions."}),"\n",(0,o.jsx)(n.p,{children:"Resources:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://www.timestored.com/kdb-guides/memory-management",children:"Memory Management in KDB"})," by Ryan Hamilton"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://dataintellect.com/blog/garbage-collection-kdb/",children:"Garbage Collection in KDB+"})," by Data Intellect"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://code.kx.com/q/ref/dotq/#gc-garbage-collect",children:".Q.gc"})," KX Reference Card"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://kx.com/academy/modules/memory-management-query-optimization/#memory-management-query-optimization",children:"Memory Management and Query Optimization"})," KX Academy"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://amzn.to/40a01Hv",children:"Q Tips"})," by Nick Psaris"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://www.techtarget.com/searchstorage/definition/virtual-memory",children:"Virtual Memory"})," by Alexander S. Gillis"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var o=t(6540);const a={},r=o.createContext(a);function s(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);