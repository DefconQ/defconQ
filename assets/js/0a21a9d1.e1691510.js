"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3730],{934:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var a=s(4848),n=s(8453);const i={sidebar_position:1},o="Pulse",r={id:"productivity/pulse",title:"Pulse",description:"In this post, we are going to look at Pulse, a real-time data visualization tool that allows you to quickly develop interactive, real-time dashboards with little to no effort and easily share it with your colleagues or users. It excels in presenting real-time trade blotters, price graphs, or any contextual or positional data crucial for traders. Tailored specifically for the financial industry, Pulse is particular well suited for managing big data in a time-critical and responsive manner.",source:"@site/docs/productivity/pulse.mdx",sourceDirName:"productivity",slug:"/productivity/pulse",permalink:"/docs/productivity/pulse",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Productivity Tools",permalink:"/docs/category/productivity-tools"}},d={},l=[{value:"Installation",id:"installation",level:2},{value:"Hands on Pulse!",id:"hands-on-pulse",level:2},{value:"Pulse SQL Editor",id:"pulse-sql-editor",level:3},{value:"Pulse Dashboards",id:"pulse-dashboards",level:3},{value:"Pulse Performance Considerations",id:"pulse-performance-considerations",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,n.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"pulse",children:"Pulse"}),"\n",(0,a.jsxs)(t.p,{children:["In this post, we are going to look at ",(0,a.jsx)(t.a,{href:"https://www.timestored.com/pulse/",children:"Pulse"}),", a real-time data visualization tool that allows you to quickly develop interactive, real-time dashboards with little to no effort and easily share it with your colleagues or users. It excels in presenting real-time trade blotters, price graphs, or any contextual or positional data crucial for traders. Tailored specifically for the financial industry, Pulse is particular well suited for managing big data in a time-critical and responsive manner."]}),"\n",(0,a.jsx)(t.p,{children:"Without further ado, let's explore Pulse."}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsxs)(t.p,{children:["Pulse is polyglot and supports various databases like KDB, MySQL, PostgreSQL, Redis, Timescale, SQLServer, and QuestDB. However, in this blog post, all code and database connections will be executed in KDB/Q. If you're keen on exploring demos for other databases, please visit the official ",(0,a.jsx)(t.a,{href:"https://www.timestored.com/pulse/",children:"website"})," or get in touch with ",(0,a.jsx)(t.a,{href:"https://www.timestored.com",children:"TimeStored"})]})}),"\n",(0,a.jsx)(t.h2,{id:"installation",children:"Installation"}),"\n",(0,a.jsxs)(t.p,{children:["Pulse is compatible with all three major operating systems: Microsoft Windows, Apple Mac, and Linux. Installing it is a straightforward process\u2014simply select the appropriate package for your operating system, download it, and follow the installation steps outlined ",(0,a.jsx)(t.a,{href:"https://www.timestored.com/pulse/download",children:"here"}),"."]}),"\n",(0,a.jsx)(t.p,{children:"The process couldn't have been simpler. Within a few minutes, we are all set and ready to create our first dashboard. Let's get started!!"}),"\n",(0,a.jsx)(t.h2,{id:"hands-on-pulse",children:"Hands on Pulse!"}),"\n",(0,a.jsx)(t.p,{children:"Pulse operates within a web browser, and upon launching the application, we are directed to the Home Screen of Pulse\u2014a simple yet resourceful and informative landing page."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Pulse Landing Page",src:s(1550).A+"",width:"1855",height:"859"})}),"\n",(0,a.jsx)(t.p,{children:"To engage with our data, we need to establish a connection between Pulse and a KDB/Q process. This can be your Historical Database (HDB), Real-time Database (RDB), or any other KDB/Q process with access to the data you wish to showcase."}),"\n",(0,a.jsxs)(t.p,{children:["For this demo we will follow the examples provided in one of the official Pulse ",(0,a.jsx)(t.a,{href:"https://www.timestored.com/pulse/tutorial/kdb-database-charts",children:"tutorials"}),". We simply start a KDB/Q process and subsequently generate data dynamically using the code furnished in the tutorial."]}),"\n",(0,a.jsx)(t.p,{children:"First, we start a KDB/Q process on port 5000."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"q -p 5000\nKDB+ 4.0 2023.01.20 Copyright (C) 1993-2023 Kx Systems\nm64/ 4(24)core 8192MB Alexander alexanders-macbook-pro.local 127.0.0.1 EXPIRE 2025.02.21 XXXX@gmail.com KDB PLUS TRIAL #5018719\n\nq)\\p\n5000i\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Next, we establish a connection to our KDB/Q process through Pulse. All we have to do is clicking the ",(0,a.jsx)(t.strong,{children:"Connect Data"})," button and providing the host and port details we want to connect to."]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Pulse Landing Page",src:s(2518).A+"",width:"1849",height:"994"})}),"\n",(0,a.jsx)(t.p,{children:"We are now ready to explorer our data."}),"\n",(0,a.jsx)(t.h3,{id:"pulse-sql-editor",children:"Pulse SQL Editor"}),"\n",(0,a.jsxs)(t.p,{children:["Pulse isn't just simply a data visualisation tool, but it goes beyond; it also incorporates a built-in web version of ",(0,a.jsx)(t.a,{href:"https://www.timestored.com/qstudio/",children:"qStudio"})," an intelligent code editor designed for KDB/Q, providing features such as KDB/Q Syntax Highlighting, Q Code Completion, Database Management tools to modify your database structure as well as utility tools such as qDoc for generating HTML documentation or QUnit, a unit testing framework for KDB/Q."]}),"\n",(0,a.jsx)(t.p,{children:"You can access the KDB/Q Editor available in the SQL Editor tab to compose and execute KDB/Q code as you would in your preferred IDE, benefiting from the additional features provided by Pulse."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Pulse SQL Editor",src:s(2448).A+"",width:"1873",height:"1044"})}),"\n",(0,a.jsx)(t.h3,{id:"pulse-dashboards",children:"Pulse Dashboards"}),"\n",(0,a.jsxs)(t.p,{children:["Let's now create our first Dashboard. Navigate to the HomeScreen and select ",(0,a.jsx)(t.strong,{children:"Add Dashboard"}),". This action will redirect you to a new, empty dashboard. From here, you can add various components and customize them by transitioning to Design Mode. Save the dashboard, assign a new name, or share it with your colleagues."]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Pulse Ready to go",src:s(5151).A+"",width:"1870",height:"781"})}),"\n",(0,a.jsxs)(t.p,{children:["We will first examine the most recent 10 rows of our ",(0,a.jsx)(t.code,{children:"trades"})," table. This can be accomplished by executing the following concise KDB/Q code."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"-10 sublist trades\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Pulse Trades Sublist",src:s(4110).A+"",width:"1872",height:"615"})}),"\n",(0,a.jsx)(t.p,{children:"Notice that due to the 5-second refresh interval, Pulse will autonomously re-execute the query every 5 seconds. You now have a dynamically updating, real-time trades table showcasing the latest 10 trades."}),"\n",(0,a.jsx)(t.p,{children:"You can observe the updates here:"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Pulse Trades Sublist",src:s(2885).A+"",width:"1875",height:"604"})}),"\n",(0,a.jsx)(t.admonition,{type:"tip",children:(0,a.jsx)(t.p,{children:"If you're concerned that frequent dashboard refreshes might impact performance, we will address this in a later section of the article."})}),"\n",(0,a.jsx)(t.p,{children:"Now, let's take a closer look at our trade table. We'll choose the columns we are interested in and obtain a well-formatted table."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Pulse Trades Table",src:s(2745).A+"",width:"1873",height:"640"})}),"\n",(0,a.jsx)(t.p,{children:"As easy as it was to render our data, customizing the formatting of individual columns to our preferences is just as simple. A quick right-click on any of the columns reveals the formatting settings."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Pulse Trades Table Tag",src:s(9143).A+"",width:"1870",height:"679"})}),"\n",(0,a.jsxs)(t.p,{children:["Let's customise some columns. First, we add a tag to our ",(0,a.jsx)(t.code,{children:"sym"})," column, then we remove decimal points from the ",(0,a.jsx)(t.code,{children:"quantity"})," column, and finally, convert the ",(0,a.jsx)(t.code,{children:"price"})," column to GBP \xa3. We also rename the dashboard to ",(0,a.jsx)(t.code,{children:"DefconQ Dashboard"})," and rename the table to ",(0,a.jsx)(t.code,{children:"trades"}),"."]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Pulse Trades Table Tag All",src:s(9534).A+"",width:"1870",height:"964"})}),"\n",(0,a.jsxs)(t.p,{children:["One of my personal favorites, however, involves the special formatting you can apply to columns using the dedicated column-name syntax. Let's explore this feature. Using the ",(0,a.jsx)(t.code,{children:"_sd_databar"})," annotation in combination with the column name will transform the column to showcase its content as a databar. This functionality seamlessly integrates with our percent column."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"select time,sym,status,quantity,destination,orderType,percent_sd_databar:percent%100,\n\tprice,name from trades where i>max[i]-500\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Pulse Trades Table SD Formatting",src:s(5403).A+"",width:"1869",height:"604"})}),"\n",(0,a.jsx)(t.p,{children:"Next we would like to add a user input form and make our query reactive, depending on the input we provide. We first start by adding a date picker"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Pulse Trades Date Picker",src:s(2457).A+"",width:"1873",height:"745"})}),"\n",(0,a.jsxs)(t.p,{children:["We also add a dropdown box for our ",(0,a.jsx)(t.code,{children:"sym"})," column, a multi-check box for the ",(0,a.jsx)(t.code,{children:"orderType"})," column and a slider for the ",(0,a.jsx)(t.code,{children:"quantity"})," and assign each user input component to a dedicated variable name. The final configuration will then look like the following"]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Pulse Trades User Input",src:s(384).A+"",width:"1867",height:"681"})}),"\n",(0,a.jsx)(t.p,{children:"Now, all that remains is to update our code, and we will have a completely interactive trades table."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"select from (update date:.z.d from \n\tselect time,sym,status,quantity,destination,orderType,percent_sd_databar:percent%100,\n\t         price,name from trades where i>max[i]-500)\n\t\twhere date=((myDate)), sym=`$((mySym)), orderType in `$((myOT)), quantity>((myQTY))\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Pulse Trades User Input",src:s(7123).A+"",width:"1876",height:"592"})}),"\n",(0,a.jsx)(t.p,{children:"Once satisfied with our dashboard, we can save it and exit the design mode to inspect the final result."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Pulse Trades User Input",src:s(5608).A+"",width:"1876",height:"445"})}),"\n",(0,a.jsx)(t.p,{children:"When dealing with large datasets, there are times when you don't want to refresh your dashboard until you've finished modifying all the user input fields. Pulse provides a simple solution for this \u2013 you just need to add a submit button. This button allows you to send the query only after you've clicked it, preventing automatic refreshing during ongoing modifications. You can add a submit button from the form editor of the components:"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Pulse Trades Submit Button",src:s(8825).A+"",width:"1867",height:"681"})}),"\n",(0,a.jsx)(t.p,{children:"This will add a button to your input form. You then simply have to add the below code snippet to trigger your query"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"((submit_5))\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Pulse Trades Submit Button",src:s(3747).A+"",width:"1876",height:"705"})}),"\n",(0,a.jsxs)(t.p,{children:["As you can see, a submit button has been added and the table isn't displayed before you send the query. The information ",(0,a.jsx)(t.strong,{children:'"Awaiting Submit"'})," is displayed to inform the user about this."]}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"submit_5"})," name of the button is automatically assigned by default. You can rename your components as you wish."]})}),"\n",(0,a.jsx)(t.p,{children:"After exiting the design mode, we can review the final appearance of our dashboard."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Pulse Trades Submit Button",src:s(5771).A+"",width:"1873",height:"405"})}),"\n",(0,a.jsx)(t.p,{children:"We have seen that we can create a dashboard displaying trade data in a table with little to no effort in a very short time. But what about graphs? Charting should definitely be more complicated? Or should it not? Let's have a look."}),"\n",(0,a.jsxs)(t.p,{children:["We create a new dashboard by repeating the same steps as before, using the ",(0,a.jsx)(t.strong,{children:"Add Dashboard"})," button on the Homescreen to start the task. This time, however, instead of adding a table component to the dashboard we add a ",(0,a.jsx)(t.strong,{children:"Timeseries"})," component. As before, Pulse initially creates some template graph with random data. We can then modify the graph to display the data we are interested in."]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Pulse Graph Template",src:s(7831).A+"",width:"1873",height:"1093"})}),"\n",(0,a.jsx)(t.p,{children:"We want to analyze the performance of three technology stocks by charting their prices over time. We generate three separate graphs for each stock and an additional graph to compare the prices of two of the stocks. This scenario is a typical use case you might encounter in your role."}),"\n",(0,a.jsx)(t.p,{children:"To accomplish this, we simply need to create and arrange four distinct time series components and update the corresponding query accordingly. The query below demonstrates how it's done for the Microsoft stock."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"`time xasc select time,price from trades where sym=`MSFT\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Pulse Graph Template",src:s(9595).A+"",width:"1875",height:"1098"})}),"\n",(0,a.jsx)(t.p,{children:"Comparing the graphs of two stocks is as straightforward as joining the data for both stocks and sorting it by time. However, it's necessary to rename the price column with the name of the respective stock. As they say, a picture is worth a thousand words, so let me show you."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"`time xasc (uj/){(`time,x) xcol 1!`time xasc select time,price from trades where sym=x} each `MSFT`FB\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Pulse Graph Template",src:s(2465).A+"",width:"1873",height:"1096"})}),"\n",(0,a.jsx)(t.p,{children:"We save our changes and exit the design mode to obtain the final result."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Pulse Graph Template",src:s(7848).A+"",width:"1873",height:"1125"})}),"\n",(0,a.jsx)(t.p,{children:"I vividly recall the first time I sat in front of a Bloomberg Terminal, captivated by the market data for various world indices on stock markets. The dynamic price updates and the flashing green and red colors indicating up and down changes held my fascination. Wouldn't it be amazing if we could create something similar ourselves? Let's give it a try."}),"\n",(0,a.jsx)(t.p,{children:"For the purpose of this, we'll modify our previous dashboard by removing all but one graphs and adding a table component. We then adjust the corresponding query to select the time, price, and price difference between updates for each symbol. Leveraging the special formatting syntax, we can alter the formatting of the price column to feature a green background when the stock goes up and a red background when it goes down. Achieving this is a straightforward process, requiring just a few simple steps."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"select price_SD_BG:?[d>0;`green;?[d<0;`red;`]] from select last price,d:last[price]-last prev price, \n\tlast time by sym from trades\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Pulse Graph Template",src:s(5732).A+"",width:"1872",height:"630"})}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsxs)(t.p,{children:["Note the special formatting using the ",(0,a.jsx)(t.strong,{children:"_SD_BG"})," annotation"]})}),"\n",(0,a.jsx)(t.p,{children:"And with that, we conclude our brief demonstration of Pulse."}),"\n",(0,a.jsx)(t.h2,{id:"pulse-performance-considerations",children:"Pulse Performance Considerations"}),"\n",(0,a.jsx)(t.p,{children:"Earlier, we briefly discussed Pulse's performance and its ability to handle large data sets responsively. This matter is extensively covered and explained in their documentation, but I will provide a summary for you."}),"\n",(0,a.jsx)(t.p,{children:"Efforts to optimize query performance in Pulse involve:"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsx)(t.li,{children:"Utilizing a websocket for communication, eliminating the need to open an HTTP handle every time, as seen in some other frameworks."}),"\n",(0,a.jsx)(t.li,{children:"Implementing connection pooling for database queries, which allows sharing connections among users/dashboards, thereby avoiding the cost of opening a new connection each time."}),"\n",(0,a.jsx)(t.li,{children:'Introducing a mechanism where, if the database query result remains unchanged, a "nochange" message is sent to the client instead of the entire data load.'}),"\n",(0,a.jsxs)(t.li,{children:["Employing query caching for situations where the same query is executed across multiple users. More information on query caching can be found at ",(0,a.jsx)(t.a,{href:"https://www.timestored.com/pulse/help/query-caching",children:"https://www.timestored.com/pulse/help/query-caching"}),"."]}),"\n",(0,a.jsxs)(t.li,{children:["Distinguishing itself from many other visualization tools, Pulse supports the streaming of non-database sources, eliminating the need for the store-to-table step. Examples include streaming from kdb (",(0,a.jsx)(t.a,{href:"https://www.timestored.com/pulse/help/connections-subscriptions",children:"https://www.timestored.com/pulse/help/connections-subscriptions"}),") and streaming Binance websockets (",(0,a.jsx)(t.a,{href:"https://www.timestored.com/pulse/help/connections-binance",children:"https://www.timestored.com/pulse/help/connections-binance"}),"). To enhance problem-solving capabilities, Pulse allows the appending of incoming data on the client side, ensuring that only the new rows are transmitted."]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,a.jsx)(t.p,{children:"In conclusion, my experience with Pulse left a lasting impression, highlighting its remarkable ease of use for displaying and modifying data swiftly. The platform's user-friendly interface and intuitive design resulted in a smooth and enjoyable learning curve. Even for someone like myself, who may not be particularly fond of UI and front-end tasks, Pulse proved to be an efficient and enjoyable tool for creating interactive dashboards. The minimal time investment required to achieve meaningful results further adds to the appeal of Pulse as a productivity-enhancing solution."})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},2518:(e,t,s)=>{s.d(t,{A:()=>a});const a=s.p+"assets/images/AddConnection-e6d7cf96622a6ff5c4f2945396a5e2ec.png"},384:(e,t,s)=>{s.d(t,{A:()=>a});const a=s.p+"assets/images/DashBoardCheckBox-2f5d3bcec2b4bdc1a43bcbb1b841fb89.png"},2457:(e,t,s)=>{s.d(t,{A:()=>a});const a=s.p+"assets/images/DashBoardDatePicker-22cebde4cfbb9590291f658158fe7d1f.png"},7831:(e,t,s)=>{s.d(t,{A:()=>a});const a=s.p+"assets/images/DashBoardGraph-8e48fa1b1ab4450b293c8348f3d85191.png"},9595:(e,t,s)=>{s.d(t,{A:()=>a});const a=s.p+"assets/images/DashBoardGraphMultiple-1d7487a43faaff04b8cedf235d7c8f74.png"},2465:(e,t,s)=>{s.d(t,{A:()=>a});const a=s.p+"assets/images/DashBoardGraphMultiple2-f0ffd71db542ae743793b95a2639692e.png"},7848:(e,t,s)=>{s.d(t,{A:()=>a});const a=s.p+"assets/images/DashBoardGraphMultiple3-f2e755f8a8b90de5af7321e9244c6ceb.png"},5608:(e,t,s)=>{s.d(t,{A:()=>a});const a=s.p+"assets/images/DashBoardResult-80bd089649b8739e9a9fa301b429f298.png"},3747:(e,t,s)=>{s.d(t,{A:()=>a});const a=s.p+"assets/images/DashBoardSubmit-a80ceed86e9c7d85eaa43637c88df179.png"},8825:(e,t,s)=>{s.d(t,{A:()=>a});const a=s.p+"assets/images/DashBoardSubmitConfig-dfca0c69af9f77f8b56c0c4ba422dc39.png"},5771:(e,t,s)=>{s.d(t,{A:()=>a});const a=s.p+"assets/images/DashBoardSubmitFinal-a11ac2872701993c9ee81894e28d720a.png"},4110:(e,t,s)=>{s.d(t,{A:()=>a});const a=s.p+"assets/images/DashBoardTable1-16ad94c7ef79fdbc81247472982a7502.png"},2885:(e,t,s)=>{s.d(t,{A:()=>a});const a=s.p+"assets/images/DashBoardTable2-52770f326cd8d41d07bf427822f5b351.png"},9143:(e,t,s)=>{s.d(t,{A:()=>a});const a=s.p+"assets/images/DashBoardTableTag-08d4029be99971c5247d775cec00d0f8.png"},9534:(e,t,s)=>{s.d(t,{A:()=>a});const a=s.p+"assets/images/DashBoardTableTagAll-17f36c51947d1e56620f3bd4dd6f1184.png"},2745:(e,t,s)=>{s.d(t,{A:()=>a});const a=s.p+"assets/images/DashBoardTrade-d91b6d976b5263f3e214b67d7503884d.png"},5403:(e,t,s)=>{s.d(t,{A:()=>a});const a=s.p+"assets/images/DashBoardTradeDateColumn-0cad63c55ae9991189f3ee152d449776.png"},5732:(e,t,s)=>{s.d(t,{A:()=>a});const a=s.p+"assets/images/DashBoardUpDown-b230fe3fbafb4ceab949e95c191b5ce1.png"},7123:(e,t,s)=>{s.d(t,{A:()=>a});const a=s.p+"assets/images/DashBoardUserInputResult-799e1c5403d7111ec0038b140ca7fd19.png"},1550:(e,t,s)=>{s.d(t,{A:()=>a});const a=s.p+"assets/images/HomeScreen-f3e837df18940c71dca01c3741ac99af.png"},5151:(e,t,s)=>{s.d(t,{A:()=>a});const a=s.p+"assets/images/ReadyToGo-09fd9face673a4ddbb2cf2be2bc04169.png"},2448:(e,t,s)=>{s.d(t,{A:()=>a});const a=s.p+"assets/images/SQLEditor-c583aea3f5196894027761deffa6c6e3.png"},8453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>r});var a=s(6540);const n={},i=a.createContext(n);function o(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);