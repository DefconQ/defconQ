"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9026],{19216:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var n=o(74848),r=o(28453);const a={slug:"Where to find help",title:"Where to find help",authors:["alexander"],hide_table_of_contents:!0,tags:["kdb/q","Help","StackOverFlow","KX Community","Mentorship"]},s=void 0,i={permalink:"/blog/Where to find help",source:"@site/blog/2023-09-18-help/index.mdx",title:"Where to find help",description:"So, you've delved into 'Q for Mortals' and a few other fundamental references I shared with you in my previous post, immersed yourself in code, tutorials, and successfully tackled your initial tasks. However, as you progress, you inevitably encounter that frustrating error. You try the different approaches you normally attempt when running into an error but you've exhausted every strategy, set breakpoints, meticulously stepped through the code, and yet, you can't figure out what's wrong with your code. Maybe you've encountered a challenge you are unsure how to tackle or perhaps you simply want to ensure your solution is optimal, whether in terms of execution time or memory usage. In any of these scenarios, the need for assistance arises, and in this blog post, we'll look at the different options for help with your KDB/Q challenges.",date:"2023-09-18T00:00:00.000Z",tags:[{label:"kdb/q",permalink:"/blog/tags/kdb-q"},{label:"Help",permalink:"/blog/tags/help"},{label:"StackOverFlow",permalink:"/blog/tags/stack-over-flow"},{label:"KX Community",permalink:"/blog/tags/kx-community"},{label:"Mentorship",permalink:"/blog/tags/mentorship"}],readingTime:4.145,hasTruncateMarker:!0,authors:[{name:"Alexander Unterrainer",title:"DefconQ, KDB/Q Developer, Consultant",url:"https://github.com/AUnterrainer",imageURL:"/img/alex.jpeg",key:"alexander"}],frontMatter:{slug:"Where to find help",title:"Where to find help",authors:["alexander"],hide_table_of_contents:!0,tags:["kdb/q","Help","StackOverFlow","KX Community","Mentorship"]},unlisted:!1,prevItem:{title:"Advent of Code -  Daily Coding Practice",permalink:"/blog/Advent of Code -  Daily Coding Practice"},nextItem:{title:"How to Read, Understand and Learn KDB/Q code",permalink:"/blog/How to Read, Understand and Learn KDB/Q code"}},l={authorsImageUrls:[void 0]},u=[];function d(e){const t={a:"a",p:"p",...(0,r.R)(),...e.components};return(0,n.jsxs)(t.p,{children:["So, you've delved into 'Q for Mortals' and a few other fundamental references I shared with you in my previous ",(0,n.jsx)(t.a,{href:"https://defconq.tech/blog/Go-To%20KDB/Q%20Learning%20Resources",children:"post"}),", immersed yourself in code, tutorials, and successfully tackled your initial tasks. However, as you progress, you inevitably encounter that frustrating error. You try the different approaches you normally attempt when running into an error but you've exhausted every strategy, set breakpoints, meticulously stepped through the code, and yet, you can't figure out what's wrong with your code. Maybe you've encountered a challenge you are unsure how to tackle or perhaps you simply want to ensure your solution is optimal, whether in terms of execution time or memory usage. In any of these scenarios, the need for assistance arises, and in this blog post, we'll look at the different options for help with your KDB/Q challenges."]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},28453:(e,t,o)=>{o.d(t,{R:()=>s,x:()=>i});var n=o(96540);const r={},a=n.createContext(r);function s(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);